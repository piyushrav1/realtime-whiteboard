{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gamin\\\\OneDrive\\\\Desktop\\\\Project\\\\Whiteboard\\\\live-whiteboard-app\\\\whiteboard-frontend\\\\src\\\\components\\\\WhiteboardRoom.js\",\n  _s = $RefreshSig$();\n// whiteboard-frontend/src/components/WhiteboardRoom.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Stage, Layer, Line } from 'react-konva';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport './WhiteboardRoom.css';\n\n// Make sure YOUR_PC_IP_ADDRESS is replaced with your actual PC's IP.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('192.168.1.102:5000');\nfunction WhiteboardRoom() {\n  _s();\n  const {\n    roomName\n  } = useParams();\n  const navigate = useNavigate();\n  const [lines, setLines] = useState([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const stageRef = useRef(null);\n  const currentLineId = useRef(null);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [newChatMessage, setNewChatMessage] = useState('');\n  const chatMessagesEndRef = useRef(null);\n\n  // NEW: State for Konva stage dimensions\n  const [stageDimensions, setStageDimensions] = useState({\n    width: window.innerWidth * 0.7,\n    // Initial desktop-like size\n    height: window.innerHeight * 0.8\n  });\n  const canvasContainerRef = useRef(null); // Ref to the container around the Stage\n\n  // --- Socket.IO Event Listeners & Room Joining ---\n  useEffect(() => {\n    if (!roomName) {\n      navigate('/');\n      return;\n    }\n    socket.emit('joinRoom', roomName);\n    socket.on('connect', () => {\n      console.log('Connected to backend Socket.IO:', socket.id);\n    });\n    socket.on('disconnect', () => {\n      console.log('Disconnected from backend Socket.IO');\n      alert('Disconnected from server. Please refresh.');\n      navigate('/');\n    });\n    socket.on('whiteboardState', data => {\n      console.log('Received initial room state:', data);\n      setLines(data.lines);\n      setChatMessages(data.messages);\n    });\n    socket.on('drawingStarted', newLine => {\n      setLines(prevLines => [...prevLines, newLine]);\n    });\n    socket.on('drawing', data => {\n      const {\n        lineId,\n        newPoints\n      } = data;\n      setLines(prevLines => {\n        return prevLines.map(line => {\n          if (line.id === lineId) {\n            return {\n              ...line,\n              points: line.points.concat(newPoints)\n            };\n          }\n          return line;\n        });\n      });\n    });\n    socket.on('drawingFinished', data => {\n      const {\n        lineId,\n        finalLineState\n      } = data;\n      setLines(prevLines => {\n        return prevLines.map(line => {\n          if (line.id === lineId) {\n            return finalLineState;\n          }\n          return line;\n        });\n      });\n    });\n    socket.on('chatMessage', message => {\n      setChatMessages(prevMessages => [...prevMessages, message]);\n    });\n    socket.on('userJoined', username => {\n      setChatMessages(prevMessages => [...prevMessages, {\n        username: 'System',\n        message: `${username} has joined the room.`,\n        timestamp: new Date()\n      }]);\n    });\n\n    // NEW: Resize observer to update Konva stage dimensions\n    const handleResize = () => {\n      if (canvasContainerRef.current) {\n        const {\n          clientWidth,\n          clientHeight\n        } = canvasContainerRef.current;\n        setStageDimensions({\n          width: clientWidth,\n          height: clientHeight\n        });\n      }\n    };\n    window.addEventListener('resize', handleResize);\n    // Initial dimensions when component mounts\n    handleResize();\n    return () => {\n      window.removeEventListener('resize', handleResize); // Clean up resize listener\n      socket.off('connect');\n      socket.off('disconnect');\n      socket.off('whiteboardState');\n      socket.off('drawingStarted');\n      socket.off('drawing');\n      socket.off('drawingFinished');\n      socket.off('chatMessage');\n      socket.off('userJoined');\n    };\n  }, [roomName, navigate]);\n  useEffect(() => {\n    var _chatMessagesEndRef$c;\n    (_chatMessagesEndRef$c = chatMessagesEndRef.current) === null || _chatMessagesEndRef$c === void 0 ? void 0 : _chatMessagesEndRef$c.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [chatMessages]);\n\n  // --- Drawing Logic (unchanged besides stage dimensions) ---\n  const handleMouseDown = e => {\n    if (e.evt.type === 'touchstart') {\n      e.evt.preventDefault();\n    }\n    setIsDrawing(true);\n    const pos = e.target.getStage().getPointerPosition();\n    const newLineId = `${socket.id}-${Date.now()}`;\n    currentLineId.current = newLineId;\n    const newLine = {\n      id: newLineId,\n      tool: 'pen',\n      points: [pos.x, pos.y],\n      stroke: 'black',\n      strokeWidth: 5\n    };\n    setLines(prevLines => [...prevLines, newLine]);\n    socket.emit('startDrawing', {\n      roomName,\n      line: newLine\n    });\n  };\n  const handleMouseMove = e => {\n    if (!isDrawing) {\n      return;\n    }\n    if (e.evt.type === 'touchmove') {\n      e.evt.preventDefault();\n    }\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    let lastLine = lines.find(line => line.id === currentLineId.current);\n    if (lastLine) {\n      lastLine.points = lastLine.points.concat([point.x, point.y]);\n      setLines(prevLines => {\n        return prevLines.map(line => line.id === lastLine.id ? lastLine : line);\n      });\n      socket.emit('drawing', {\n        roomName,\n        lineId: currentLineId.current,\n        newPoints: [point.x, point.y]\n      });\n    }\n  };\n  const handleMouseUp = () => {\n    setIsDrawing(false);\n    const finalLine = lines.find(line => line.id === currentLineId.current);\n    if (finalLine) {\n      socket.emit('endDrawing', {\n        roomName,\n        lineId: currentLineId.current,\n        finalLineState: finalLine\n      });\n    }\n    currentLineId.current = null;\n  };\n  const handleSendChatMessage = () => {\n    if (newChatMessage.trim()) {\n      socket.emit('chatMessage', {\n        roomName,\n        message: newChatMessage.trim()\n      });\n      setNewChatMessage('');\n    }\n  };\n  const handleChatKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSendChatMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"whiteboard-page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"whiteboard-main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Whiteboard Room: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"room-name\",\n            children: roomName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 32\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => navigate('/'),\n          className: \"leave-button\",\n          children: \"Leave Room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"whiteboard-canvas-container\",\n        ref: canvasContainerRef,\n        children: [\" \", /*#__PURE__*/_jsxDEV(Stage, {\n          width: stageDimensions.width,\n          height: stageDimensions.height,\n          onMouseDown: handleMouseDown,\n          onMousemove: handleMouseMove,\n          onMouseup: handleMouseUp,\n          onTouchStart: handleMouseDown,\n          onTouchMove: handleMouseMove,\n          onTouchEnd: handleMouseUp,\n          ref: stageRef,\n          style: {\n            cursor: 'crosshair',\n            backgroundColor: 'white',\n            touchAction: 'none'\n          },\n          children: /*#__PURE__*/_jsxDEV(Layer, {\n            children: lines.map(line => /*#__PURE__*/_jsxDEV(Line, {\n              points: line.points,\n              stroke: line.stroke,\n              strokeWidth: line.strokeWidth,\n              tension: 0.5,\n              lineCap: \"round\",\n              lineJoin: \"round\",\n              globalCompositeOperation: line.tool === 'eraser' ? 'destination-out' : 'source-over'\n            }, line.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"hint-text margin-top-md\",\n        children: \"Draw here. Open this room in another tab to see real-time collaboration.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Room Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: [chatMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chat-username\",\n            children: [msg.username, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this), \" \", msg.message, /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chat-timestamp\",\n            children: new Date(msg.timestamp).toLocaleTimeString([], {\n              hour: '2-digit',\n              minute: '2-digit'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: chatMessagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your message...\",\n          value: newChatMessage,\n          onChange: e => setNewChatMessage(e.target.value),\n          onKeyPress: handleChatKeyPress,\n          className: \"chat-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendChatMessage,\n          className: \"send-button\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n}\n_s(WhiteboardRoom, \"sU9snG+4gwttTounr8xNw42TVME=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = WhiteboardRoom;\nexport default WhiteboardRoom;\nvar _c;\n$RefreshReg$(_c, \"WhiteboardRoom\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Stage","Layer","Line","useParams","useNavigate","io","jsxDEV","_jsxDEV","socket","WhiteboardRoom","_s","roomName","navigate","lines","setLines","isDrawing","setIsDrawing","stageRef","currentLineId","chatMessages","setChatMessages","newChatMessage","setNewChatMessage","chatMessagesEndRef","stageDimensions","setStageDimensions","width","window","innerWidth","height","innerHeight","canvasContainerRef","emit","on","console","log","id","alert","data","messages","newLine","prevLines","lineId","newPoints","map","line","points","concat","finalLineState","message","prevMessages","username","timestamp","Date","handleResize","current","clientWidth","clientHeight","addEventListener","removeEventListener","off","_chatMessagesEndRef$c","scrollIntoView","behavior","handleMouseDown","e","evt","type","preventDefault","pos","target","getStage","getPointerPosition","newLineId","now","tool","x","y","stroke","strokeWidth","handleMouseMove","stage","point","lastLine","find","handleMouseUp","finalLine","handleSendChatMessage","trim","handleChatKeyPress","key","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","onMouseDown","onMousemove","onMouseup","onTouchStart","onTouchMove","onTouchEnd","style","cursor","backgroundColor","touchAction","tension","lineCap","lineJoin","globalCompositeOperation","msg","index","toLocaleTimeString","hour","minute","placeholder","value","onChange","onKeyPress","_c","$RefreshReg$"],"sources":["C:/Users/gamin/OneDrive/Desktop/Project/Whiteboard/live-whiteboard-app/whiteboard-frontend/src/components/WhiteboardRoom.js"],"sourcesContent":["// whiteboard-frontend/src/components/WhiteboardRoom.js\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Stage, Layer, Line } from 'react-konva';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { io } from 'socket.io-client';\r\nimport './WhiteboardRoom.css';\r\n\r\n// Make sure YOUR_PC_IP_ADDRESS is replaced with your actual PC's IP.\r\nconst socket = io('192.168.1.102:5000');\r\n\r\nfunction WhiteboardRoom() {\r\n  const { roomName } = useParams();\r\n  const navigate = useNavigate();\r\n  const [lines, setLines] = useState([]);\r\n  const [isDrawing, setIsDrawing] = useState(false);\r\n  const stageRef = useRef(null);\r\n  const currentLineId = useRef(null);\r\n\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [newChatMessage, setNewChatMessage] = useState('');\r\n  const chatMessagesEndRef = useRef(null);\r\n\r\n  // NEW: State for Konva stage dimensions\r\n  const [stageDimensions, setStageDimensions] = useState({\r\n    width: window.innerWidth * 0.7, // Initial desktop-like size\r\n    height: window.innerHeight * 0.8\r\n  });\r\n  const canvasContainerRef = useRef(null); // Ref to the container around the Stage\r\n\r\n  // --- Socket.IO Event Listeners & Room Joining ---\r\n  useEffect(() => {\r\n    if (!roomName) {\r\n      navigate('/');\r\n      return;\r\n    }\r\n\r\n    socket.emit('joinRoom', roomName);\r\n\r\n    socket.on('connect', () => {\r\n      console.log('Connected to backend Socket.IO:', socket.id);\r\n    });\r\n\r\n    socket.on('disconnect', () => {\r\n      console.log('Disconnected from backend Socket.IO');\r\n      alert('Disconnected from server. Please refresh.');\r\n      navigate('/');\r\n    });\r\n\r\n    socket.on('whiteboardState', (data) => {\r\n      console.log('Received initial room state:', data);\r\n      setLines(data.lines);\r\n      setChatMessages(data.messages);\r\n    });\r\n\r\n    socket.on('drawingStarted', (newLine) => {\r\n        setLines((prevLines) => [...prevLines, newLine]);\r\n    });\r\n\r\n    socket.on('drawing', (data) => {\r\n        const { lineId, newPoints } = data;\r\n        setLines((prevLines) => {\r\n            return prevLines.map((line) => {\r\n                if (line.id === lineId) {\r\n                    return { ...line, points: line.points.concat(newPoints) };\r\n                }\r\n                return line;\r\n            });\r\n        });\r\n    });\r\n\r\n    socket.on('drawingFinished', (data) => {\r\n        const { lineId, finalLineState } = data;\r\n        setLines((prevLines) => {\r\n            return prevLines.map((line) => {\r\n                if (line.id === lineId) {\r\n                    return finalLineState;\r\n                }\r\n                return line;\r\n            });\r\n        });\r\n    });\r\n\r\n    socket.on('chatMessage', (message) => {\r\n        setChatMessages((prevMessages) => [...prevMessages, message]);\r\n    });\r\n\r\n    socket.on('userJoined', (username) => {\r\n        setChatMessages((prevMessages) => [...prevMessages, {\r\n            username: 'System',\r\n            message: `${username} has joined the room.`,\r\n            timestamp: new Date()\r\n        }]);\r\n    });\r\n\r\n    // NEW: Resize observer to update Konva stage dimensions\r\n    const handleResize = () => {\r\n      if (canvasContainerRef.current) {\r\n        const { clientWidth, clientHeight } = canvasContainerRef.current;\r\n        setStageDimensions({ width: clientWidth, height: clientHeight });\r\n      }\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    // Initial dimensions when component mounts\r\n    handleResize();\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize); // Clean up resize listener\r\n      socket.off('connect');\r\n      socket.off('disconnect');\r\n      socket.off('whiteboardState');\r\n      socket.off('drawingStarted');\r\n      socket.off('drawing');\r\n      socket.off('drawingFinished');\r\n      socket.off('chatMessage');\r\n      socket.off('userJoined');\r\n    };\r\n  }, [roomName, navigate]);\r\n\r\n  useEffect(() => {\r\n    chatMessagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [chatMessages]);\r\n\r\n  // --- Drawing Logic (unchanged besides stage dimensions) ---\r\n  const handleMouseDown = (e) => {\r\n    if (e.evt.type === 'touchstart') {\r\n        e.evt.preventDefault();\r\n    }\r\n    setIsDrawing(true);\r\n    const pos = e.target.getStage().getPointerPosition();\r\n    const newLineId = `${socket.id}-${Date.now()}`;\r\n    currentLineId.current = newLineId;\r\n    const newLine = {\r\n      id: newLineId, tool: 'pen', points: [pos.x, pos.y], stroke: 'black', strokeWidth: 5,\r\n    };\r\n    setLines((prevLines) => [...prevLines, newLine]);\r\n    socket.emit('startDrawing', { roomName, line: newLine });\r\n  };\r\n\r\n  const handleMouseMove = (e) => {\r\n    if (!isDrawing) {\r\n      return;\r\n    }\r\n    if (e.evt.type === 'touchmove') {\r\n        e.evt.preventDefault();\r\n    }\r\n    const stage = e.target.getStage();\r\n    const point = stage.getPointerPosition();\r\n    let lastLine = lines.find(line => line.id === currentLineId.current);\r\n    if (lastLine) {\r\n      lastLine.points = lastLine.points.concat([point.x, point.y]);\r\n      setLines((prevLines) => {\r\n          return prevLines.map(line => line.id === lastLine.id ? lastLine : line);\r\n      });\r\n      socket.emit('drawing', { roomName, lineId: currentLineId.current, newPoints: [point.x, point.y] });\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    setIsDrawing(false);\r\n    const finalLine = lines.find(line => line.id === currentLineId.current);\r\n    if (finalLine) {\r\n        socket.emit('endDrawing', { roomName, lineId: currentLineId.current, finalLineState: finalLine });\r\n    }\r\n    currentLineId.current = null;\r\n  };\r\n\r\n  const handleSendChatMessage = () => {\r\n    if (newChatMessage.trim()) {\r\n      socket.emit('chatMessage', { roomName, message: newChatMessage.trim() });\r\n      setNewChatMessage('');\r\n    }\r\n  };\r\n\r\n  const handleChatKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleSendChatMessage();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"whiteboard-page-container\">\r\n      <div className=\"whiteboard-main-content\">\r\n        <div className=\"header\">\r\n          <h1>Whiteboard Room: <span className=\"room-name\">{roomName}</span></h1>\r\n          <button onClick={() => navigate('/')} className=\"leave-button\">\r\n            Leave Room\r\n          </button>\r\n        </div>\r\n        <div className=\"whiteboard-canvas-container\" ref={canvasContainerRef}> {/* NEW CONTAINER */}\r\n          <Stage\r\n            width={stageDimensions.width} \r\n            height={stageDimensions.height} \r\n            onMouseDown={handleMouseDown}\r\n            onMousemove={handleMouseMove}\r\n            onMouseup={handleMouseUp}\r\n            onTouchStart={handleMouseDown}\r\n            onTouchMove={handleMouseMove}\r\n            onTouchEnd={handleMouseUp}\r\n            ref={stageRef}\r\n            style={{\r\n                cursor: 'crosshair',\r\n                backgroundColor: 'white',\r\n                touchAction: 'none'\r\n            }}\r\n          >\r\n            <Layer>\r\n              {lines.map((line) => (\r\n                <Line\r\n                  key={line.id}\r\n                  points={line.points}\r\n                  stroke={line.stroke}\r\n                  strokeWidth={line.strokeWidth}\r\n                  tension={0.5}\r\n                  lineCap=\"round\"\r\n                  lineJoin=\"round\"\r\n                  globalCompositeOperation={\r\n                    line.tool === 'eraser' ? 'destination-out' : 'source-over'\r\n                  }\r\n                />\r\n              ))}\r\n            </Layer>\r\n          </Stage>\r\n        </div> {/* END NEW CONTAINER */}\r\n        <p className=\"hint-text margin-top-md\">\r\n          Draw here. Open this room in another tab to see real-time collaboration.\r\n        </p>\r\n      </div>\r\n\r\n      {/* Chat Sidebar */}\r\n      <div className=\"chat-sidebar\">\r\n        <h2>Room Chat</h2>\r\n        <div className=\"chat-messages\">\r\n          {chatMessages.map((msg, index) => (\r\n            <div key={index} className=\"chat-message\">\r\n              <span className=\"chat-username\">{msg.username}:</span> {msg.message}\r\n              <span className=\"chat-timestamp\">\r\n                {new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\r\n              </span>\r\n            </div>\r\n          ))}\r\n          <div ref={chatMessagesEndRef} />\r\n        </div>\r\n        <div className=\"chat-input-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Type your message...\"\r\n            value={newChatMessage}\r\n            onChange={(e) => setNewChatMessage(e.target.value)}\r\n            onKeyPress={handleChatKeyPress}\r\n            className=\"chat-input\"\r\n          />\r\n          <button onClick={handleSendChatMessage} className=\"send-button\">\r\n            Send\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WhiteboardRoom;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}