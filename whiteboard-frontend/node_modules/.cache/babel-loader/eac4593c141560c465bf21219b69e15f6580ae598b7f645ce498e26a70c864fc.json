{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gamin\\\\OneDrive\\\\Desktop\\\\Project\\\\Whiteboard\\\\live-whiteboard-app\\\\whiteboard-frontend\\\\src\\\\components\\\\WhiteboardRoom.js\",\n  _s = $RefreshSig$();\n// whiteboard-frontend/src/components/WhiteboardRoom.js\n\n// whiteboard-frontend/src/components/WhiteboardRoom.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Stage, Layer, Line } from 'react-konva';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport './WhiteboardRoom.css'; // Make sure this CSS exists or you create it\n\n// Make sure YOUR_PC_IP_ADDRESS is replaced with your actual PC's IP.\n// Example: const socket = io('http://192.168.1.100:5000');\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://192.168.1.102:5000'); // <-- Replace YOUR_PC_IP_ADDRESS\n\nfunction WhiteboardRoom() {\n  _s();\n  const {\n    roomName\n  } = useParams();\n  const navigate = useNavigate();\n  const [lines, setLines] = useState([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const stageRef = useRef(null);\n  const currentLineId = useRef(null);\n\n  // --- Socket.IO Event Listeners & Room Joining ---\n  useEffect(() => {\n    if (!roomName) {\n      navigate('/');\n      return;\n    }\n    socket.emit('joinRoom', roomName);\n    socket.on('connect', () => {\n      console.log('Connected to backend Socket.IO:', socket.id);\n    });\n    socket.on('disconnect', () => {\n      console.log('Disconnected from backend Socket.IO');\n      alert('Disconnected from server. Please refresh.');\n      navigate('/');\n    });\n    socket.on('whiteboardState', initialLines => {\n      console.log('Received initial whiteboard state:', initialLines);\n      setLines(initialLines);\n    });\n    socket.on('drawingStarted', newLine => {\n      setLines(prevLines => [...prevLines, newLine]);\n    });\n    socket.on('drawing', data => {\n      const {\n        lineId,\n        newPoints\n      } = data;\n      setLines(prevLines => {\n        return prevLines.map(line => {\n          if (line.id === lineId) {\n            return {\n              ...line,\n              points: line.points.concat(newPoints)\n            };\n          }\n          return line;\n        });\n      });\n    });\n    socket.on('drawingFinished', data => {\n      const {\n        lineId,\n        finalLineState\n      } = data;\n      setLines(prevLines => {\n        return prevLines.map(line => {\n          if (line.id === lineId) {\n            return finalLineState;\n          }\n          return line;\n        });\n      });\n    });\n    socket.on('userJoined', userId => {\n      console.log(`User ${userId} joined the room.`);\n    });\n    return () => {\n      socket.off('connect');\n      socket.off('disconnect');\n      socket.off('whiteboardState');\n      socket.off('drawingStarted');\n      socket.off('drawing');\n      socket.off('drawingFinished');\n      socket.off('userJoined');\n    };\n  }, [roomName, navigate]);\n\n  // --- Drawing Logic ---\n  const handleMouseDown = e => {\n    // Prevent default touch behavior (like selection) for touchstart\n    if (e.evt.type === 'touchstart') {\n      e.evt.preventDefault();\n    }\n    setIsDrawing(true);\n    const pos = e.target.getStage().getPointerPosition();\n    const newLineId = `${socket.id}-${Date.now()}`;\n    currentLineId.current = newLineId;\n    const newLine = {\n      id: newLineId,\n      tool: 'pen',\n      points: [pos.x, pos.y],\n      stroke: 'black',\n      strokeWidth: 5\n    };\n    setLines(prevLines => [...prevLines, newLine]);\n    socket.emit('startDrawing', {\n      roomName,\n      line: newLine\n    });\n  };\n  const handleMouseMove = e => {\n    if (!isDrawing) {\n      return;\n    }\n\n    // THIS IS THE KEY FIX FOR TOUCHSCREENS\n    // Prevent default touch behavior (like scrolling) for touchmove events\n    if (e.evt.type === 'touchmove') {\n      e.evt.preventDefault();\n    }\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    let lastLine = lines.find(line => line.id === currentLineId.current); // Find by ID for robustness\n\n    if (lastLine) {\n      lastLine.points = lastLine.points.concat([point.x, point.y]);\n      setLines(prevLines => {\n        return prevLines.map(line => line.id === lastLine.id ? lastLine : line);\n      });\n      socket.emit('drawing', {\n        roomName,\n        lineId: currentLineId.current,\n        newPoints: [point.x, point.y]\n      });\n    }\n  };\n  const handleMouseUp = () => {\n    setIsDrawing(false);\n    const finalLine = lines.find(line => line.id === currentLineId.current);\n    if (finalLine) {\n      socket.emit('endDrawing', {\n        roomName,\n        lineId: currentLineId.current,\n        finalLineState: finalLine\n      });\n    }\n    currentLineId.current = null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"whiteboard-room-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Whiteboard Room: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"room-name\",\n          children: roomName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate('/'),\n        className: \"leave-button\",\n        children: \"Leave Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stage, {\n      width: window.innerWidth * 0.9,\n      height: window.innerHeight * 0.8,\n      onMouseDown: handleMouseDown,\n      onMousemove: handleMouseMove,\n      onMouseup: handleMouseUp,\n      onTouchStart: handleMouseDown,\n      onTouchMove: handleMouseMove,\n      onTouchEnd: handleMouseUp,\n      ref: stageRef,\n      style: {\n        border: '1px solid #ccc',\n        cursor: 'crosshair',\n        backgroundColor: 'white',\n        touchAction: 'none' // <<< --- THIS IS THE KEY FIX FOR TOUCHSCREENS (CSS)\n      },\n      children: /*#__PURE__*/_jsxDEV(Layer, {\n        children: lines.map(line => /*#__PURE__*/_jsxDEV(Line, {\n          points: line.points,\n          stroke: line.stroke,\n          strokeWidth: line.strokeWidth,\n          tension: 0.5,\n          lineCap: \"round\",\n          lineJoin: \"round\",\n          globalCompositeOperation: line.tool === 'eraser' ? 'destination-out' : 'source-over'\n        }, line.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"hint-text\",\n      children: \"Draw here. Open this room in another tab to see real-time collaboration.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n}\n_s(WhiteboardRoom, \"lPqzbLPt/TLzTnM86h7e8nn28mY=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = WhiteboardRoom;\nexport default WhiteboardRoom;\nvar _c;\n$RefreshReg$(_c, \"WhiteboardRoom\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Stage","Layer","Line","useParams","useNavigate","io","jsxDEV","_jsxDEV","socket","WhiteboardRoom","_s","roomName","navigate","lines","setLines","isDrawing","setIsDrawing","stageRef","currentLineId","emit","on","console","log","id","alert","initialLines","newLine","prevLines","data","lineId","newPoints","map","line","points","concat","finalLineState","userId","off","handleMouseDown","e","evt","type","preventDefault","pos","target","getStage","getPointerPosition","newLineId","Date","now","current","tool","x","y","stroke","strokeWidth","handleMouseMove","stage","point","lastLine","find","handleMouseUp","finalLine","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","width","window","innerWidth","height","innerHeight","onMouseDown","onMousemove","onMouseup","onTouchStart","onTouchMove","onTouchEnd","ref","style","border","cursor","backgroundColor","touchAction","tension","lineCap","lineJoin","globalCompositeOperation","_c","$RefreshReg$"],"sources":["C:/Users/gamin/OneDrive/Desktop/Project/Whiteboard/live-whiteboard-app/whiteboard-frontend/src/components/WhiteboardRoom.js"],"sourcesContent":["// whiteboard-frontend/src/components/WhiteboardRoom.js\r\n\r\n// whiteboard-frontend/src/components/WhiteboardRoom.js\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Stage, Layer, Line } from 'react-konva';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { io } from 'socket.io-client';\r\nimport './WhiteboardRoom.css'; // Make sure this CSS exists or you create it\r\n\r\n// Make sure YOUR_PC_IP_ADDRESS is replaced with your actual PC's IP.\r\n// Example: const socket = io('http://192.168.1.100:5000');\r\n\r\nconst socket = io('http://192.168.1.102:5000'); // <-- Replace YOUR_PC_IP_ADDRESS\r\n\r\nfunction WhiteboardRoom() {\r\n  const { roomName } = useParams();\r\n  const navigate = useNavigate();\r\n  const [lines, setLines] = useState([]);\r\n  const [isDrawing, setIsDrawing] = useState(false);\r\n  const stageRef = useRef(null);\r\n  const currentLineId = useRef(null);\r\n\r\n  // --- Socket.IO Event Listeners & Room Joining ---\r\n  useEffect(() => {\r\n    if (!roomName) {\r\n      navigate('/');\r\n      return;\r\n    }\r\n\r\n    socket.emit('joinRoom', roomName);\r\n\r\n    socket.on('connect', () => {\r\n      console.log('Connected to backend Socket.IO:', socket.id);\r\n    });\r\n\r\n    socket.on('disconnect', () => {\r\n      console.log('Disconnected from backend Socket.IO');\r\n      alert('Disconnected from server. Please refresh.');\r\n      navigate('/');\r\n    });\r\n\r\n    socket.on('whiteboardState', (initialLines) => {\r\n      console.log('Received initial whiteboard state:', initialLines);\r\n      setLines(initialLines);\r\n    });\r\n\r\n    socket.on('drawingStarted', (newLine) => {\r\n        setLines((prevLines) => [...prevLines, newLine]);\r\n    });\r\n\r\n    socket.on('drawing', (data) => {\r\n        const { lineId, newPoints } = data;\r\n        setLines((prevLines) => {\r\n            return prevLines.map((line) => {\r\n                if (line.id === lineId) {\r\n                    return { ...line, points: line.points.concat(newPoints) };\r\n                }\r\n                return line;\r\n            });\r\n        });\r\n    });\r\n\r\n    socket.on('drawingFinished', (data) => {\r\n        const { lineId, finalLineState } = data;\r\n        setLines((prevLines) => {\r\n            return prevLines.map((line) => {\r\n                if (line.id === lineId) {\r\n                    return finalLineState;\r\n                }\r\n                return line;\r\n            });\r\n        });\r\n    });\r\n\r\n    socket.on('userJoined', (userId) => {\r\n        console.log(`User ${userId} joined the room.`);\r\n    });\r\n\r\n    return () => {\r\n      socket.off('connect');\r\n      socket.off('disconnect');\r\n      socket.off('whiteboardState');\r\n      socket.off('drawingStarted');\r\n      socket.off('drawing');\r\n      socket.off('drawingFinished');\r\n      socket.off('userJoined');\r\n    };\r\n  }, [roomName, navigate]);\r\n\r\n  // --- Drawing Logic ---\r\n  const handleMouseDown = (e) => {\r\n    // Prevent default touch behavior (like selection) for touchstart\r\n    if (e.evt.type === 'touchstart') {\r\n        e.evt.preventDefault();\r\n    }\r\n\r\n    setIsDrawing(true);\r\n    const pos = e.target.getStage().getPointerPosition();\r\n    const newLineId = `${socket.id}-${Date.now()}`;\r\n    currentLineId.current = newLineId;\r\n\r\n    const newLine = {\r\n      id: newLineId,\r\n      tool: 'pen',\r\n      points: [pos.x, pos.y],\r\n      stroke: 'black',\r\n      strokeWidth: 5,\r\n    };\r\n\r\n    setLines((prevLines) => [...prevLines, newLine]);\r\n    socket.emit('startDrawing', { roomName, line: newLine });\r\n  };\r\n\r\n  const handleMouseMove = (e) => {\r\n    if (!isDrawing) {\r\n      return;\r\n    }\r\n\r\n    // THIS IS THE KEY FIX FOR TOUCHSCREENS\r\n    // Prevent default touch behavior (like scrolling) for touchmove events\r\n    if (e.evt.type === 'touchmove') {\r\n        e.evt.preventDefault();\r\n    }\r\n\r\n    const stage = e.target.getStage();\r\n    const point = stage.getPointerPosition();\r\n    let lastLine = lines.find(line => line.id === currentLineId.current); // Find by ID for robustness\r\n\r\n    if (lastLine) {\r\n      lastLine.points = lastLine.points.concat([point.x, point.y]);\r\n      setLines((prevLines) => {\r\n          return prevLines.map(line => line.id === lastLine.id ? lastLine : line);\r\n      });\r\n\r\n      socket.emit('drawing', { roomName, lineId: currentLineId.current, newPoints: [point.x, point.y] });\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    setIsDrawing(false);\r\n    const finalLine = lines.find(line => line.id === currentLineId.current);\r\n    if (finalLine) {\r\n        socket.emit('endDrawing', { roomName, lineId: currentLineId.current, finalLineState: finalLine });\r\n    }\r\n    currentLineId.current = null;\r\n  };\r\n\r\n  return (\r\n    <div className=\"whiteboard-room-container\">\r\n      <div className=\"header\">\r\n        <h1>Whiteboard Room: <span className=\"room-name\">{roomName}</span></h1>\r\n        <button onClick={() => navigate('/')} className=\"leave-button\">\r\n          Leave Room\r\n        </button>\r\n      </div>\r\n      <Stage\r\n        width={window.innerWidth * 0.9}\r\n        height={window.innerHeight * 0.8}\r\n        onMouseDown={handleMouseDown}\r\n        onMousemove={handleMouseMove}\r\n        onMouseup={handleMouseUp}\r\n        onTouchStart={handleMouseDown}\r\n        onTouchMove={handleMouseMove}\r\n        onTouchEnd={handleMouseUp}\r\n        ref={stageRef}\r\n        style={{\r\n            border: '1px solid #ccc',\r\n            cursor: 'crosshair',\r\n            backgroundColor: 'white',\r\n            touchAction: 'none' // <<< --- THIS IS THE KEY FIX FOR TOUCHSCREENS (CSS)\r\n        }}\r\n      >\r\n        <Layer>\r\n          {lines.map((line) => (\r\n            <Line\r\n              key={line.id}\r\n              points={line.points}\r\n              stroke={line.stroke}\r\n              strokeWidth={line.strokeWidth}\r\n              tension={0.5}\r\n              lineCap=\"round\"\r\n              lineJoin=\"round\"\r\n              globalCompositeOperation={\r\n                line.tool === 'eraser' ? 'destination-out' : 'source-over'\r\n              }\r\n            />\r\n          ))}\r\n        </Layer>\r\n      </Stage>\r\n      <p className=\"hint-text\">\r\n        Draw here. Open this room in another tab to see real-time collaboration.\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WhiteboardRoom;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}