{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gamin\\\\OneDrive\\\\Desktop\\\\Project\\\\Whiteboard\\\\live-whiteboard-app\\\\whiteboard-frontend\\\\src\\\\components\\\\WhiteboardRoom.js\",\n  _s = $RefreshSig$();\n// whiteboard-frontend/src/components/WhiteboardRoom.js\n\n// whiteboard-frontend/src/components/WhiteboardRoom.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Stage, Layer, Line } from 'react-konva';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport './WhiteboardRoom.css';\n\n// whiteboard-frontend/src/components/WhiteboardRoom.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://192.168.1.102:5000'); // <-- Replace YOUR_PC_IP_ADDRESS\n\nfunction WhiteboardRoom() {\n  _s();\n  const {\n    roomName\n  } = useParams();\n  const navigate = useNavigate();\n  const [lines, setLines] = useState([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const stageRef = useRef(null);\n  const currentLineId = useRef(null);\n  const [chatMessages, setChatMessages] = useState([]); // NEW: State for chat messages\n  const [newChatMessage, setNewChatMessage] = useState(''); // NEW: State for current message input\n  const chatMessagesEndRef = useRef(null); // NEW: Ref for auto-scrolling chat\n\n  // --- Socket.IO Event Listeners & Room Joining ---\n  useEffect(() => {\n    if (!roomName) {\n      navigate('/');\n      return;\n    }\n    socket.emit('joinRoom', roomName);\n    socket.on('connect', () => {\n      console.log('Connected to backend Socket.IO:', socket.id);\n    });\n    socket.on('disconnect', () => {\n      console.log('Disconnected from backend Socket.IO');\n      alert('Disconnected from server. Please refresh.');\n      navigate('/');\n    });\n\n    // UPDATED: Receive an object with lines and messages\n    socket.on('whiteboardState', data => {\n      console.log('Received initial room state:', data);\n      setLines(data.lines);\n      setChatMessages(data.messages); // Set initial chat messages\n    });\n    socket.on('drawingStarted', newLine => {\n      setLines(prevLines => [...prevLines, newLine]);\n    });\n    socket.on('drawing', data => {\n      const {\n        lineId,\n        newPoints\n      } = data;\n      setLines(prevLines => {\n        return prevLines.map(line => {\n          if (line.id === lineId) {\n            return {\n              ...line,\n              points: line.points.concat(newPoints)\n            };\n          }\n          return line;\n        });\n      });\n    });\n    socket.on('drawingFinished', data => {\n      const {\n        lineId,\n        finalLineState\n      } = data;\n      setLines(prevLines => {\n        return prevLines.map(line => {\n          if (line.id === lineId) {\n            return finalLineState;\n          }\n          return line;\n        });\n      });\n    });\n\n    // NEW: Listen for incoming chat messages\n    socket.on('chatMessage', message => {\n      console.log('Received chat message:', message);\n      setChatMessages(prevMessages => [...prevMessages, message]);\n    });\n    socket.on('userJoined', username => {\n      console.log(`User ${username} joined the room.`);\n      // Optional: display a system message in chat for user joined/left\n      setChatMessages(prevMessages => [...prevMessages, {\n        username: 'System',\n        message: `${username} has joined the room.`,\n        timestamp: new Date()\n      }]);\n    });\n    return () => {\n      socket.off('connect');\n      socket.off('disconnect');\n      socket.off('whiteboardState');\n      socket.off('drawingStarted');\n      socket.off('drawing');\n      socket.off('drawingFinished');\n      socket.off('chatMessage'); // Clean up chat listener\n      socket.off('userJoined');\n    };\n  }, [roomName, navigate]);\n\n  // NEW: Effect to scroll chat to bottom when messages update\n  useEffect(() => {\n    var _chatMessagesEndRef$c;\n    (_chatMessagesEndRef$c = chatMessagesEndRef.current) === null || _chatMessagesEndRef$c === void 0 ? void 0 : _chatMessagesEndRef$c.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [chatMessages]);\n\n  // --- Drawing Logic (unchanged) ---\n  const handleMouseDown = e => {\n    if (e.evt.type === 'touchstart') {\n      e.evt.preventDefault();\n    }\n    setIsDrawing(true);\n    const pos = e.target.getStage().getPointerPosition();\n    const newLineId = `${socket.id}-${Date.now()}`;\n    currentLineId.current = newLineId;\n    const newLine = {\n      id: newLineId,\n      tool: 'pen',\n      points: [pos.x, pos.y],\n      stroke: 'black',\n      strokeWidth: 5\n    };\n    setLines(prevLines => [...prevLines, newLine]);\n    socket.emit('startDrawing', {\n      roomName,\n      line: newLine\n    });\n  };\n  const handleMouseMove = e => {\n    if (!isDrawing) {\n      return;\n    }\n    if (e.evt.type === 'touchmove') {\n      e.evt.preventDefault();\n    }\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    let lastLine = lines.find(line => line.id === currentLineId.current);\n    if (lastLine) {\n      lastLine.points = lastLine.points.concat([point.x, point.y]);\n      setLines(prevLines => {\n        return prevLines.map(line => line.id === lastLine.id ? lastLine : line);\n      });\n      socket.emit('drawing', {\n        roomName,\n        lineId: currentLineId.current,\n        newPoints: [point.x, point.y]\n      });\n    }\n  };\n  const handleMouseUp = () => {\n    setIsDrawing(false);\n    const finalLine = lines.find(line => line.id === currentLineId.current);\n    if (finalLine) {\n      socket.emit('endDrawing', {\n        roomName,\n        lineId: currentLineId.current,\n        finalLineState: finalLine\n      });\n    }\n    currentLineId.current = null;\n  };\n\n  // NEW: Chat Message Sending Logic\n  const handleSendChatMessage = () => {\n    if (newChatMessage.trim()) {\n      socket.emit('chatMessage', {\n        roomName,\n        message: newChatMessage.trim()\n      });\n      setNewChatMessage(''); // Clear input field\n    }\n  };\n  const handleChatKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSendChatMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"whiteboard-page-container\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"whiteboard-main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Whiteboard Room: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"room-name\",\n            children: roomName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 32\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => navigate('/'),\n          className: \"leave-button\",\n          children: \"Leave Room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Stage, {\n        width: window.innerWidth * 0.7 // Adjusted width to make space for chat\n        ,\n        height: window.innerHeight * 0.8,\n        onMouseDown: handleMouseDown,\n        onMousemove: handleMouseMove,\n        onMouseup: handleMouseUp,\n        onTouchStart: handleMouseDown,\n        onTouchMove: handleMouseMove,\n        onTouchEnd: handleMouseUp,\n        ref: stageRef,\n        style: {\n          border: '1px solid #ccc',\n          cursor: 'crosshair',\n          backgroundColor: 'white',\n          touchAction: 'none'\n        },\n        children: /*#__PURE__*/_jsxDEV(Layer, {\n          children: lines.map(line => /*#__PURE__*/_jsxDEV(Line, {\n            points: line.points,\n            stroke: line.stroke,\n            strokeWidth: line.strokeWidth,\n            tension: 0.5,\n            lineCap: \"round\",\n            lineJoin: \"round\",\n            globalCompositeOperation: line.tool === 'eraser' ? 'destination-out' : 'source-over'\n          }, line.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"hint-text\",\n        children: \"Draw here. Open this room in another tab to see real-time collaboration.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Room Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: [chatMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chat-username\",\n            children: [msg.username, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 15\n          }, this), \" \", msg.message, /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chat-timestamp\",\n            children: new Date(msg.timestamp).toLocaleTimeString([], {\n              hour: '2-digit',\n              minute: '2-digit'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: chatMessagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your message...\",\n          value: newChatMessage,\n          onChange: e => setNewChatMessage(e.target.value),\n          onKeyPress: handleChatKeyPress,\n          className: \"chat-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendChatMessage,\n          className: \"send-button\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n}\n_s(WhiteboardRoom, \"FRrv+87GwTuUJFz8Yp3qi9zHu3Y=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = WhiteboardRoom;\nexport default WhiteboardRoom;\nvar _c;\n$RefreshReg$(_c, \"WhiteboardRoom\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Stage","Layer","Line","useParams","useNavigate","io","jsxDEV","_jsxDEV","socket","WhiteboardRoom","_s","roomName","navigate","lines","setLines","isDrawing","setIsDrawing","stageRef","currentLineId","chatMessages","setChatMessages","newChatMessage","setNewChatMessage","chatMessagesEndRef","emit","on","console","log","id","alert","data","messages","newLine","prevLines","lineId","newPoints","map","line","points","concat","finalLineState","message","prevMessages","username","timestamp","Date","off","_chatMessagesEndRef$c","current","scrollIntoView","behavior","handleMouseDown","e","evt","type","preventDefault","pos","target","getStage","getPointerPosition","newLineId","now","tool","x","y","stroke","strokeWidth","handleMouseMove","stage","point","lastLine","find","handleMouseUp","finalLine","handleSendChatMessage","trim","handleChatKeyPress","key","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","width","window","innerWidth","height","innerHeight","onMouseDown","onMousemove","onMouseup","onTouchStart","onTouchMove","onTouchEnd","ref","style","border","cursor","backgroundColor","touchAction","tension","lineCap","lineJoin","globalCompositeOperation","msg","index","toLocaleTimeString","hour","minute","placeholder","value","onChange","onKeyPress","_c","$RefreshReg$"],"sources":["C:/Users/gamin/OneDrive/Desktop/Project/Whiteboard/live-whiteboard-app/whiteboard-frontend/src/components/WhiteboardRoom.js"],"sourcesContent":["// whiteboard-frontend/src/components/WhiteboardRoom.js\r\n\r\n\r\n// whiteboard-frontend/src/components/WhiteboardRoom.js\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Stage, Layer, Line } from 'react-konva';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { io } from 'socket.io-client';\r\nimport './WhiteboardRoom.css';\r\n\r\n// whiteboard-frontend/src/components/WhiteboardRoom.js\r\nconst socket = io('http://192.168.1.102:5000'); // <-- Replace YOUR_PC_IP_ADDRESS\r\n\r\nfunction WhiteboardRoom() {\r\n  const { roomName } = useParams();\r\n  const navigate = useNavigate();\r\n  const [lines, setLines] = useState([]);\r\n  const [isDrawing, setIsDrawing] = useState(false);\r\n  const stageRef = useRef(null);\r\n  const currentLineId = useRef(null);\r\n\r\n  const [chatMessages, setChatMessages] = useState([]); // NEW: State for chat messages\r\n  const [newChatMessage, setNewChatMessage] = useState(''); // NEW: State for current message input\r\n  const chatMessagesEndRef = useRef(null); // NEW: Ref for auto-scrolling chat\r\n\r\n  // --- Socket.IO Event Listeners & Room Joining ---\r\n  useEffect(() => {\r\n    if (!roomName) {\r\n      navigate('/');\r\n      return;\r\n    }\r\n\r\n    socket.emit('joinRoom', roomName);\r\n\r\n    socket.on('connect', () => {\r\n      console.log('Connected to backend Socket.IO:', socket.id);\r\n    });\r\n\r\n    socket.on('disconnect', () => {\r\n      console.log('Disconnected from backend Socket.IO');\r\n      alert('Disconnected from server. Please refresh.');\r\n      navigate('/');\r\n    });\r\n\r\n    // UPDATED: Receive an object with lines and messages\r\n    socket.on('whiteboardState', (data) => {\r\n      console.log('Received initial room state:', data);\r\n      setLines(data.lines);\r\n      setChatMessages(data.messages); // Set initial chat messages\r\n    });\r\n\r\n    socket.on('drawingStarted', (newLine) => {\r\n        setLines((prevLines) => [...prevLines, newLine]);\r\n    });\r\n\r\n    socket.on('drawing', (data) => {\r\n        const { lineId, newPoints } = data;\r\n        setLines((prevLines) => {\r\n            return prevLines.map((line) => {\r\n                if (line.id === lineId) {\r\n                    return { ...line, points: line.points.concat(newPoints) };\r\n                }\r\n                return line;\r\n            });\r\n        });\r\n    });\r\n\r\n    socket.on('drawingFinished', (data) => {\r\n        const { lineId, finalLineState } = data;\r\n        setLines((prevLines) => {\r\n            return prevLines.map((line) => {\r\n                if (line.id === lineId) {\r\n                    return finalLineState;\r\n                }\r\n                return line;\r\n            });\r\n        });\r\n    });\r\n\r\n    // NEW: Listen for incoming chat messages\r\n    socket.on('chatMessage', (message) => {\r\n        console.log('Received chat message:', message);\r\n        setChatMessages((prevMessages) => [...prevMessages, message]);\r\n    });\r\n\r\n    socket.on('userJoined', (username) => {\r\n        console.log(`User ${username} joined the room.`);\r\n        // Optional: display a system message in chat for user joined/left\r\n        setChatMessages((prevMessages) => [...prevMessages, {\r\n            username: 'System',\r\n            message: `${username} has joined the room.`,\r\n            timestamp: new Date()\r\n        }]);\r\n    });\r\n\r\n    return () => {\r\n      socket.off('connect');\r\n      socket.off('disconnect');\r\n      socket.off('whiteboardState');\r\n      socket.off('drawingStarted');\r\n      socket.off('drawing');\r\n      socket.off('drawingFinished');\r\n      socket.off('chatMessage'); // Clean up chat listener\r\n      socket.off('userJoined');\r\n    };\r\n  }, [roomName, navigate]);\r\n\r\n  // NEW: Effect to scroll chat to bottom when messages update\r\n  useEffect(() => {\r\n    chatMessagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [chatMessages]);\r\n\r\n  // --- Drawing Logic (unchanged) ---\r\n  const handleMouseDown = (e) => {\r\n    if (e.evt.type === 'touchstart') {\r\n        e.evt.preventDefault();\r\n    }\r\n    setIsDrawing(true);\r\n    const pos = e.target.getStage().getPointerPosition();\r\n    const newLineId = `${socket.id}-${Date.now()}`;\r\n    currentLineId.current = newLineId;\r\n    const newLine = {\r\n      id: newLineId, tool: 'pen', points: [pos.x, pos.y], stroke: 'black', strokeWidth: 5,\r\n    };\r\n    setLines((prevLines) => [...prevLines, newLine]);\r\n    socket.emit('startDrawing', { roomName, line: newLine });\r\n  };\r\n\r\n  const handleMouseMove = (e) => {\r\n    if (!isDrawing) {\r\n      return;\r\n    }\r\n    if (e.evt.type === 'touchmove') {\r\n        e.evt.preventDefault();\r\n    }\r\n    const stage = e.target.getStage();\r\n    const point = stage.getPointerPosition();\r\n    let lastLine = lines.find(line => line.id === currentLineId.current);\r\n    if (lastLine) {\r\n      lastLine.points = lastLine.points.concat([point.x, point.y]);\r\n      setLines((prevLines) => {\r\n          return prevLines.map(line => line.id === lastLine.id ? lastLine : line);\r\n      });\r\n      socket.emit('drawing', { roomName, lineId: currentLineId.current, newPoints: [point.x, point.y] });\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    setIsDrawing(false);\r\n    const finalLine = lines.find(line => line.id === currentLineId.current);\r\n    if (finalLine) {\r\n        socket.emit('endDrawing', { roomName, lineId: currentLineId.current, finalLineState: finalLine });\r\n    }\r\n    currentLineId.current = null;\r\n  };\r\n\r\n  // NEW: Chat Message Sending Logic\r\n  const handleSendChatMessage = () => {\r\n    if (newChatMessage.trim()) {\r\n      socket.emit('chatMessage', { roomName, message: newChatMessage.trim() });\r\n      setNewChatMessage(''); // Clear input field\r\n    }\r\n  };\r\n\r\n  const handleChatKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleSendChatMessage();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"whiteboard-page-container\"> {/* Updated main container div */}\r\n      <div className=\"whiteboard-main-content\">\r\n        <div className=\"header\">\r\n          <h1>Whiteboard Room: <span className=\"room-name\">{roomName}</span></h1>\r\n          <button onClick={() => navigate('/')} className=\"leave-button\">\r\n            Leave Room\r\n          </button>\r\n        </div>\r\n        <Stage\r\n          width={window.innerWidth * 0.7} // Adjusted width to make space for chat\r\n          height={window.innerHeight * 0.8}\r\n          onMouseDown={handleMouseDown}\r\n          onMousemove={handleMouseMove}\r\n          onMouseup={handleMouseUp}\r\n          onTouchStart={handleMouseDown}\r\n          onTouchMove={handleMouseMove}\r\n          onTouchEnd={handleMouseUp}\r\n          ref={stageRef}\r\n          style={{\r\n              border: '1px solid #ccc',\r\n              cursor: 'crosshair',\r\n              backgroundColor: 'white',\r\n              touchAction: 'none'\r\n          }}\r\n        >\r\n          <Layer>\r\n            {lines.map((line) => (\r\n              <Line\r\n                key={line.id}\r\n                points={line.points}\r\n                stroke={line.stroke}\r\n                strokeWidth={line.strokeWidth}\r\n                tension={0.5}\r\n                lineCap=\"round\"\r\n                lineJoin=\"round\"\r\n                globalCompositeOperation={\r\n                  line.tool === 'eraser' ? 'destination-out' : 'source-over'\r\n                }\r\n              />\r\n            ))}\r\n          </Layer>\r\n        </Stage>\r\n        <p className=\"hint-text\">\r\n          Draw here. Open this room in another tab to see real-time collaboration.\r\n        </p>\r\n      </div>\r\n\r\n      {/* NEW: Chat Sidebar */}\r\n      <div className=\"chat-sidebar\">\r\n        <h2>Room Chat</h2>\r\n        <div className=\"chat-messages\">\r\n          {chatMessages.map((msg, index) => (\r\n            <div key={index} className=\"chat-message\">\r\n              <span className=\"chat-username\">{msg.username}:</span> {msg.message}\r\n              <span className=\"chat-timestamp\">\r\n                {new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\r\n              </span>\r\n            </div>\r\n          ))}\r\n          <div ref={chatMessagesEndRef} /> {/* Scroll to this div */}\r\n        </div>\r\n        <div className=\"chat-input-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Type your message...\"\r\n            value={newChatMessage}\r\n            onChange={(e) => setNewChatMessage(e.target.value)}\r\n            onKeyPress={handleChatKeyPress}\r\n            className=\"chat-input\"\r\n          />\r\n          <button onClick={handleSendChatMessage} className=\"send-button\">\r\n            Send\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WhiteboardRoom;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}