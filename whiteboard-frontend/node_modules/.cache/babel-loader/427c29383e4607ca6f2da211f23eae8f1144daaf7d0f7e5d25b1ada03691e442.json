{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gamin\\\\OneDrive\\\\Desktop\\\\Project\\\\Whiteboard\\\\live-whiteboard-app\\\\whiteboard-frontend\\\\src\\\\components\\\\WhiteboardRoom.js\",\n  _s = $RefreshSig$();\n// whiteboard-frontend/src/components/WhiteboardRoom.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Stage, Layer, Line } from 'react-konva';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport './WhiteboardRoom.css'; // We'll create this CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000'); // Connect to your backend\n\nfunction WhiteboardRoom() {\n  _s();\n  const {\n    roomName\n  } = useParams(); // Get roomName from URL\n  const navigate = useNavigate();\n  const [lines, setLines] = useState([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const stageRef = useRef(null);\n\n  // --- Socket.IO Event Listeners & Room Joining ---\n  useEffect(() => {\n    if (!roomName) {\n      navigate('/'); // Redirect to lobby if no roomName\n      return;\n    }\n    socket.emit('joinRoom', roomName); // Tell the server which room we're joining\n\n    socket.on('connect', () => {\n      console.log('Connected to backend Socket.IO:', socket.id);\n    });\n    socket.on('disconnect', () => {\n      console.log('Disconnected from backend Socket.IO');\n      alert('Disconnected from server. Please refresh.'); // User friendly message\n      navigate('/'); // Optionally redirect to lobby on disconnect\n    });\n\n    // Initial whiteboard state when joining\n    socket.on('whiteboardState', initialLines => {\n      console.log('Received initial whiteboard state:', initialLines);\n      setLines(initialLines);\n    });\n\n    // Listen for 'draw' events from other users in this room\n    socket.on('draw', newLine => {\n      // Add the received line data to our local state\n      setLines(prevLines => {\n        // This logic can be more complex for updating partial lines\n        // For now, we assume the server sends the full line, and we just append\n        const existingLineIndex = prevLines.findIndex(l => l.id === newLine.id);\n        if (existingLineIndex !== -1) {\n          // If the line already exists (e.g., partial update), update it\n          const newPrevLines = [...prevLines];\n          newPrevLines[existingLineIndex] = newLine;\n          return newPrevLines;\n        } else {\n          // Otherwise, it's a new line, add it\n          return [...prevLines, newLine];\n        }\n      });\n    });\n    socket.on('userJoined', userId => {\n      console.log(`User ${userId} joined the room.`);\n      // You could display a notification here\n    });\n\n    // Clean up socket listeners on component unmount\n    return () => {\n      socket.off('connect');\n      socket.off('disconnect');\n      socket.off('whiteboardState');\n      socket.off('draw');\n      socket.off('userJoined');\n      // Optionally, emit a 'leaveRoom' event\n    };\n  }, [roomName, navigate]); // Re-run effect if roomName changes\n\n  // --- Drawing Logic ---\n  const handleMouseDown = e => {\n    setIsDrawing(true);\n    const pos = e.target.getStage().getPointerPosition();\n    const newLine = {\n      id: `${socket.id}-${Date.now()}`,\n      // Unique ID for this line (client-side generated)\n      tool: 'pen',\n      points: [pos.x, pos.y],\n      stroke: 'black',\n      strokeWidth: 5\n    };\n    setLines(prevLines => [...prevLines, newLine]);\n  };\n  const handleMouseMove = e => {\n    if (!isDrawing) {\n      return;\n    }\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    let lastLine = lines[lines.length - 1];\n    if (lastLine) {\n      // Add point to the last line\n      lastLine.points = lastLine.points.concat([point.x, point.y]);\n      const newLines = [...lines];\n      newLines.splice(lines.length - 1, 1, lastLine); // Replace the last line with the updated one\n      setLines(newLines);\n\n      // Emit the updated line data to the backend, including roomName\n      socket.emit('draw', {\n        roomName,\n        line: lastLine\n      });\n    }\n  };\n  const handleMouseUp = () => {\n    setIsDrawing(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"whiteboard-room-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Whiteboard Room: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"room-name\",\n          children: roomName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate('/'),\n        className: \"leave-button\",\n        children: \"Leave Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stage, {\n      width: window.innerWidth * 0.9,\n      height: window.innerHeight * 0.8,\n      onMouseDown: handleMouseDown,\n      onMousemove: handleMouseMove,\n      onMouseup: handleMouseUp,\n      onTouchStart: handleMouseDown,\n      onTouchMove: handleMouseMove,\n      onTouchEnd: handleMouseUp,\n      ref: stageRef,\n      style: {\n        border: '1px solid #ccc',\n        cursor: 'crosshair',\n        backgroundColor: 'white'\n      },\n      children: /*#__PURE__*/_jsxDEV(Layer, {\n        children: lines.map((line, i) => /*#__PURE__*/_jsxDEV(Line, {\n          // Use line.id for better keying\n          points: line.points,\n          stroke: line.stroke,\n          strokeWidth: line.strokeWidth,\n          tension: 0.5,\n          lineCap: \"round\",\n          lineJoin: \"round\",\n          globalCompositeOperation: line.tool === 'eraser' ? 'destination-out' : 'source-over'\n        }, line.id || i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"hint-text\",\n      children: \"Draw here. Open this room in another tab to see real-time collaboration.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_s(WhiteboardRoom, \"1Wu2Pceen23EvccLONI+xH01H9I=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = WhiteboardRoom;\nexport default WhiteboardRoom;\nvar _c;\n$RefreshReg$(_c, \"WhiteboardRoom\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Stage","Layer","Line","useParams","useNavigate","io","jsxDEV","_jsxDEV","socket","WhiteboardRoom","_s","roomName","navigate","lines","setLines","isDrawing","setIsDrawing","stageRef","emit","on","console","log","id","alert","initialLines","newLine","prevLines","existingLineIndex","findIndex","l","newPrevLines","userId","off","handleMouseDown","e","pos","target","getStage","getPointerPosition","Date","now","tool","points","x","y","stroke","strokeWidth","handleMouseMove","stage","point","lastLine","length","concat","newLines","splice","line","handleMouseUp","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","width","window","innerWidth","height","innerHeight","onMouseDown","onMousemove","onMouseup","onTouchStart","onTouchMove","onTouchEnd","ref","style","border","cursor","backgroundColor","map","i","tension","lineCap","lineJoin","globalCompositeOperation","_c","$RefreshReg$"],"sources":["C:/Users/gamin/OneDrive/Desktop/Project/Whiteboard/live-whiteboard-app/whiteboard-frontend/src/components/WhiteboardRoom.js"],"sourcesContent":["// whiteboard-frontend/src/components/WhiteboardRoom.js\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Stage, Layer, Line } from 'react-konva';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { io } from 'socket.io-client';\r\nimport './WhiteboardRoom.css'; // We'll create this CSS file\r\n\r\nconst socket = io('http://localhost:5000'); // Connect to your backend\r\n\r\nfunction WhiteboardRoom() {\r\n  const { roomName } = useParams(); // Get roomName from URL\r\n  const navigate = useNavigate();\r\n  const [lines, setLines] = useState([]);\r\n  const [isDrawing, setIsDrawing] = useState(false);\r\n  const stageRef = useRef(null);\r\n\r\n  // --- Socket.IO Event Listeners & Room Joining ---\r\n  useEffect(() => {\r\n    if (!roomName) {\r\n      navigate('/'); // Redirect to lobby if no roomName\r\n      return;\r\n    }\r\n\r\n    socket.emit('joinRoom', roomName); // Tell the server which room we're joining\r\n\r\n    socket.on('connect', () => {\r\n      console.log('Connected to backend Socket.IO:', socket.id);\r\n    });\r\n\r\n    socket.on('disconnect', () => {\r\n      console.log('Disconnected from backend Socket.IO');\r\n      alert('Disconnected from server. Please refresh.'); // User friendly message\r\n      navigate('/'); // Optionally redirect to lobby on disconnect\r\n    });\r\n\r\n    // Initial whiteboard state when joining\r\n    socket.on('whiteboardState', (initialLines) => {\r\n      console.log('Received initial whiteboard state:', initialLines);\r\n      setLines(initialLines);\r\n    });\r\n\r\n    // Listen for 'draw' events from other users in this room\r\n    socket.on('draw', (newLine) => {\r\n      // Add the received line data to our local state\r\n      setLines((prevLines) => {\r\n        // This logic can be more complex for updating partial lines\r\n        // For now, we assume the server sends the full line, and we just append\r\n        const existingLineIndex = prevLines.findIndex(l => l.id === newLine.id);\r\n        if (existingLineIndex !== -1) {\r\n            // If the line already exists (e.g., partial update), update it\r\n            const newPrevLines = [...prevLines];\r\n            newPrevLines[existingLineIndex] = newLine;\r\n            return newPrevLines;\r\n        } else {\r\n            // Otherwise, it's a new line, add it\r\n            return [...prevLines, newLine];\r\n        }\r\n      });\r\n    });\r\n\r\n    socket.on('userJoined', (userId) => {\r\n        console.log(`User ${userId} joined the room.`);\r\n        // You could display a notification here\r\n    });\r\n\r\n    // Clean up socket listeners on component unmount\r\n    return () => {\r\n      socket.off('connect');\r\n      socket.off('disconnect');\r\n      socket.off('whiteboardState');\r\n      socket.off('draw');\r\n      socket.off('userJoined');\r\n      // Optionally, emit a 'leaveRoom' event\r\n    };\r\n  }, [roomName, navigate]); // Re-run effect if roomName changes\r\n\r\n  // --- Drawing Logic ---\r\n  const handleMouseDown = (e) => {\r\n    setIsDrawing(true);\r\n    const pos = e.target.getStage().getPointerPosition();\r\n    const newLine = {\r\n      id: `${socket.id}-${Date.now()}`, // Unique ID for this line (client-side generated)\r\n      tool: 'pen',\r\n      points: [pos.x, pos.y],\r\n      stroke: 'black',\r\n      strokeWidth: 5,\r\n    };\r\n    setLines((prevLines) => [...prevLines, newLine]);\r\n  };\r\n\r\n  const handleMouseMove = (e) => {\r\n    if (!isDrawing) {\r\n      return;\r\n    }\r\n\r\n    const stage = e.target.getStage();\r\n    const point = stage.getPointerPosition();\r\n    let lastLine = lines[lines.length - 1];\r\n\r\n    if (lastLine) {\r\n      // Add point to the last line\r\n      lastLine.points = lastLine.points.concat([point.x, point.y]);\r\n      const newLines = [...lines];\r\n      newLines.splice(lines.length - 1, 1, lastLine); // Replace the last line with the updated one\r\n      setLines(newLines);\r\n\r\n      // Emit the updated line data to the backend, including roomName\r\n      socket.emit('draw', { roomName, line: lastLine });\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    setIsDrawing(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"whiteboard-room-container\">\r\n      <div className=\"header\">\r\n        <h1>Whiteboard Room: <span className=\"room-name\">{roomName}</span></h1>\r\n        <button onClick={() => navigate('/')} className=\"leave-button\">\r\n          Leave Room\r\n        </button>\r\n      </div>\r\n      <Stage\r\n        width={window.innerWidth * 0.9}\r\n        height={window.innerHeight * 0.8}\r\n        onMouseDown={handleMouseDown}\r\n        onMousemove={handleMouseMove}\r\n        onMouseup={handleMouseUp}\r\n        onTouchStart={handleMouseDown}\r\n        onTouchMove={handleMouseMove}\r\n        onTouchEnd={handleMouseUp}\r\n        ref={stageRef}\r\n        style={{ border: '1px solid #ccc', cursor: 'crosshair', backgroundColor: 'white' }}\r\n      >\r\n        <Layer>\r\n          {lines.map((line, i) => (\r\n            <Line\r\n              key={line.id || i} // Use line.id for better keying\r\n              points={line.points}\r\n              stroke={line.stroke}\r\n              strokeWidth={line.strokeWidth}\r\n              tension={0.5}\r\n              lineCap=\"round\"\r\n              lineJoin=\"round\"\r\n              globalCompositeOperation={\r\n                line.tool === 'eraser' ? 'destination-out' : 'source-over'\r\n              }\r\n            />\r\n          ))}\r\n        </Layer>\r\n      </Stage>\r\n      <p className=\"hint-text\">\r\n        Draw here. Open this room in another tab to see real-time collaboration.\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WhiteboardRoom;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}