{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gamin\\\\OneDrive\\\\Desktop\\\\Project\\\\Whiteboard\\\\live-whiteboard-app\\\\whiteboard-frontend\\\\src\\\\components\\\\WhiteboardRoom.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// whiteboard-frontend/src/components/WhiteboardRoom.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Stage, Layer, Line, Rect, Circle, Text, Transformer } from 'react-konva'; // Import new Konva components\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport './WhiteboardRoom.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io('http://192.168.1.102:5000');\n\n// Helper component for selectable/transformable Konva nodes\nconst ColoredRect = ({\n  shapeProps,\n  isSelected,\n  onSelect,\n  onChange\n}) => {\n  _s();\n  const shapeRef = useRef();\n  const trRef = useRef();\n  useEffect(() => {\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.nodes([shapeRef.current]);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected]);\n\n  // Handle double click for text editing\n  const handleDblClick = e => {\n    if (shapeProps.type === 'text') {\n      // Hide transformer\n      trRef.current.nodes([]);\n      trRef.current.getLayer().batchDraw();\n      const textNode = shapeRef.current;\n      textNode.hide(); // Hide the Konva Text node\n      textNode.getLayer().batchDraw();\n      const textPosition = textNode.absolutePosition();\n\n      // Create a textarea over the Konva text\n      const textarea = document.createElement('textarea');\n      document.body.appendChild(textarea);\n      textarea.value = textNode.text();\n      textarea.style.position = 'absolute';\n      textarea.style.top = textPosition.y + 'px';\n      textarea.style.left = textPosition.x + 'px';\n      textarea.style.width = textNode.width() - textNode.padding() * 2 + 'px';\n      textarea.style.height = textNode.height() - textNode.padding() * 2 + 5 + 'px';\n      textarea.style.fontSize = textNode.fontSize() + 'px';\n      textarea.style.border = 'none';\n      textarea.style.padding = '0px';\n      textarea.style.margin = '0px';\n      textarea.style.overflow = 'hidden';\n      textarea.style.background = 'none';\n      textarea.style.outline = 'none';\n      textarea.style.resize = 'none';\n      textarea.style.lineHeight = textNode.lineHeight();\n      textarea.style.fontFamily = textNode.fontFamily();\n      textarea.style.transformOrigin = 'left top';\n      textarea.style.textAlign = textNode.align();\n      textarea.style.color = textNode.fill();\n      textarea.style.transform = `rotateZ(${textNode.rotation()}deg)`;\n      textarea.style.zIndex = '9999';\n      textarea.focus();\n      const removeTextarea = () => {\n        document.body.removeChild(textarea);\n        textNode.show();\n        textNode.getLayer().batchDraw();\n        onSelect(null); // Deselect the text after editing\n      };\n      textarea.addEventListener('keydown', e => {\n        // Hide on enter (but allow shift+enter for new line)\n        if (e.key === 'Enter' && !e.shiftKey) {\n          textarea.blur();\n        }\n        // Escape for cancelling\n        if (e.key === 'Escape') {\n          removeTextarea();\n        }\n      });\n      textarea.addEventListener('blur', () => {\n        onChange({\n          ...shapeProps,\n          text: textarea.value\n        });\n        removeTextarea();\n      });\n    } else {\n      onSelect(); // Regular selection for other shapes\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [shapeProps.type === 'rect' && /*#__PURE__*/_jsxDEV(Rect, {\n      onClick: onSelect,\n      onTap: onSelect,\n      onDblClick: handleDblClick,\n      onDblTap: handleDblClick,\n      ref: shapeRef,\n      ...shapeProps,\n      draggable: true,\n      onDragEnd: e => {\n        onChange({\n          ...shapeProps,\n          x: e.target.x(),\n          y: e.target.y()\n        });\n      },\n      onTransformEnd: e => {\n        // transformer is changing scale of the node\n        const node = shapeRef.current;\n        const scaleX = node.scaleX();\n        const scaleY = node.scaleY();\n\n        // reset scale to 1 and apply all changes to width, height, rotation\n        node.scaleX(1);\n        node.scaleY(1);\n        onChange({\n          ...shapeProps,\n          x: node.x(),\n          y: node.y(),\n          width: Math.max(5, node.width() * scaleX),\n          height: Math.max(5, node.height() * scaleY),\n          rotation: node.rotation()\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), shapeProps.type === 'circle' && /*#__PURE__*/_jsxDEV(Circle, {\n      onClick: onSelect,\n      onTap: onSelect,\n      onDblClick: handleDblClick,\n      onDblTap: handleDblClick,\n      ref: shapeRef,\n      ...shapeProps,\n      draggable: true,\n      onDragEnd: e => {\n        onChange({\n          ...shapeProps,\n          x: e.target.x(),\n          y: e.target.y()\n        });\n      },\n      onTransformEnd: e => {\n        const node = shapeRef.current;\n        const scaleX = node.scaleX();\n        node.scaleX(1);\n        node.scaleY(1);\n        onChange({\n          ...shapeProps,\n          x: node.x(),\n          y: node.y(),\n          radius: Math.max(5, node.radius() * scaleX),\n          rotation: node.rotation()\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this), shapeProps.type === 'text' && /*#__PURE__*/_jsxDEV(Text, {\n      onClick: onSelect,\n      onTap: onSelect,\n      onDblClick: handleDblClick // Double click to edit text\n      ,\n      onDblTap: handleDblClick,\n      ref: shapeRef,\n      ...shapeProps,\n      draggable: true,\n      onDragEnd: e => {\n        onChange({\n          ...shapeProps,\n          x: e.target.x(),\n          y: e.target.y()\n        });\n      },\n      onTransformEnd: e => {\n        const node = shapeRef.current;\n        const scaleX = node.scaleX();\n        const scaleY = node.scaleY();\n        node.scaleX(1);\n        node.scaleY(1);\n        onChange({\n          ...shapeProps,\n          x: node.x(),\n          y: node.y(),\n          width: Math.max(5, node.width() * scaleX),\n          height: Math.max(5, node.height() * scaleY),\n          fontSize: Math.max(8, node.fontSize() * scaleX),\n          // Scale font size with width\n          rotation: node.rotation()\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this), isSelected && trRef.current && /*#__PURE__*/_jsxDEV(Transformer, {\n      ref: trRef,\n      boundBoxFunc: (oldBox, newBox) => {\n        // Limit minimal size\n        if (newBox.width < 5 || newBox.height < 5) {\n          return oldBox;\n        }\n        return newBox;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(ColoredRect, \"utqYnE1qYQB2JA/ZIFXzHjUZTOc=\");\n_c = ColoredRect;\nfunction WhiteboardRoom() {\n  _s2();\n  const {\n    roomName\n  } = useParams();\n  const navigate = useNavigate();\n  // UPDATED: 'lines' now holds all drawing objects\n  const [drawingObjects, setDrawingObjects] = useState([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const stageRef = useRef(null);\n  const currentObjectId = useRef(null); // Renamed from currentLineId\n\n  const [chatMessages, setChatMessages] = useState([]);\n  const [newChatMessage, setNewChatMessage] = useState('');\n  const chatMessagesEndRef = useRef(null);\n  const [stageDimensions, setStageDimensions] = useState({\n    width: window.innerWidth * 0.7,\n    height: window.innerHeight * 0.8\n  });\n  const canvasContainerRef = useRef(null);\n\n  // UPDATED: Tool properties\n  const [tool, setTool] = useState('pen'); // 'pen', 'eraser', 'select', 'rect', 'circle', 'text'\n  const [strokeColor, setStrokeColor] = useState('#000000');\n  const [strokeWidth, setStrokeWidth] = useState(5);\n  const [fillColor, setFillColor] = useState('transparent'); // For shapes\n  const [selectedId, selectShape] = useState(null); // For selection tool\n\n  // --- Socket.IO Event Listeners & Room Joining ---\n  useEffect(() => {\n    if (!roomName) {\n      navigate('/');\n      return;\n    }\n    socket.emit('joinRoom', roomName);\n    socket.on('connect', () => {\n      console.log('Connected to backend Socket.IO:', socket.id);\n    });\n    socket.on('disconnect', () => {\n      console.log('Disconnected from backend Socket.IO');\n      alert('Disconnected from server. Please refresh.');\n      navigate('/');\n    });\n\n    // UPDATED: Receive an object with drawingObjects (formerly lines) and messages\n    socket.on('whiteboardState', data => {\n      console.log('Received initial room state:', data);\n      setDrawingObjects(data.lines); // 'lines' field in data now contains all objects\n      setChatMessages(data.messages);\n    });\n\n    // UPDATED: Listen for generic drawingStarted events\n    socket.on('drawingStarted', newObject => {\n      setDrawingObjects(prevObjects => [...prevObjects, newObject]);\n    });\n\n    // UPDATED: Listen for drawing events (only for lines)\n    socket.on('drawing', data => {\n      const {\n        objectId,\n        newPoints\n      } = data;\n      setDrawingObjects(prevObjects => {\n        return prevObjects.map(obj => {\n          if (obj.id === objectId && obj.type === 'line') {\n            return {\n              ...obj,\n              points: obj.points.concat(newPoints)\n            };\n          }\n          return obj;\n        });\n      });\n    });\n\n    // UPDATED: Listen for drawingFinished events\n    socket.on('drawingFinished', data => {\n      const {\n        objectId,\n        finalObjectState\n      } = data;\n      setDrawingObjects(prevObjects => {\n        return prevObjects.map(obj => {\n          if (obj.id === objectId) {\n            return finalObjectState;\n          }\n          return obj;\n        });\n      });\n    });\n\n    // NEW: Listen for object updates (move, resize, edit text)\n    socket.on('objectUpdated', data => {\n      const {\n        objectId,\n        newAttributes\n      } = data;\n      setDrawingObjects(prevObjects => {\n        return prevObjects.map(obj => {\n          if (obj.id === objectId) {\n            return {\n              ...obj,\n              ...newAttributes\n            };\n          }\n          return obj;\n        });\n      });\n    });\n\n    // NEW: Listen for whiteboard cleared event\n    socket.on('whiteboardCleared', () => {\n      setDrawingObjects([]); // Clear all objects locally\n      selectShape(null); // Deselect any selected object\n      console.log('Whiteboard cleared by another user.');\n    });\n    socket.on('chatMessage', message => {\n      setChatMessages(prevMessages => [...prevMessages, message]);\n    });\n    socket.on('userJoined', username => {\n      setChatMessages(prevMessages => [...prevMessages, {\n        username: 'System',\n        message: `${username} has joined the room.`,\n        timestamp: new Date()\n      }]);\n    });\n    const handleResize = () => {\n      if (canvasContainerRef.current) {\n        const {\n          clientWidth,\n          clientHeight\n        } = canvasContainerRef.current;\n        setStageDimensions({\n          width: clientWidth,\n          height: clientHeight\n        });\n      }\n    };\n    window.addEventListener('resize', handleResize);\n    handleResize();\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      socket.off('connect');\n      socket.off('disconnect');\n      socket.off('whiteboardState');\n      socket.off('drawingStarted');\n      socket.off('drawing');\n      socket.off('drawingFinished');\n      socket.off('objectUpdated'); // Clean up\n      socket.off('whiteboardCleared'); // Clean up\n      socket.off('chatMessage');\n      socket.off('userJoined');\n    };\n  }, [roomName, navigate]);\n  useEffect(() => {\n    var _chatMessagesEndRef$c;\n    (_chatMessagesEndRef$c = chatMessagesEndRef.current) === null || _chatMessagesEndRef$c === void 0 ? void 0 : _chatMessagesEndRef$c.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [chatMessages]);\n\n  // Function to handle changes to drawing objects (for Konva Transformer)\n  const handleObjectChange = updatedObject => {\n    setDrawingObjects(prevObjects => {\n      return prevObjects.map(obj => {\n        if (obj.id === updatedObject.id) {\n          return updatedObject;\n        }\n        return obj;\n      });\n    });\n    // Emit update to backend only for changes (x,y,width,height,rotation,text etc.)\n    // We only send the *changed* attributes, not the full object for efficiency\n    socket.emit('updateObject', {\n      roomName,\n      objectId: updatedObject.id,\n      newAttributes: updatedObject\n    });\n  };\n\n  // --- Drawing Logic (UPDATED for various tools) ---\n  const handleMouseDown = e => {\n    // Deselect if clicking on empty space and tool is 'select'\n    const clickedOnEmpty = e.target === e.target.getStage();\n    if (tool === 'select' && clickedOnEmpty) {\n      selectShape(null);\n      return; // No drawing for select tool\n    }\n    if (e.evt.type === 'touchstart') {\n      e.evt.preventDefault();\n    }\n    setIsDrawing(true);\n    const pos = e.target.getStage().getPointerPosition();\n    const newObjectId = `${socket.id}-${Date.now()}`;\n    currentObjectId.current = newObjectId;\n    selectShape(null); // Deselect existing objects when starting a new drawing\n\n    let newObject;\n    switch (tool) {\n      case 'pen':\n      case 'eraser':\n        newObject = {\n          id: newObjectId,\n          type: 'line',\n          // Always 'line' for pen/eraser\n          points: [pos.x, pos.y],\n          stroke: tool === 'eraser' ? '#FFFFFF' : strokeColor,\n          // Eraser color is whiteboard background\n          strokeWidth: tool === 'eraser' ? strokeWidth + 10 : strokeWidth,\n          tool: tool // Keep tool property for eraser's composite operation\n        };\n        break;\n      case 'rect':\n        newObject = {\n          id: newObjectId,\n          type: 'rect',\n          x: pos.x,\n          y: pos.y,\n          width: 0,\n          height: 0,\n          // Will be updated on mouse move\n          stroke: strokeColor,\n          strokeWidth: strokeWidth,\n          fill: fillColor\n        };\n        break;\n      case 'circle':\n        newObject = {\n          id: newObjectId,\n          type: 'circle',\n          x: pos.x,\n          y: pos.y,\n          radius: 0,\n          // Will be updated on mouse move\n          stroke: strokeColor,\n          strokeWidth: strokeWidth,\n          fill: fillColor\n        };\n        break;\n      case 'text':\n        // For text, we'll create a default text box on click\n        newObject = {\n          id: newObjectId,\n          type: 'text',\n          x: pos.x,\n          y: pos.y,\n          text: 'Double click to edit',\n          fontSize: 20,\n          fontFamily: 'Arial',\n          stroke: strokeColor,\n          fill: strokeColor,\n          // Text fill is stroke color\n          width: 200 // Default width for wrapping\n        };\n        setIsDrawing(false); // Text is not \"drawn\" by dragging, it's placed\n        socket.emit('startDrawing', {\n          roomName,\n          object: newObject\n        });\n        setDrawingObjects(prevObjects => [...prevObjects, newObject]);\n        selectShape(newObjectId); // Select the new text object for immediate editing/moving\n        return;\n      // Exit early for text tool\n      case 'select':\n        // Selection handled by ColoredRect's onClick\n        setIsDrawing(false);\n        return;\n      default:\n        return;\n    }\n    setDrawingObjects(prevObjects => [...prevObjects, newObject]);\n    socket.emit('startDrawing', {\n      roomName,\n      object: newObject\n    });\n  };\n  const handleMouseMove = e => {\n    if (!isDrawing) {\n      return;\n    }\n    if (e.evt.type === 'touchmove') {\n      e.evt.preventDefault();\n    }\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    let currentObject = drawingObjects.find(obj => obj.id === currentObjectId.current);\n    if (currentObject) {\n      const newObjects = [...drawingObjects];\n      const index = newObjects.findIndex(obj => obj.id === currentObject.id);\n      switch (currentObject.type) {\n        case 'line':\n          currentObject.points = currentObject.points.concat([point.x, point.y]);\n          newObjects[index] = currentObject;\n          setDrawingObjects(newObjects);\n          socket.emit('drawing', {\n            roomName,\n            objectId: currentObjectId.current,\n            newPoints: [point.x, point.y]\n          });\n          break;\n        case 'rect':\n          currentObject.width = point.x - currentObject.x;\n          currentObject.height = point.y - currentObject.y;\n          newObjects[index] = currentObject;\n          setDrawingObjects(newObjects);\n          // Emit update for rect dimensions\n          socket.emit('updateObject', {\n            roomName,\n            objectId: currentObjectId.current,\n            newAttributes: {\n              width: currentObject.width,\n              height: currentObject.height\n            }\n          });\n          break;\n        case 'circle':\n          currentObject.radius = Math.sqrt(Math.pow(point.x - currentObject.x, 2) + Math.pow(point.y - currentObject.y, 2));\n          newObjects[index] = currentObject;\n          setDrawingObjects(newObjects);\n          // Emit update for circle radius\n          socket.emit('updateObject', {\n            roomName,\n            objectId: currentObjectId.current,\n            newAttributes: {\n              radius: currentObject.radius\n            }\n          });\n          break;\n        default:\n          break;\n      }\n    }\n  };\n  const handleMouseUp = () => {\n    setIsDrawing(false);\n    // Only emit endDrawing if it was an actual drawing tool (not text or select)\n    if (tool !== 'select' && tool !== 'text') {\n      const finalObject = drawingObjects.find(obj => obj.id === currentObjectId.current);\n      if (finalObject) {\n        socket.emit('endDrawing', {\n          roomName,\n          objectId: currentObjectId.current,\n          finalObjectState: finalObject\n        });\n      }\n    }\n    currentObjectId.current = null;\n  };\n  const handleSendChatMessage = () => {\n    if (newChatMessage.trim()) {\n      socket.emit('chatMessage', {\n        roomName,\n        message: newChatMessage.trim()\n      });\n      setNewChatMessage('');\n    }\n  };\n  const handleChatKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSendChatMessage();\n    }\n  };\n  const handleClearWhiteboard = () => {\n    if (window.confirm('Are you sure you want to clear the entire whiteboard? This cannot be undone!')) {\n      socket.emit('clearWhiteboard', roomName);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"whiteboard-page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"whiteboard-main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Whiteboard Room: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"room-name\",\n            children: roomName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 546,\n            columnNumber: 32\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => navigate('/'),\n          className: \"leave-button\",\n          children: \"Leave Room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tool-palette\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tool-button ${tool === 'select' ? 'active' : ''}`,\n          onClick: () => {\n            setTool('select');\n            selectShape(null);\n          },\n          title: \"Select & Move\",\n          children: \"\\uD83D\\uDC46 Select\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tool-button ${tool === 'pen' ? 'active' : ''}`,\n          onClick: () => setTool('pen'),\n          title: \"Pen\",\n          children: \"\\u270F\\uFE0F Pen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tool-button ${tool === 'eraser' ? 'active' : ''}`,\n          onClick: () => setTool('eraser'),\n          title: \"Eraser\",\n          children: \"\\uD83E\\uDDFD Eraser\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tool-button ${tool === 'rect' ? 'active' : ''}`,\n          onClick: () => setTool('rect'),\n          title: \"Rectangle\",\n          children: \"\\u25FB\\uFE0F Rectangle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tool-button ${tool === 'circle' ? 'active' : ''}`,\n          onClick: () => setTool('circle'),\n          title: \"Circle\",\n          children: \"\\u26AB Circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tool-button ${tool === 'text' ? 'active' : ''}`,\n          onClick: () => setTool('text'),\n          title: \"Text\",\n          children: \"\\uD83C\\uDD70\\uFE0F Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tool-separator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"color\",\n          className: \"color-picker\",\n          value: strokeColor,\n          onChange: e => {\n            setStrokeColor(e.target.value);\n            if (tool !== 'eraser') setTool('pen'); // Auto switch to pen if not eraser\n          },\n          title: \"Stroke Color\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"color\",\n          className: \"color-picker\",\n          value: fillColor,\n          onChange: e => {\n            setFillColor(e.target.value);\n            if (tool === 'pen' || tool === 'eraser') setTool('rect'); // Auto switch to shape tool if using fill\n          },\n          title: \"Fill Color\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"1\",\n          max: \"20\",\n          value: strokeWidth,\n          onChange: e => setStrokeWidth(parseInt(e.target.value, 10)),\n          className: \"stroke-width-slider\",\n          title: `Stroke Width: ${strokeWidth}px`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stroke-width-display\",\n          children: [strokeWidth, \"px\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tool-separator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 631,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"tool-button\",\n          onClick: handleClearWhiteboard,\n          title: \"Clear All\",\n          children: \"\\uD83D\\uDDD1\\uFE0F Clear All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 633,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"whiteboard-canvas-container\",\n        ref: canvasContainerRef,\n        children: /*#__PURE__*/_jsxDEV(Stage, {\n          width: stageDimensions.width,\n          height: stageDimensions.height,\n          onMouseDown: handleMouseDown,\n          onMousemove: handleMouseMove,\n          onMouseup: handleMouseUp,\n          onTouchStart: handleMouseDown,\n          onTouchMove: handleMouseMove,\n          onTouchEnd: handleMouseUp,\n          ref: stageRef,\n          style: {\n            cursor: 'crosshair',\n            // Changes dynamically based on tool\n            backgroundColor: 'white',\n            touchAction: 'none'\n          },\n          children: /*#__PURE__*/_jsxDEV(Layer, {\n            children: drawingObjects.map((obj, i) => {\n              // Render different Konva components based on object type\n              if (obj.type === 'line') {\n                return /*#__PURE__*/_jsxDEV(Line, {\n                  points: obj.points,\n                  stroke: obj.stroke,\n                  strokeWidth: obj.strokeWidth,\n                  tension: 0.5,\n                  lineCap: \"round\",\n                  lineJoin: \"round\",\n                  globalCompositeOperation: obj.tool === 'eraser' ? 'destination-out' : 'source-over'\n                }, obj.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 660,\n                  columnNumber: 21\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(ColoredRect // Renamed from Rect to be more generic for shapes/text\n                , {\n                  shapeProps: obj,\n                  isSelected: obj.id === selectedId,\n                  onSelect: () => {\n                    selectShape(obj.id);\n                    setTool('select'); // Automatically switch to select tool\n                  },\n                  onChange: handleObjectChange\n                }, obj.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 675,\n                  columnNumber: 21\n                }, this);\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"hint-text margin-top-md\",\n        children: \"Use the tools above to draw and collaborate!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 691,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Room Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 697,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: [chatMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chat-username\",\n            children: [msg.username, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 701,\n            columnNumber: 15\n          }, this), \" \", msg.message, /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chat-timestamp\",\n            children: new Date(msg.timestamp).toLocaleTimeString([], {\n              hour: '2-digit',\n              minute: '2-digit'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 702,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 700,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: chatMessagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 707,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 698,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your message...\",\n          value: newChatMessage,\n          onChange: e => setNewChatMessage(e.target.value),\n          onKeyPress: handleChatKeyPress,\n          className: \"chat-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendChatMessage,\n          className: \"send-button\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 709,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 696,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 543,\n    columnNumber: 5\n  }, this);\n}\n_s2(WhiteboardRoom, \"6eHQ9wmBKTUrTRpiQz4xi3cIyyU=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c2 = WhiteboardRoom;\nexport default WhiteboardRoom;\nvar _c, _c2;\n$RefreshReg$(_c, \"ColoredRect\");\n$RefreshReg$(_c2, \"WhiteboardRoom\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Stage","Layer","Line","Rect","Circle","Text","Transformer","useParams","useNavigate","io","jsxDEV","_jsxDEV","Fragment","_Fragment","socket","ColoredRect","shapeProps","isSelected","onSelect","onChange","_s","shapeRef","trRef","current","nodes","getLayer","batchDraw","handleDblClick","e","type","textNode","hide","textPosition","absolutePosition","textarea","document","createElement","body","appendChild","value","text","style","position","top","y","left","x","width","padding","height","fontSize","border","margin","overflow","background","outline","resize","lineHeight","fontFamily","transformOrigin","textAlign","align","color","fill","transform","rotation","zIndex","focus","removeTextarea","removeChild","show","addEventListener","key","shiftKey","blur","children","onClick","onTap","onDblClick","onDblTap","ref","draggable","onDragEnd","target","onTransformEnd","node","scaleX","scaleY","Math","max","fileName","_jsxFileName","lineNumber","columnNumber","radius","boundBoxFunc","oldBox","newBox","_c","WhiteboardRoom","_s2","roomName","navigate","drawingObjects","setDrawingObjects","isDrawing","setIsDrawing","stageRef","currentObjectId","chatMessages","setChatMessages","newChatMessage","setNewChatMessage","chatMessagesEndRef","stageDimensions","setStageDimensions","window","innerWidth","innerHeight","canvasContainerRef","tool","setTool","strokeColor","setStrokeColor","strokeWidth","setStrokeWidth","fillColor","setFillColor","selectedId","selectShape","emit","on","console","log","id","alert","data","lines","messages","newObject","prevObjects","objectId","newPoints","map","obj","points","concat","finalObjectState","newAttributes","message","prevMessages","username","timestamp","Date","handleResize","clientWidth","clientHeight","removeEventListener","off","_chatMessagesEndRef$c","scrollIntoView","behavior","handleObjectChange","updatedObject","handleMouseDown","clickedOnEmpty","getStage","evt","preventDefault","pos","getPointerPosition","newObjectId","now","stroke","object","handleMouseMove","stage","point","currentObject","find","newObjects","index","findIndex","sqrt","pow","handleMouseUp","finalObject","handleSendChatMessage","trim","handleChatKeyPress","handleClearWhiteboard","confirm","className","title","min","parseInt","onMouseDown","onMousemove","onMouseup","onTouchStart","onTouchMove","onTouchEnd","cursor","backgroundColor","touchAction","i","tension","lineCap","lineJoin","globalCompositeOperation","msg","toLocaleTimeString","hour","minute","placeholder","onKeyPress","_c2","$RefreshReg$"],"sources":["C:/Users/gamin/OneDrive/Desktop/Project/Whiteboard/live-whiteboard-app/whiteboard-frontend/src/components/WhiteboardRoom.js"],"sourcesContent":["// whiteboard-frontend/src/components/WhiteboardRoom.js\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Stage, Layer, Line, Rect, Circle, Text, Transformer } from 'react-konva'; // Import new Konva components\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { io } from 'socket.io-client';\r\nimport './WhiteboardRoom.css';\r\n\r\nconst socket = io('http://192.168.1.102:5000');\r\n\r\n// Helper component for selectable/transformable Konva nodes\r\nconst ColoredRect = ({ shapeProps, isSelected, onSelect, onChange }) => {\r\n  const shapeRef = useRef();\r\n  const trRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (isSelected) {\r\n      // we need to attach transformer manually\r\n      trRef.current.nodes([shapeRef.current]);\r\n      trRef.current.getLayer().batchDraw();\r\n    }\r\n  }, [isSelected]);\r\n\r\n  // Handle double click for text editing\r\n  const handleDblClick = (e) => {\r\n    if (shapeProps.type === 'text') {\r\n      // Hide transformer\r\n      trRef.current.nodes([]);\r\n      trRef.current.getLayer().batchDraw();\r\n\r\n      const textNode = shapeRef.current;\r\n      textNode.hide(); // Hide the Konva Text node\r\n      textNode.getLayer().batchDraw();\r\n\r\n      const textPosition = textNode.absolutePosition();\r\n\r\n      // Create a textarea over the Konva text\r\n      const textarea = document.createElement('textarea');\r\n      document.body.appendChild(textarea);\r\n\r\n      textarea.value = textNode.text();\r\n      textarea.style.position = 'absolute';\r\n      textarea.style.top = textPosition.y + 'px';\r\n      textarea.style.left = textPosition.x + 'px';\r\n      textarea.style.width = textNode.width() - textNode.padding() * 2 + 'px';\r\n      textarea.style.height = textNode.height() - textNode.padding() * 2 + 5 + 'px';\r\n      textarea.style.fontSize = textNode.fontSize() + 'px';\r\n      textarea.style.border = 'none';\r\n      textarea.style.padding = '0px';\r\n      textarea.style.margin = '0px';\r\n      textarea.style.overflow = 'hidden';\r\n      textarea.style.background = 'none';\r\n      textarea.style.outline = 'none';\r\n      textarea.style.resize = 'none';\r\n      textarea.style.lineHeight = textNode.lineHeight();\r\n      textarea.style.fontFamily = textNode.fontFamily();\r\n      textarea.style.transformOrigin = 'left top';\r\n      textarea.style.textAlign = textNode.align();\r\n      textarea.style.color = textNode.fill();\r\n      textarea.style.transform = `rotateZ(${textNode.rotation()}deg)`;\r\n      textarea.style.zIndex = '9999';\r\n\r\n      textarea.focus();\r\n\r\n      const removeTextarea = () => {\r\n        document.body.removeChild(textarea);\r\n        textNode.show();\r\n        textNode.getLayer().batchDraw();\r\n        onSelect(null); // Deselect the text after editing\r\n      };\r\n\r\n      textarea.addEventListener('keydown', (e) => {\r\n        // Hide on enter (but allow shift+enter for new line)\r\n        if (e.key === 'Enter' && !e.shiftKey) {\r\n          textarea.blur();\r\n        }\r\n        // Escape for cancelling\r\n        if (e.key === 'Escape') {\r\n          removeTextarea();\r\n        }\r\n      });\r\n\r\n      textarea.addEventListener('blur', () => {\r\n        onChange({\r\n          ...shapeProps,\r\n          text: textarea.value,\r\n        });\r\n        removeTextarea();\r\n      });\r\n    } else {\r\n      onSelect(); // Regular selection for other shapes\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      {shapeProps.type === 'rect' && (\r\n        <Rect\r\n          onClick={onSelect}\r\n          onTap={onSelect}\r\n          onDblClick={handleDblClick}\r\n          onDblTap={handleDblClick}\r\n          ref={shapeRef}\r\n          {...shapeProps}\r\n          draggable\r\n          onDragEnd={(e) => {\r\n            onChange({\r\n              ...shapeProps,\r\n              x: e.target.x(),\r\n              y: e.target.y(),\r\n            });\r\n          }}\r\n          onTransformEnd={(e) => {\r\n            // transformer is changing scale of the node\r\n            const node = shapeRef.current;\r\n            const scaleX = node.scaleX();\r\n            const scaleY = node.scaleY();\r\n\r\n            // reset scale to 1 and apply all changes to width, height, rotation\r\n            node.scaleX(1);\r\n            node.scaleY(1);\r\n            onChange({\r\n              ...shapeProps,\r\n              x: node.x(),\r\n              y: node.y(),\r\n              width: Math.max(5, node.width() * scaleX),\r\n              height: Math.max(5, node.height() * scaleY),\r\n              rotation: node.rotation(),\r\n            });\r\n          }}\r\n        />\r\n      )}\r\n      {shapeProps.type === 'circle' && (\r\n        <Circle\r\n          onClick={onSelect}\r\n          onTap={onSelect}\r\n          onDblClick={handleDblClick}\r\n          onDblTap={handleDblClick}\r\n          ref={shapeRef}\r\n          {...shapeProps}\r\n          draggable\r\n          onDragEnd={(e) => {\r\n            onChange({\r\n              ...shapeProps,\r\n              x: e.target.x(),\r\n              y: e.target.y(),\r\n            });\r\n          }}\r\n          onTransformEnd={(e) => {\r\n            const node = shapeRef.current;\r\n            const scaleX = node.scaleX();\r\n            node.scaleX(1);\r\n            node.scaleY(1);\r\n            onChange({\r\n              ...shapeProps,\r\n              x: node.x(),\r\n              y: node.y(),\r\n              radius: Math.max(5, node.radius() * scaleX),\r\n              rotation: node.rotation(),\r\n            });\r\n          }}\r\n        />\r\n      )}\r\n      {shapeProps.type === 'text' && (\r\n        <Text\r\n          onClick={onSelect}\r\n          onTap={onSelect}\r\n          onDblClick={handleDblClick} // Double click to edit text\r\n          onDblTap={handleDblClick}\r\n          ref={shapeRef}\r\n          {...shapeProps}\r\n          draggable\r\n          onDragEnd={(e) => {\r\n            onChange({\r\n              ...shapeProps,\r\n              x: e.target.x(),\r\n              y: e.target.y(),\r\n            });\r\n          }}\r\n          onTransformEnd={(e) => {\r\n            const node = shapeRef.current;\r\n            const scaleX = node.scaleX();\r\n            const scaleY = node.scaleY();\r\n            node.scaleX(1);\r\n            node.scaleY(1);\r\n            onChange({\r\n              ...shapeProps,\r\n              x: node.x(),\r\n              y: node.y(),\r\n              width: Math.max(5, node.width() * scaleX),\r\n              height: Math.max(5, node.height() * scaleY),\r\n              fontSize: Math.max(8, node.fontSize() * scaleX), // Scale font size with width\r\n              rotation: node.rotation(),\r\n            });\r\n          }}\r\n        />\r\n      )}\r\n      {isSelected && (trRef.current) && (\r\n        <Transformer\r\n          ref={trRef}\r\n          boundBoxFunc={(oldBox, newBox) => {\r\n            // Limit minimal size\r\n            if (newBox.width < 5 || newBox.height < 5) {\r\n              return oldBox;\r\n            }\r\n            return newBox;\r\n          }}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nfunction WhiteboardRoom() {\r\n  const { roomName } = useParams();\r\n  const navigate = useNavigate();\r\n  // UPDATED: 'lines' now holds all drawing objects\r\n  const [drawingObjects, setDrawingObjects] = useState([]);\r\n  const [isDrawing, setIsDrawing] = useState(false);\r\n  const stageRef = useRef(null);\r\n  const currentObjectId = useRef(null); // Renamed from currentLineId\r\n\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [newChatMessage, setNewChatMessage] = useState('');\r\n  const chatMessagesEndRef = useRef(null);\r\n\r\n  const [stageDimensions, setStageDimensions] = useState({\r\n    width: window.innerWidth * 0.7,\r\n    height: window.innerHeight * 0.8\r\n  });\r\n  const canvasContainerRef = useRef(null);\r\n\r\n  // UPDATED: Tool properties\r\n  const [tool, setTool] = useState('pen'); // 'pen', 'eraser', 'select', 'rect', 'circle', 'text'\r\n  const [strokeColor, setStrokeColor] = useState('#000000');\r\n  const [strokeWidth, setStrokeWidth] = useState(5);\r\n  const [fillColor, setFillColor] = useState('transparent'); // For shapes\r\n  const [selectedId, selectShape] = useState(null); // For selection tool\r\n\r\n  // --- Socket.IO Event Listeners & Room Joining ---\r\n  useEffect(() => {\r\n    if (!roomName) {\r\n      navigate('/');\r\n      return;\r\n    }\r\n\r\n    socket.emit('joinRoom', roomName);\r\n\r\n    socket.on('connect', () => {\r\n      console.log('Connected to backend Socket.IO:', socket.id);\r\n    });\r\n\r\n    socket.on('disconnect', () => {\r\n      console.log('Disconnected from backend Socket.IO');\r\n      alert('Disconnected from server. Please refresh.');\r\n      navigate('/');\r\n    });\r\n\r\n    // UPDATED: Receive an object with drawingObjects (formerly lines) and messages\r\n    socket.on('whiteboardState', (data) => {\r\n      console.log('Received initial room state:', data);\r\n      setDrawingObjects(data.lines); // 'lines' field in data now contains all objects\r\n      setChatMessages(data.messages);\r\n    });\r\n\r\n    // UPDATED: Listen for generic drawingStarted events\r\n    socket.on('drawingStarted', (newObject) => {\r\n        setDrawingObjects((prevObjects) => [...prevObjects, newObject]);\r\n    });\r\n\r\n    // UPDATED: Listen for drawing events (only for lines)\r\n    socket.on('drawing', (data) => {\r\n        const { objectId, newPoints } = data;\r\n        setDrawingObjects((prevObjects) => {\r\n            return prevObjects.map((obj) => {\r\n                if (obj.id === objectId && obj.type === 'line') {\r\n                    return { ...obj, points: obj.points.concat(newPoints) };\r\n                }\r\n                return obj;\r\n            });\r\n        });\r\n    });\r\n\r\n    // UPDATED: Listen for drawingFinished events\r\n    socket.on('drawingFinished', (data) => {\r\n        const { objectId, finalObjectState } = data;\r\n        setDrawingObjects((prevObjects) => {\r\n            return prevObjects.map((obj) => {\r\n                if (obj.id === objectId) {\r\n                    return finalObjectState;\r\n                }\r\n                return obj;\r\n            });\r\n        });\r\n    });\r\n\r\n    // NEW: Listen for object updates (move, resize, edit text)\r\n    socket.on('objectUpdated', (data) => {\r\n        const { objectId, newAttributes } = data;\r\n        setDrawingObjects((prevObjects) => {\r\n            return prevObjects.map((obj) => {\r\n                if (obj.id === objectId) {\r\n                    return { ...obj, ...newAttributes };\r\n                }\r\n                return obj;\r\n            });\r\n        });\r\n    });\r\n\r\n    // NEW: Listen for whiteboard cleared event\r\n    socket.on('whiteboardCleared', () => {\r\n        setDrawingObjects([]); // Clear all objects locally\r\n        selectShape(null); // Deselect any selected object\r\n        console.log('Whiteboard cleared by another user.');\r\n    });\r\n\r\n\r\n    socket.on('chatMessage', (message) => {\r\n        setChatMessages((prevMessages) => [...prevMessages, message]);\r\n    });\r\n\r\n    socket.on('userJoined', (username) => {\r\n        setChatMessages((prevMessages) => [...prevMessages, {\r\n            username: 'System',\r\n            message: `${username} has joined the room.`,\r\n            timestamp: new Date()\r\n        }]);\r\n    });\r\n\r\n    const handleResize = () => {\r\n      if (canvasContainerRef.current) {\r\n        const { clientWidth, clientHeight } = canvasContainerRef.current;\r\n        setStageDimensions({ width: clientWidth, height: clientHeight });\r\n      }\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    handleResize();\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n      socket.off('connect');\r\n      socket.off('disconnect');\r\n      socket.off('whiteboardState');\r\n      socket.off('drawingStarted');\r\n      socket.off('drawing');\r\n      socket.off('drawingFinished');\r\n      socket.off('objectUpdated'); // Clean up\r\n      socket.off('whiteboardCleared'); // Clean up\r\n      socket.off('chatMessage');\r\n      socket.off('userJoined');\r\n    };\r\n  }, [roomName, navigate]);\r\n\r\n  useEffect(() => {\r\n    chatMessagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [chatMessages]);\r\n\r\n  // Function to handle changes to drawing objects (for Konva Transformer)\r\n  const handleObjectChange = (updatedObject) => {\r\n    setDrawingObjects((prevObjects) => {\r\n      return prevObjects.map((obj) => {\r\n        if (obj.id === updatedObject.id) {\r\n          return updatedObject;\r\n        }\r\n        return obj;\r\n      });\r\n    });\r\n    // Emit update to backend only for changes (x,y,width,height,rotation,text etc.)\r\n    // We only send the *changed* attributes, not the full object for efficiency\r\n    socket.emit('updateObject', { roomName, objectId: updatedObject.id, newAttributes: updatedObject });\r\n  };\r\n\r\n\r\n  // --- Drawing Logic (UPDATED for various tools) ---\r\n  const handleMouseDown = (e) => {\r\n    // Deselect if clicking on empty space and tool is 'select'\r\n    const clickedOnEmpty = e.target === e.target.getStage();\r\n    if (tool === 'select' && clickedOnEmpty) {\r\n      selectShape(null);\r\n      return; // No drawing for select tool\r\n    }\r\n\r\n    if (e.evt.type === 'touchstart') {\r\n        e.evt.preventDefault();\r\n    }\r\n    setIsDrawing(true);\r\n    const pos = e.target.getStage().getPointerPosition();\r\n    const newObjectId = `${socket.id}-${Date.now()}`;\r\n    currentObjectId.current = newObjectId;\r\n    selectShape(null); // Deselect existing objects when starting a new drawing\r\n\r\n    let newObject;\r\n    switch (tool) {\r\n      case 'pen':\r\n      case 'eraser':\r\n        newObject = {\r\n          id: newObjectId,\r\n          type: 'line', // Always 'line' for pen/eraser\r\n          points: [pos.x, pos.y],\r\n          stroke: tool === 'eraser' ? '#FFFFFF' : strokeColor, // Eraser color is whiteboard background\r\n          strokeWidth: tool === 'eraser' ? strokeWidth + 10 : strokeWidth,\r\n          tool: tool // Keep tool property for eraser's composite operation\r\n        };\r\n        break;\r\n      case 'rect':\r\n        newObject = {\r\n          id: newObjectId,\r\n          type: 'rect',\r\n          x: pos.x,\r\n          y: pos.y,\r\n          width: 0, height: 0, // Will be updated on mouse move\r\n          stroke: strokeColor,\r\n          strokeWidth: strokeWidth,\r\n          fill: fillColor,\r\n        };\r\n        break;\r\n      case 'circle':\r\n        newObject = {\r\n          id: newObjectId,\r\n          type: 'circle',\r\n          x: pos.x,\r\n          y: pos.y,\r\n          radius: 0, // Will be updated on mouse move\r\n          stroke: strokeColor,\r\n          strokeWidth: strokeWidth,\r\n          fill: fillColor,\r\n        };\r\n        break;\r\n      case 'text': // For text, we'll create a default text box on click\r\n        newObject = {\r\n          id: newObjectId,\r\n          type: 'text',\r\n          x: pos.x,\r\n          y: pos.y,\r\n          text: 'Double click to edit',\r\n          fontSize: 20,\r\n          fontFamily: 'Arial',\r\n          stroke: strokeColor,\r\n          fill: strokeColor, // Text fill is stroke color\r\n          width: 200, // Default width for wrapping\r\n        };\r\n        setIsDrawing(false); // Text is not \"drawn\" by dragging, it's placed\r\n        socket.emit('startDrawing', { roomName, object: newObject });\r\n        setDrawingObjects((prevObjects) => [...prevObjects, newObject]);\r\n        selectShape(newObjectId); // Select the new text object for immediate editing/moving\r\n        return; // Exit early for text tool\r\n      case 'select':\r\n        // Selection handled by ColoredRect's onClick\r\n        setIsDrawing(false);\r\n        return;\r\n      default:\r\n        return;\r\n    }\r\n\r\n    setDrawingObjects((prevObjects) => [...prevObjects, newObject]);\r\n    socket.emit('startDrawing', { roomName, object: newObject });\r\n  };\r\n\r\n  const handleMouseMove = (e) => {\r\n    if (!isDrawing) {\r\n      return;\r\n    }\r\n    if (e.evt.type === 'touchmove') {\r\n        e.evt.preventDefault();\r\n    }\r\n    const stage = e.target.getStage();\r\n    const point = stage.getPointerPosition();\r\n    let currentObject = drawingObjects.find(obj => obj.id === currentObjectId.current);\r\n\r\n    if (currentObject) {\r\n      const newObjects = [...drawingObjects];\r\n      const index = newObjects.findIndex(obj => obj.id === currentObject.id);\r\n\r\n      switch (currentObject.type) {\r\n        case 'line':\r\n          currentObject.points = currentObject.points.concat([point.x, point.y]);\r\n          newObjects[index] = currentObject;\r\n          setDrawingObjects(newObjects);\r\n          socket.emit('drawing', { roomName, objectId: currentObjectId.current, newPoints: [point.x, point.y] });\r\n          break;\r\n        case 'rect':\r\n          currentObject.width = point.x - currentObject.x;\r\n          currentObject.height = point.y - currentObject.y;\r\n          newObjects[index] = currentObject;\r\n          setDrawingObjects(newObjects);\r\n          // Emit update for rect dimensions\r\n          socket.emit('updateObject', { roomName, objectId: currentObjectId.current, newAttributes: {\r\n              width: currentObject.width, height: currentObject.height\r\n          }});\r\n          break;\r\n        case 'circle':\r\n          currentObject.radius = Math.sqrt(\r\n            Math.pow(point.x - currentObject.x, 2) + Math.pow(point.y - currentObject.y, 2)\r\n          );\r\n          newObjects[index] = currentObject;\r\n          setDrawingObjects(newObjects);\r\n          // Emit update for circle radius\r\n          socket.emit('updateObject', { roomName, objectId: currentObjectId.current, newAttributes: {\r\n              radius: currentObject.radius\r\n          }});\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    setIsDrawing(false);\r\n    // Only emit endDrawing if it was an actual drawing tool (not text or select)\r\n    if (tool !== 'select' && tool !== 'text') {\r\n      const finalObject = drawingObjects.find(obj => obj.id === currentObjectId.current);\r\n      if (finalObject) {\r\n          socket.emit('endDrawing', { roomName, objectId: currentObjectId.current, finalObjectState: finalObject });\r\n      }\r\n    }\r\n    currentObjectId.current = null;\r\n  };\r\n\r\n  const handleSendChatMessage = () => {\r\n    if (newChatMessage.trim()) {\r\n      socket.emit('chatMessage', { roomName, message: newChatMessage.trim() });\r\n      setNewChatMessage('');\r\n    }\r\n  };\r\n\r\n  const handleChatKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleSendChatMessage();\r\n    }\r\n  };\r\n\r\n  const handleClearWhiteboard = () => {\r\n    if (window.confirm('Are you sure you want to clear the entire whiteboard? This cannot be undone!')) {\r\n      socket.emit('clearWhiteboard', roomName);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"whiteboard-page-container\">\r\n      <div className=\"whiteboard-main-content\">\r\n        <div className=\"header\">\r\n          <h1>Whiteboard Room: <span className=\"room-name\">{roomName}</span></h1>\r\n          <button onClick={() => navigate('/')} className=\"leave-button\">\r\n            Leave Room\r\n          </button>\r\n        </div>\r\n\r\n        {/* NEW: Professional Tool Palette */}\r\n        <div className=\"tool-palette\">\r\n          <button\r\n            className={`tool-button ${tool === 'select' ? 'active' : ''}`}\r\n            onClick={() => { setTool('select'); selectShape(null); }}\r\n            title=\"Select & Move\"\r\n          >\r\n            👆 Select\r\n          </button>\r\n          <button\r\n            className={`tool-button ${tool === 'pen' ? 'active' : ''}`}\r\n            onClick={() => setTool('pen')}\r\n            title=\"Pen\"\r\n          >\r\n            ✏️ Pen\r\n          </button>\r\n          <button\r\n            className={`tool-button ${tool === 'eraser' ? 'active' : ''}`}\r\n            onClick={() => setTool('eraser')}\r\n            title=\"Eraser\"\r\n          >\r\n            🧽 Eraser\r\n          </button>\r\n          <button\r\n            className={`tool-button ${tool === 'rect' ? 'active' : ''}`}\r\n            onClick={() => setTool('rect')}\r\n            title=\"Rectangle\"\r\n          >\r\n            ◻️ Rectangle\r\n          </button>\r\n          <button\r\n            className={`tool-button ${tool === 'circle' ? 'active' : ''}`}\r\n            onClick={() => setTool('circle')}\r\n            title=\"Circle\"\r\n          >\r\n            ⚫ Circle\r\n          </button>\r\n          <button\r\n            className={`tool-button ${tool === 'text' ? 'active' : ''}`}\r\n            onClick={() => setTool('text')}\r\n            title=\"Text\"\r\n          >\r\n            🅰️ Text\r\n          </button>\r\n\r\n          <div className=\"tool-separator\"></div> {/* Visual separator */}\r\n\r\n          <input\r\n            type=\"color\"\r\n            className=\"color-picker\"\r\n            value={strokeColor}\r\n            onChange={(e) => {\r\n                setStrokeColor(e.target.value);\r\n                if (tool !== 'eraser') setTool('pen'); // Auto switch to pen if not eraser\r\n            }}\r\n            title=\"Stroke Color\"\r\n          />\r\n          <input\r\n            type=\"color\"\r\n            className=\"color-picker\"\r\n            value={fillColor}\r\n            onChange={(e) => {\r\n                setFillColor(e.target.value);\r\n                if (tool === 'pen' || tool === 'eraser') setTool('rect'); // Auto switch to shape tool if using fill\r\n            }}\r\n            title=\"Fill Color\"\r\n          />\r\n\r\n          <input\r\n            type=\"range\"\r\n            min=\"1\"\r\n            max=\"20\"\r\n            value={strokeWidth}\r\n            onChange={(e) => setStrokeWidth(parseInt(e.target.value, 10))}\r\n            className=\"stroke-width-slider\"\r\n            title={`Stroke Width: ${strokeWidth}px`}\r\n          />\r\n          <span className=\"stroke-width-display\">{strokeWidth}px</span>\r\n\r\n          <div className=\"tool-separator\"></div>\r\n\r\n          <button className=\"tool-button\" onClick={handleClearWhiteboard} title=\"Clear All\">\r\n            🗑️ Clear All\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"whiteboard-canvas-container\" ref={canvasContainerRef}>\r\n          <Stage\r\n            width={stageDimensions.width}\r\n            height={stageDimensions.height}\r\n            onMouseDown={handleMouseDown}\r\n            onMousemove={handleMouseMove}\r\n            onMouseup={handleMouseUp}\r\n            onTouchStart={handleMouseDown}\r\n            onTouchMove={handleMouseMove}\r\n            onTouchEnd={handleMouseUp}\r\n            ref={stageRef}\r\n            style={{\r\n                cursor: 'crosshair', // Changes dynamically based on tool\r\n                backgroundColor: 'white',\r\n                touchAction: 'none'\r\n            }}\r\n          >\r\n            <Layer>\r\n              {drawingObjects.map((obj, i) => {\r\n                // Render different Konva components based on object type\r\n                if (obj.type === 'line') {\r\n                  return (\r\n                    <Line\r\n                      key={obj.id}\r\n                      points={obj.points}\r\n                      stroke={obj.stroke}\r\n                      strokeWidth={obj.strokeWidth}\r\n                      tension={0.5}\r\n                      lineCap=\"round\"\r\n                      lineJoin=\"round\"\r\n                      globalCompositeOperation={\r\n                        obj.tool === 'eraser' ? 'destination-out' : 'source-over'\r\n                      }\r\n                    />\r\n                  );\r\n                } else {\r\n                  return (\r\n                    <ColoredRect // Renamed from Rect to be more generic for shapes/text\r\n                      key={obj.id}\r\n                      shapeProps={obj}\r\n                      isSelected={obj.id === selectedId}\r\n                      onSelect={() => {\r\n                        selectShape(obj.id);\r\n                        setTool('select'); // Automatically switch to select tool\r\n                      }}\r\n                      onChange={handleObjectChange}\r\n                    />\r\n                  );\r\n                }\r\n              })}\r\n            </Layer>\r\n          </Stage>\r\n        </div>\r\n        <p className=\"hint-text margin-top-md\">\r\n          Use the tools above to draw and collaborate!\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"chat-sidebar\">\r\n        <h2>Room Chat</h2>\r\n        <div className=\"chat-messages\">\r\n          {chatMessages.map((msg, index) => (\r\n            <div key={index} className=\"chat-message\">\r\n              <span className=\"chat-username\">{msg.username}:</span> {msg.message}\r\n              <span className=\"chat-timestamp\">\r\n                {new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\r\n              </span>\r\n            </div>\r\n          ))}\r\n          <div ref={chatMessagesEndRef} />\r\n        </div>\r\n        <div className=\"chat-input-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Type your message...\"\r\n            value={newChatMessage}\r\n            onChange={(e) => setNewChatMessage(e.target.value)}\r\n            onKeyPress={handleChatKeyPress}\r\n            className=\"chat-input\"\r\n          />\r\n          <button onClick={handleSendChatMessage} className=\"send-button\">\r\n            Send\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WhiteboardRoom;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}