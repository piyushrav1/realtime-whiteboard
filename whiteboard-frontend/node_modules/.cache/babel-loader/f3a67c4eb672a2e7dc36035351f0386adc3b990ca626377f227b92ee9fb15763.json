{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gamin\\\\OneDrive\\\\Desktop\\\\Project\\\\Whiteboard\\\\live-whiteboard-app\\\\whiteboard-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// whiteboard-frontend/src/App.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Stage, Layer, Line } from 'react-konva';\nimport { io } from 'socket.io-client';\nimport './App.css'; // For basic styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000'); // Connect to your backend\n\nfunction App() {\n  _s();\n  const [lines, setLines] = useState([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const stageRef = useRef(null); // Reference to the Konva Stage\n\n  // --- Socket.IO Event Listeners ---\n  useEffect(() => {\n    socket.on('connect', () => {\n      console.log('Connected to backend Socket.IO:', socket.id);\n    });\n    socket.on('disconnect', () => {\n      console.log('Disconnected from backend Socket.IO');\n    });\n\n    // Listen for 'draw' events from other users\n    socket.on('draw', data => {\n      // Add the received line data to our local state\n      setLines(prevLines => [...prevLines, data]);\n    });\n\n    // Clean up socket listeners on component unmount\n    return () => {\n      socket.off('connect');\n      socket.off('disconnect');\n      socket.off('draw');\n    };\n  }, []); // Run once on component mount\n\n  // --- Drawing Logic ---\n  const handleMouseDown = e => {\n    setIsDrawing(true);\n    const pos = e.target.getStage().getPointerPosition();\n    setLines(prevLines => [...prevLines, {\n      tool: 'pen',\n      points: [pos.x, pos.y],\n      stroke: 'black',\n      strokeWidth: 5\n    }]);\n  };\n  const handleMouseMove = e => {\n    if (!isDrawing) {\n      return;\n    }\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    let lastLine = lines[lines.length - 1];\n    if (lastLine) {\n      // Add point to the last line\n      lastLine.points = lastLine.points.concat([point.x, point.y]);\n      const newLines = [...lines];\n      newLines.splice(lines.length - 1, 1, lastLine); // Replace the last line with the updated one\n      setLines(newLines);\n\n      // Emit the drawing data to the backend\n      // We send the entire line object each time it's updated for simplicity\n      // For performance, you might only send the new point and line index\n      socket.emit('draw', lastLine);\n    }\n  };\n  const handleMouseUp = () => {\n    setIsDrawing(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Real-time Whiteboard PoC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stage, {\n      width: window.innerWidth * 0.9 // 90% of window width\n      ,\n      height: window.innerHeight * 0.8 // 80% of window height\n      ,\n      onMouseDown: handleMouseDown,\n      onMousemove: handleMouseMove,\n      onMouseup: handleMouseUp,\n      onTouchStart: handleMouseDown // For touch devices\n      ,\n      onTouchMove: handleMouseMove,\n      onTouchEnd: handleMouseUp,\n      ref: stageRef,\n      style: {\n        border: '1px solid #ccc',\n        cursor: 'crosshair',\n        backgroundColor: 'white'\n      },\n      children: /*#__PURE__*/_jsxDEV(Layer, {\n        children: lines.map((line, i) => /*#__PURE__*/_jsxDEV(Line, {\n          points: line.points,\n          stroke: line.stroke,\n          strokeWidth: line.strokeWidth,\n          tension: 0.5 // Smooth lines\n          ,\n          lineCap: \"round\",\n          lineJoin: \"round\",\n          globalCompositeOperation: line.tool === 'eraser' ? 'destination-out' : 'source-over'\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Open this app in multiple browser tabs to see real-time drawing!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"DndzqM3K0GFlq3VzDr7CKgXxDXk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Stage","Layer","Line","io","jsxDEV","_jsxDEV","socket","App","_s","lines","setLines","isDrawing","setIsDrawing","stageRef","on","console","log","id","data","prevLines","off","handleMouseDown","e","pos","target","getStage","getPointerPosition","tool","points","x","y","stroke","strokeWidth","handleMouseMove","stage","point","lastLine","length","concat","newLines","splice","emit","handleMouseUp","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","window","innerWidth","height","innerHeight","onMouseDown","onMousemove","onMouseup","onTouchStart","onTouchMove","onTouchEnd","ref","style","border","cursor","backgroundColor","map","line","i","tension","lineCap","lineJoin","globalCompositeOperation","_c","$RefreshReg$"],"sources":["C:/Users/gamin/OneDrive/Desktop/Project/Whiteboard/live-whiteboard-app/whiteboard-frontend/src/App.js"],"sourcesContent":["// whiteboard-frontend/src/App.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Stage, Layer, Line } from 'react-konva';\nimport { io } from 'socket.io-client';\nimport './App.css'; // For basic styling\n\nconst socket = io('http://localhost:5000'); // Connect to your backend\n\nfunction App() {\n  const [lines, setLines] = useState([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const stageRef = useRef(null); // Reference to the Konva Stage\n\n  // --- Socket.IO Event Listeners ---\n  useEffect(() => {\n    socket.on('connect', () => {\n      console.log('Connected to backend Socket.IO:', socket.id);\n    });\n\n    socket.on('disconnect', () => {\n      console.log('Disconnected from backend Socket.IO');\n    });\n\n    // Listen for 'draw' events from other users\n    socket.on('draw', (data) => {\n      // Add the received line data to our local state\n      setLines((prevLines) => [...prevLines, data]);\n    });\n\n    // Clean up socket listeners on component unmount\n    return () => {\n      socket.off('connect');\n      socket.off('disconnect');\n      socket.off('draw');\n    };\n  }, []); // Run once on component mount\n\n  // --- Drawing Logic ---\n  const handleMouseDown = (e) => {\n    setIsDrawing(true);\n    const pos = e.target.getStage().getPointerPosition();\n    setLines((prevLines) => [\n      ...prevLines,\n      { tool: 'pen', points: [pos.x, pos.y], stroke: 'black', strokeWidth: 5 },\n    ]);\n  };\n\n  const handleMouseMove = (e) => {\n    if (!isDrawing) {\n      return;\n    }\n\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    let lastLine = lines[lines.length - 1];\n\n    if (lastLine) {\n      // Add point to the last line\n      lastLine.points = lastLine.points.concat([point.x, point.y]);\n      const newLines = [...lines];\n      newLines.splice(lines.length - 1, 1, lastLine); // Replace the last line with the updated one\n      setLines(newLines);\n\n      // Emit the drawing data to the backend\n      // We send the entire line object each time it's updated for simplicity\n      // For performance, you might only send the new point and line index\n      socket.emit('draw', lastLine);\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDrawing(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Real-time Whiteboard PoC</h1>\n      <Stage\n        width={window.innerWidth * 0.9} // 90% of window width\n        height={window.innerHeight * 0.8} // 80% of window height\n        onMouseDown={handleMouseDown}\n        onMousemove={handleMouseMove}\n        onMouseup={handleMouseUp}\n        onTouchStart={handleMouseDown} // For touch devices\n        onTouchMove={handleMouseMove}\n        onTouchEnd={handleMouseUp}\n        ref={stageRef}\n        style={{ border: '1px solid #ccc', cursor: 'crosshair', backgroundColor: 'white' }}\n      >\n        <Layer>\n          {lines.map((line, i) => (\n            <Line\n              key={i}\n              points={line.points}\n              stroke={line.stroke}\n              strokeWidth={line.strokeWidth}\n              tension={0.5} // Smooth lines\n              lineCap=\"round\"\n              lineJoin=\"round\"\n              globalCompositeOperation={\n                line.tool === 'eraser' ? 'destination-out' : 'source-over'\n              }\n            />\n          ))}\n        </Layer>\n      </Stage>\n      <p>Open this app in multiple browser tabs to see real-time drawing!</p>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}