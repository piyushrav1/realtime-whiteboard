{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gamin\\\\OneDrive\\\\Desktop\\\\Project\\\\Whiteboard\\\\live-whiteboard-app\\\\whiteboard-frontend\\\\src\\\\components\\\\WhiteboardRoom.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Stage, Layer, Line, Rect, Circle, Text, Transformer } from 'react-konva';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport './WhiteboardRoom.css';\n\n// IMPORTANT: Make sure YOUR_PC_IP_ADDRESS is replaced with your actual PC's IP.\n// Example: const socket = io('http://192.168.1.100:5000');\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io('http://192.168.1.102:5000');\n\n// Helper component for selectable/transformable Konva nodes\nconst ColoredRect = ({\n  shapeProps,\n  isSelected,\n  onSelect,\n  onChange\n}) => {\n  _s();\n  const shapeRef = useRef();\n  const trRef = useRef(); // Ref for the Konva Transformer\n\n  // This effect ensures the transformer is attached when a shape becomes selected\n  useEffect(() => {\n    if (isSelected && trRef.current && shapeRef.current) {\n      trRef.current.nodes([shapeRef.current]);\n      trRef.current.getLayer().batchDraw();\n    } else if (!isSelected && trRef.current) {\n      // If deselected, remove nodes from transformer\n      trRef.current.nodes([]);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected, shapeProps.type]); // Add shapeProps.type as dependency to re-run on type change if needed\n\n  // Handle double click for text editing or general selection behavior\n  const handleDblClick = e => {\n    // First, ensure this object becomes selected.\n    // This will cause the Transformer to mount if it's not already.\n    onSelect(); // This sets `selectedId` in parent, making `isSelected` true for this shape\n\n    // If it's a text object, proceed with text editing logic\n    if (shapeProps.type === 'text') {\n      // Defer the text editing to allow React to render the Transformer first\n      setTimeout(() => {\n        // Check if transformer is still available after the timeout\n        if (trRef.current) {\n          // Hide transformer to allow direct text editing\n          trRef.current.nodes([]);\n          trRef.current.getLayer().batchDraw();\n        }\n        const textNode = shapeRef.current;\n        if (!textNode) return; // Safeguard\n\n        textNode.hide(); // Hide the Konva Text node\n        textNode.getLayer().batchDraw();\n        const textPosition = textNode.absolutePosition();\n        // Get the stage's bounding rect to correctly position the HTML textarea\n        const stageBox = textNode.getStage().container().getBoundingClientRect();\n\n        // Create a textarea over the Konva text\n        const textarea = document.createElement('textarea');\n        document.body.appendChild(textarea);\n        textarea.value = textNode.text();\n        textarea.style.position = 'absolute';\n        textarea.style.top = textPosition.y + stageBox.top + 'px'; // Adjust for stage position on page\n        textarea.style.left = textPosition.x + stageBox.left + 'px'; // Adjust for stage position on page\n        textarea.style.width = textNode.width() - textNode.padding() * 2 + 'px';\n        textarea.style.height = textNode.height() - textNode.padding() * 2 + 5 + 'px'; // +5 for cursor\n        textarea.style.fontSize = textNode.fontSize() + 'px';\n        textarea.style.border = 'none';\n        textarea.style.padding = '0px';\n        textarea.style.margin = '0px';\n        textarea.style.overflow = 'hidden';\n        textarea.style.background = 'none';\n        textarea.style.outline = 'none';\n        textarea.style.resize = 'none';\n        textarea.style.lineHeight = textNode.lineHeight();\n        textarea.style.fontFamily = textNode.fontFamily();\n        textarea.style.transformOrigin = 'left top';\n        textarea.style.textAlign = textNode.align();\n        textarea.style.color = textNode.fill();\n        textarea.style.transform = `rotateZ(${textNode.rotation()}deg)`;\n        textarea.style.zIndex = '9999'; // Ensure it's above other elements\n\n        textarea.focus();\n        const removeTextarea = () => {\n          document.body.removeChild(textarea);\n          textNode.show();\n          textNode.getLayer().batchDraw();\n          // onSelect(null); // Optional: Deselect the text after editing if desired\n        };\n        textarea.addEventListener('keydown', e => {\n          // Hide on enter (but allow shift+enter for new line)\n          if (e.key === 'Enter' && !e.shiftKey) {\n            textarea.blur(); // Trigger blur to save on Enter\n          }\n          // Escape for cancelling\n          if (e.key === 'Escape') {\n            removeTextarea(); // Remove without saving on Escape\n          }\n        });\n        textarea.addEventListener('blur', () => {\n          onChange({\n            ...shapeProps,\n            text: textarea.value\n          });\n          removeTextarea();\n        });\n      }, 0); // Small timeout to allow React to render updates\n    } else {\n      // For other shapes, just the onSelect() called at the beginning is enough\n      // No additional logic here for non-text shapes on double-click\n    }\n  };\n\n  // Render the appropriate Konva shape based on type\n  const currentKonvaNode = shapeProps.type === 'rect' ? /*#__PURE__*/_jsxDEV(Rect, {\n    onClick: onSelect,\n    onTap: onSelect,\n    onDblClick: handleDblClick,\n    onDblTap: handleDblClick,\n    ref: shapeRef,\n    ...shapeProps,\n    draggable: true,\n    onDragEnd: e => {\n      onChange({\n        ...shapeProps,\n        x: e.target.x(),\n        y: e.target.y()\n      });\n    },\n    onTransformEnd: e => {\n      // transformer is changing scale of the node\n      const node = shapeRef.current;\n      const scaleX = node.scaleX();\n      const scaleY = node.scaleY();\n\n      // reset scale to 1 and apply all changes to width, height, rotation\n      node.scaleX(1);\n      node.scaleY(1);\n      onChange({\n        ...shapeProps,\n        x: node.x(),\n        y: node.y(),\n        width: Math.max(5, node.width() * scaleX),\n        height: Math.max(5, node.height() * scaleY),\n        rotation: node.rotation()\n      });\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 7\n  }, this) : shapeProps.type === 'circle' ? /*#__PURE__*/_jsxDEV(Circle, {\n    onClick: onSelect,\n    onTap: onSelect,\n    onDblClick: handleDblClick,\n    onDblTap: handleDblClick,\n    ref: shapeRef,\n    ...shapeProps,\n    draggable: true,\n    onDragEnd: e => {\n      onChange({\n        ...shapeProps,\n        x: e.target.x(),\n        y: e.target.y()\n      });\n    },\n    onTransformEnd: e => {\n      const node = shapeRef.current;\n      const scaleX = node.scaleX(); // Circle scales uniformly\n      node.scaleX(1);\n      node.scaleY(1);\n      onChange({\n        ...shapeProps,\n        x: node.x(),\n        y: node.y(),\n        radius: Math.max(5, node.radius() * scaleX),\n        rotation: node.rotation()\n      });\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 7\n  }, this) : shapeProps.type === 'text' ? /*#__PURE__*/_jsxDEV(Text, {\n    onClick: onSelect,\n    onTap: onSelect,\n    onDblClick: handleDblClick // Double click to edit text\n    ,\n    onDblTap: handleDblClick,\n    ref: shapeRef,\n    ...shapeProps,\n    draggable: true,\n    onDragEnd: e => {\n      onChange({\n        ...shapeProps,\n        x: e.target.x(),\n        y: e.target.y()\n      });\n    },\n    onTransformEnd: e => {\n      const node = shapeRef.current;\n      const scaleX = node.scaleX();\n      // Text often scales font based on X scale for simplicity, keep Y for consistency\n      // This ensures font size scales with width\n      const scaleY = node.scaleY();\n      node.scaleX(1);\n      node.scaleY(1);\n      onChange({\n        ...shapeProps,\n        x: node.x(),\n        y: node.y(),\n        width: Math.max(5, node.width() * scaleX),\n        height: Math.max(5, node.height() * scaleY),\n        // Keep height scalable too\n        fontSize: Math.max(8, node.fontSize() * scaleX),\n        // Scale font size with width\n        rotation: node.rotation()\n      });\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 7\n  }, this) : null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [currentKonvaNode, isSelected && currentKonvaNode &&\n    /*#__PURE__*/\n    // Also check currentKonvaNode exists before rendering Transformer\n    _jsxDEV(Transformer, {\n      ref: trRef,\n      boundBoxFunc: (oldBox, newBox) => {\n        // Limit minimal size\n        if (newBox.width < 5 || newBox.height < 5) {\n          return oldBox;\n        }\n        return newBox;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(ColoredRect, \"utqYnE1qYQB2JA/ZIFXzHjUZTOc=\");\n_c = ColoredRect;\nfunction WhiteboardRoom() {\n  _s2();\n  const {\n    roomName\n  } = useParams();\n  const navigate = useNavigate();\n  // UPDATED: 'lines' now holds all drawing objects\n  const [drawingObjects, setDrawingObjects] = useState([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const stageRef = useRef(null);\n  const currentObjectId = useRef(null); // Renamed from currentLineId\n\n  const [chatMessages, setChatMessages] = useState([]);\n  const [newChatMessage, setNewChatMessage] = useState('');\n  const chatMessagesEndRef = useRef(null);\n  const [stageDimensions, setStageDimensions] = useState({\n    width: window.innerWidth * 0.7,\n    height: window.innerHeight * 0.8\n  });\n  const canvasContainerRef = useRef(null);\n\n  // UPDATED: Tool properties\n  const [tool, setTool] = useState('pen'); // 'pen', 'eraser', 'select', 'rect', 'circle', 'text'\n  const [strokeColor, setStrokeColor] = useState('#000000'); // Default black\n  const [strokeWidth, setStrokeWidth] = useState(5); // Default width\n  const [fillColor, setFillColor] = useState('transparent'); // For shapes\n  const [selectedId, selectShape] = useState(null); // For selection tool\n\n  // --- Socket.IO Event Listeners & Room Joining ---\n  useEffect(() => {\n    if (!roomName) {\n      navigate('/');\n      return;\n    }\n    socket.emit('joinRoom', roomName);\n    socket.on('connect', () => {\n      console.log('Connected to backend Socket.IO:', socket.id);\n    });\n    socket.on('disconnect', () => {\n      console.log('Disconnected from backend Socket.IO');\n      alert('Disconnected from server. Please refresh.');\n      navigate('/');\n    });\n\n    // UPDATED: Receive an object with drawingObjects (formerly lines) and messages\n    socket.on('whiteboardState', data => {\n      console.log('Received initial room state:', data);\n      setDrawingObjects(data.lines); // 'lines' field in data now contains all objects\n      setChatMessages(data.messages);\n    });\n\n    // UPDATED: Listen for generic drawingStarted events\n    socket.on('drawingStarted', newObject => {\n      setDrawingObjects(prevObjects => [...prevObjects, newObject]);\n    });\n\n    // UPDATED: Listen for drawing events (only for lines)\n    socket.on('drawing', data => {\n      const {\n        objectId,\n        newPoints\n      } = data;\n      setDrawingObjects(prevObjects => {\n        return prevObjects.map(obj => {\n          if (obj.id === objectId && obj.type === 'line') {\n            return {\n              ...obj,\n              points: obj.points.concat(newPoints)\n            };\n          }\n          return obj;\n        });\n      });\n    });\n\n    // UPDATED: Listen for drawingFinished events\n    socket.on('drawingFinished', data => {\n      const {\n        objectId,\n        finalObjectState\n      } = data;\n      setDrawingObjects(prevObjects => {\n        return prevObjects.map(obj => {\n          if (obj.id === objectId) {\n            return finalObjectState;\n          }\n          return obj;\n        });\n      });\n    });\n\n    // NEW: Listen for object updates (move, resize, edit text)\n    socket.on('objectUpdated', data => {\n      const {\n        objectId,\n        newAttributes\n      } = data;\n      setDrawingObjects(prevObjects => {\n        return prevObjects.map(obj => {\n          if (obj.id === objectId) {\n            return {\n              ...obj,\n              ...newAttributes\n            };\n          }\n          return obj;\n        });\n      });\n    });\n\n    // NEW: Listen for whiteboard cleared event\n    socket.on('whiteboardCleared', () => {\n      setDrawingObjects([]); // Clear all objects locally\n      selectShape(null); // Deselect any selected object\n      console.log('Whiteboard cleared by another user.');\n    });\n    socket.on('chatMessage', message => {\n      setChatMessages(prevMessages => [...prevMessages, message]);\n    });\n    socket.on('userJoined', username => {\n      setChatMessages(prevMessages => [...prevMessages, {\n        username: 'System',\n        message: `${username} has joined the room.`,\n        timestamp: new Date()\n      }]);\n    });\n\n    // NEW: Resize observer to update Konva stage dimensions\n    const handleResize = () => {\n      if (canvasContainerRef.current) {\n        const {\n          clientWidth,\n          clientHeight\n        } = canvasContainerRef.current;\n        setStageDimensions({\n          width: clientWidth,\n          height: clientHeight\n        });\n      }\n    };\n    window.addEventListener('resize', handleResize);\n    // Initial dimensions when component mounts\n    handleResize();\n    return () => {\n      window.removeEventListener('resize', handleResize); // Clean up resize listener\n      socket.off('connect');\n      socket.off('disconnect');\n      socket.off('whiteboardState');\n      socket.off('drawingStarted');\n      socket.off('drawing');\n      socket.off('drawingFinished');\n      socket.off('objectUpdated');\n      socket.off('whiteboardCleared');\n      socket.off('chatMessage');\n      socket.off('userJoined');\n    };\n  }, [roomName, navigate]);\n  useEffect(() => {\n    var _chatMessagesEndRef$c;\n    (_chatMessagesEndRef$c = chatMessagesEndRef.current) === null || _chatMessagesEndRef$c === void 0 ? void 0 : _chatMessagesEndRef$c.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [chatMessages]);\n\n  // Function to handle changes to drawing objects (for Konva Transformer)\n  const handleObjectChange = updatedObject => {\n    setDrawingObjects(prevObjects => {\n      return prevObjects.map(obj => {\n        if (obj.id === updatedObject.id) {\n          return updatedObject;\n        }\n        return obj;\n      });\n    });\n    // Emit update to backend only for changes (x,y,width,height,rotation,text etc.)\n    socket.emit('updateObject', {\n      roomName,\n      objectId: updatedObject.id,\n      newAttributes: updatedObject\n    });\n  };\n\n  // --- Drawing Logic (UPDATED for various tools) ---\n  const handleMouseDown = e => {\n    // Deselect if clicking on empty space and tool is 'select'\n    const clickedOnEmpty = e.target === e.target.getStage();\n    if (tool === 'select' && clickedOnEmpty) {\n      selectShape(null);\n      return; // No drawing for select tool\n    }\n    if (e.evt.type === 'touchstart') {\n      e.evt.preventDefault();\n    }\n    setIsDrawing(true);\n    const pos = e.target.getStage().getPointerPosition();\n    const newObjectId = `${socket.id}-${Date.now()}`;\n    currentObjectId.current = newObjectId;\n    selectShape(null); // Deselect existing objects when starting a new drawing\n\n    let newObject;\n    switch (tool) {\n      case 'pen':\n      case 'eraser':\n        newObject = {\n          id: newObjectId,\n          type: 'line',\n          // Always 'line' for pen/eraser\n          points: [pos.x, pos.y],\n          stroke: tool === 'eraser' ? '#FFFFFF' : strokeColor,\n          // Eraser color is whiteboard background\n          strokeWidth: tool === 'eraser' ? strokeWidth + 10 : strokeWidth,\n          // Eraser slightly wider\n          tool: tool // Keep tool property for eraser's composite operation (Konva only)\n        };\n        break;\n      case 'rect':\n        newObject = {\n          id: newObjectId,\n          type: 'rect',\n          x: pos.x,\n          y: pos.y,\n          width: 0,\n          height: 0,\n          // Will be updated on mouse move\n          stroke: strokeColor,\n          strokeWidth: strokeWidth,\n          fill: fillColor\n        };\n        break;\n      case 'circle':\n        newObject = {\n          id: newObjectId,\n          type: 'circle',\n          x: pos.x,\n          y: pos.y,\n          radius: 0,\n          // Will be updated on mouse move\n          stroke: strokeColor,\n          strokeWidth: strokeWidth,\n          fill: fillColor\n        };\n        break;\n      case 'text':\n        // For text, we'll create a default text box on click\n        newObject = {\n          id: newObjectId,\n          type: 'text',\n          x: pos.x,\n          y: pos.y,\n          text: 'Double click to edit',\n          fontSize: 20,\n          fontFamily: 'Arial',\n          stroke: strokeColor,\n          // Border for text (optional)\n          fill: strokeColor,\n          // Text color is fill property for Konva Text\n          width: 200,\n          // Default width for wrapping\n          height: 30,\n          // Default height, will expand with text\n          rotation: 0\n        };\n        setIsDrawing(false); // Text is not \"drawn\" by dragging, it's placed\n        socket.emit('startDrawing', {\n          roomName,\n          object: newObject\n        });\n        setDrawingObjects(prevObjects => [...prevObjects, newObject]);\n        selectShape(newObjectId); // Select the new text object for immediate editing/moving\n        return;\n      // Exit early for text tool as it's not a drag-and-draw\n      case 'select':\n        // Selection handled by ColoredRect's onClick\n        setIsDrawing(false);\n        return;\n      default:\n        return;\n      // No action for unknown tools\n    }\n    setDrawingObjects(prevObjects => [...prevObjects, newObject]);\n    socket.emit('startDrawing', {\n      roomName,\n      object: newObject\n    });\n  };\n  const handleMouseMove = e => {\n    if (!isDrawing) {\n      return;\n    }\n    if (e.evt.type === 'touchmove') {\n      e.evt.preventDefault();\n    }\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    let currentObject = drawingObjects.find(obj => obj.id === currentObjectId.current);\n    if (currentObject) {\n      const newObjects = [...drawingObjects];\n      const index = newObjects.findIndex(obj => obj.id === currentObject.id);\n      switch (currentObject.type) {\n        case 'line':\n          currentObject.points = currentObject.points.concat([point.x, point.y]);\n          newObjects[index] = currentObject;\n          setDrawingObjects(newObjects);\n          socket.emit('drawing', {\n            roomName,\n            objectId: currentObjectId.current,\n            newPoints: [point.x, point.y]\n          });\n          break;\n        case 'rect':\n          // Calculate width/height from initial click (x,y) to current pointer (point.x, point.y)\n          // Handle drawing from right-to-left or bottom-to-top\n          const newX = Math.min(currentObject.x, point.x);\n          const newY = Math.min(currentObject.y, point.y);\n          const newWidth = Math.abs(point.x - currentObject.x);\n          const newHeight = Math.abs(point.y - currentObject.y);\n          currentObject = {\n            ...currentObject,\n            x: newX,\n            y: newY,\n            width: newWidth,\n            height: newHeight\n          };\n          newObjects[index] = currentObject;\n          setDrawingObjects(newObjects);\n          socket.emit('updateObject', {\n            roomName,\n            objectId: currentObjectId.current,\n            newAttributes: {\n              x: newX,\n              y: newY,\n              width: newWidth,\n              height: newHeight\n            }\n          });\n          break;\n        case 'circle':\n          // Calculate radius based on distance from initial click to current pointer\n          currentObject.radius = Math.sqrt(Math.pow(point.x - currentObject.x, 2) + Math.pow(point.y - currentObject.y, 2));\n          newObjects[index] = currentObject;\n          setDrawingObjects(newObjects);\n          socket.emit('updateObject', {\n            roomName,\n            objectId: currentObjectId.current,\n            newAttributes: {\n              radius: currentObject.radius\n            }\n          });\n          break;\n        default:\n          break;\n        // Do nothing for other types during mousemove\n      }\n    }\n  };\n  const handleMouseUp = () => {\n    setIsDrawing(false);\n    // Only emit endDrawing if it was an actual drawing tool (not text or select)\n    if (tool !== 'select' && tool !== 'text') {\n      const finalObject = drawingObjects.find(obj => obj.id === currentObjectId.current);\n      if (finalObject) {\n        // Ensure final object state reflects the tool used for drawing (e.g., eraser's width)\n        socket.emit('endDrawing', {\n          roomName,\n          objectId: currentObjectId.current,\n          finalObjectState: finalObject\n        });\n      }\n    }\n    currentObjectId.current = null; // Clear the current object ID\n  };\n  const handleSendChatMessage = () => {\n    if (newChatMessage.trim()) {\n      socket.emit('chatMessage', {\n        roomName,\n        message: newChatMessage.trim()\n      });\n      setNewChatMessage('');\n    }\n  };\n  const handleChatKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSendChatMessage();\n    }\n  };\n  const handleClearWhiteboard = () => {\n    if (window.confirm('Are you sure you want to clear the entire whiteboard? This cannot be undone!')) {\n      socket.emit('clearWhiteboard', roomName);\n    }\n  };\n\n  // Determine cursor based on active tool\n  const getCursorStyle = () => {\n    switch (tool) {\n      case 'pen':\n      case 'eraser':\n      case 'rect':\n      case 'circle':\n        return 'crosshair';\n      case 'text':\n        return 'text';\n      case 'select':\n        return selectedId ? 'move' : 'default';\n      // Cursor changes when hovering over selected object\n      default:\n        return 'default';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"whiteboard-page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"whiteboard-main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Whiteboard Room: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"room-name\",\n            children: roomName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 602,\n            columnNumber: 32\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => navigate('/'),\n          className: \"leave-button\",\n          children: \"Leave Room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tool-palette\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tool-button ${tool === 'select' ? 'active' : ''}`,\n          onClick: () => {\n            setTool('select');\n            selectShape(null);\n          },\n          title: \"Select & Move\",\n          children: \"\\uD83D\\uDC46 Select\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tool-button ${tool === 'pen' ? 'active' : ''}`,\n          onClick: () => setTool('pen'),\n          title: \"Pen\",\n          children: \"\\u270F\\uFE0F Pen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tool-button ${tool === 'eraser' ? 'active' : ''}`,\n          onClick: () => setTool('eraser'),\n          title: \"Eraser\",\n          children: \"\\uD83E\\uDDFD Eraser\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tool-separator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 631,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tool-button ${tool === 'rect' ? 'active' : ''}`,\n          onClick: () => setTool('rect'),\n          title: \"Rectangle\",\n          children: \"\\u25FB\\uFE0F Rectangle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tool-button ${tool === 'circle' ? 'active' : ''}`,\n          onClick: () => setTool('circle'),\n          title: \"Circle\",\n          children: \"\\u26AB Circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tool-button ${tool === 'text' ? 'active' : ''}`,\n          onClick: () => setTool('text'),\n          title: \"Text\",\n          children: \"\\uD83C\\uDD70\\uFE0F Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 646,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tool-separator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 654,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"color\",\n          className: \"color-picker\",\n          value: strokeColor,\n          onChange: e => {\n            setStrokeColor(e.target.value);\n            if (tool !== 'eraser') setTool('pen'); // Auto switch to pen if not eraser\n          },\n          title: \"Stroke Color\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"color\",\n          className: \"color-picker\",\n          value: fillColor,\n          onChange: e => {\n            setFillColor(e.target.value);\n            // Auto switch to a shape tool if changing fill, but not if current tool is line/eraser\n            if (tool === 'pen' || tool === 'eraser') {\n              setTool('rect'); // Default to rect if pen/eraser is active\n            }\n          },\n          title: \"Fill Color\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"1\",\n          max: \"20\",\n          value: strokeWidth,\n          onChange: e => setStrokeWidth(parseInt(e.target.value, 10)),\n          className: \"stroke-width-slider\",\n          title: `Stroke Width: ${strokeWidth}px`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 680,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stroke-width-display\",\n          children: [strokeWidth, \"px\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tool-separator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 691,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"tool-button\",\n          onClick: handleClearWhiteboard,\n          title: \"Clear All\",\n          children: \"\\uD83D\\uDDD1\\uFE0F Clear All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"whiteboard-canvas-container\",\n        ref: canvasContainerRef,\n        children: /*#__PURE__*/_jsxDEV(Stage, {\n          width: stageDimensions.width,\n          height: stageDimensions.height,\n          onMouseDown: handleMouseDown,\n          onMousemove: handleMouseMove,\n          onMouseup: handleMouseUp,\n          onTouchStart: handleMouseDown,\n          onTouchMove: handleMouseMove,\n          onTouchEnd: handleMouseUp,\n          ref: stageRef,\n          style: {\n            cursor: getCursorStyle(),\n            // Dynamic cursor based on tool\n            backgroundColor: 'white',\n            touchAction: 'none'\n          },\n          children: /*#__PURE__*/_jsxDEV(Layer, {\n            children: drawingObjects.map((obj, i) => {\n              // Render different Konva components based on object type\n              if (obj.type === 'line') {\n                return /*#__PURE__*/_jsxDEV(Line, {\n                  points: obj.points,\n                  stroke: obj.stroke,\n                  strokeWidth: obj.strokeWidth,\n                  tension: 0.5,\n                  lineCap: \"round\",\n                  lineJoin: \"round\",\n                  globalCompositeOperation: obj.tool === 'eraser' ? 'destination-out' : 'source-over'\n                }, obj.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 720,\n                  columnNumber: 21\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(ColoredRect, {\n                  shapeProps: obj,\n                  isSelected: obj.id === selectedId,\n                  onSelect: () => {\n                    selectShape(obj.id);\n                    setTool('select'); // Automatically switch to select tool when an object is clicked\n                  },\n                  onChange: handleObjectChange\n                }, obj.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 735,\n                  columnNumber: 21\n                }, this);\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 715,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 699,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 698,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"hint-text margin-top-md\",\n        children: \"Use the tools above to draw and collaborate!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 751,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Room Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 757,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: [chatMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chat-username\",\n            children: [msg.username, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 761,\n            columnNumber: 15\n          }, this), \" \", msg.message, /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chat-timestamp\",\n            children: new Date(msg.timestamp).toLocaleTimeString([], {\n              hour: '2-digit',\n              minute: '2-digit'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 762,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 760,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: chatMessagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 767,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 758,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your message...\",\n          value: newChatMessage,\n          onChange: e => setNewChatMessage(e.target.value),\n          onKeyPress: handleChatKeyPress,\n          className: \"chat-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 770,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendChatMessage,\n          className: \"send-button\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 778,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 769,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 756,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 599,\n    columnNumber: 5\n  }, this);\n}\n_s2(WhiteboardRoom, \"6eHQ9wmBKTUrTRpiQz4xi3cIyyU=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c2 = WhiteboardRoom;\nexport default WhiteboardRoom;\nvar _c, _c2;\n$RefreshReg$(_c, \"ColoredRect\");\n$RefreshReg$(_c2, \"WhiteboardRoom\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Stage","Layer","Line","Rect","Circle","Text","Transformer","useParams","useNavigate","io","jsxDEV","_jsxDEV","Fragment","_Fragment","socket","ColoredRect","shapeProps","isSelected","onSelect","onChange","_s","shapeRef","trRef","current","nodes","getLayer","batchDraw","type","handleDblClick","e","setTimeout","textNode","hide","textPosition","absolutePosition","stageBox","getStage","container","getBoundingClientRect","textarea","document","createElement","body","appendChild","value","text","style","position","top","y","left","x","width","padding","height","fontSize","border","margin","overflow","background","outline","resize","lineHeight","fontFamily","transformOrigin","textAlign","align","color","fill","transform","rotation","zIndex","focus","removeTextarea","removeChild","show","addEventListener","key","shiftKey","blur","currentKonvaNode","onClick","onTap","onDblClick","onDblTap","ref","draggable","onDragEnd","target","onTransformEnd","node","scaleX","scaleY","Math","max","fileName","_jsxFileName","lineNumber","columnNumber","radius","children","boundBoxFunc","oldBox","newBox","_c","WhiteboardRoom","_s2","roomName","navigate","drawingObjects","setDrawingObjects","isDrawing","setIsDrawing","stageRef","currentObjectId","chatMessages","setChatMessages","newChatMessage","setNewChatMessage","chatMessagesEndRef","stageDimensions","setStageDimensions","window","innerWidth","innerHeight","canvasContainerRef","tool","setTool","strokeColor","setStrokeColor","strokeWidth","setStrokeWidth","fillColor","setFillColor","selectedId","selectShape","emit","on","console","log","id","alert","data","lines","messages","newObject","prevObjects","objectId","newPoints","map","obj","points","concat","finalObjectState","newAttributes","message","prevMessages","username","timestamp","Date","handleResize","clientWidth","clientHeight","removeEventListener","off","_chatMessagesEndRef$c","scrollIntoView","behavior","handleObjectChange","updatedObject","handleMouseDown","clickedOnEmpty","evt","preventDefault","pos","getPointerPosition","newObjectId","now","stroke","object","handleMouseMove","stage","point","currentObject","find","newObjects","index","findIndex","newX","min","newY","newWidth","abs","newHeight","sqrt","pow","handleMouseUp","finalObject","handleSendChatMessage","trim","handleChatKeyPress","handleClearWhiteboard","confirm","getCursorStyle","className","title","parseInt","onMouseDown","onMousemove","onMouseup","onTouchStart","onTouchMove","onTouchEnd","cursor","backgroundColor","touchAction","i","tension","lineCap","lineJoin","globalCompositeOperation","msg","toLocaleTimeString","hour","minute","placeholder","onKeyPress","_c2","$RefreshReg$"],"sources":["C:/Users/gamin/OneDrive/Desktop/Project/Whiteboard/live-whiteboard-app/whiteboard-frontend/src/components/WhiteboardRoom.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Stage, Layer, Line, Rect, Circle, Text, Transformer } from 'react-konva';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { io } from 'socket.io-client';\r\nimport './WhiteboardRoom.css';\r\n\r\n// IMPORTANT: Make sure YOUR_PC_IP_ADDRESS is replaced with your actual PC's IP.\r\n// Example: const socket = io('http://192.168.1.100:5000');\r\nconst socket = io('http://192.168.1.102:5000');\r\n\r\n// Helper component for selectable/transformable Konva nodes\r\nconst ColoredRect = ({ shapeProps, isSelected, onSelect, onChange }) => {\r\n  const shapeRef = useRef();\r\n  const trRef = useRef(); // Ref for the Konva Transformer\r\n\r\n  // This effect ensures the transformer is attached when a shape becomes selected\r\n  useEffect(() => {\r\n    if (isSelected && trRef.current && shapeRef.current) {\r\n      trRef.current.nodes([shapeRef.current]);\r\n      trRef.current.getLayer().batchDraw();\r\n    } else if (!isSelected && trRef.current) {\r\n      // If deselected, remove nodes from transformer\r\n      trRef.current.nodes([]);\r\n      trRef.current.getLayer().batchDraw();\r\n    }\r\n  }, [isSelected, shapeProps.type]); // Add shapeProps.type as dependency to re-run on type change if needed\r\n\r\n  // Handle double click for text editing or general selection behavior\r\n  const handleDblClick = (e) => {\r\n    // First, ensure this object becomes selected.\r\n    // This will cause the Transformer to mount if it's not already.\r\n    onSelect(); // This sets `selectedId` in parent, making `isSelected` true for this shape\r\n\r\n    // If it's a text object, proceed with text editing logic\r\n    if (shapeProps.type === 'text') {\r\n      // Defer the text editing to allow React to render the Transformer first\r\n      setTimeout(() => {\r\n        // Check if transformer is still available after the timeout\r\n        if (trRef.current) {\r\n          // Hide transformer to allow direct text editing\r\n          trRef.current.nodes([]);\r\n          trRef.current.getLayer().batchDraw();\r\n        }\r\n\r\n        const textNode = shapeRef.current;\r\n        if (!textNode) return; // Safeguard\r\n\r\n        textNode.hide(); // Hide the Konva Text node\r\n        textNode.getLayer().batchDraw();\r\n\r\n        const textPosition = textNode.absolutePosition();\r\n        // Get the stage's bounding rect to correctly position the HTML textarea\r\n        const stageBox = textNode.getStage().container().getBoundingClientRect();\r\n\r\n        // Create a textarea over the Konva text\r\n        const textarea = document.createElement('textarea');\r\n        document.body.appendChild(textarea);\r\n\r\n        textarea.value = textNode.text();\r\n        textarea.style.position = 'absolute';\r\n        textarea.style.top = (textPosition.y + stageBox.top) + 'px'; // Adjust for stage position on page\r\n        textarea.style.left = (textPosition.x + stageBox.left) + 'px'; // Adjust for stage position on page\r\n        textarea.style.width = textNode.width() - textNode.padding() * 2 + 'px';\r\n        textarea.style.height = textNode.height() - textNode.padding() * 2 + 5 + 'px'; // +5 for cursor\r\n        textarea.style.fontSize = textNode.fontSize() + 'px';\r\n        textarea.style.border = 'none';\r\n        textarea.style.padding = '0px';\r\n        textarea.style.margin = '0px';\r\n        textarea.style.overflow = 'hidden';\r\n        textarea.style.background = 'none';\r\n        textarea.style.outline = 'none';\r\n        textarea.style.resize = 'none';\r\n        textarea.style.lineHeight = textNode.lineHeight();\r\n        textarea.style.fontFamily = textNode.fontFamily();\r\n        textarea.style.transformOrigin = 'left top';\r\n        textarea.style.textAlign = textNode.align();\r\n        textarea.style.color = textNode.fill();\r\n        textarea.style.transform = `rotateZ(${textNode.rotation()}deg)`;\r\n        textarea.style.zIndex = '9999'; // Ensure it's above other elements\r\n\r\n        textarea.focus();\r\n\r\n        const removeTextarea = () => {\r\n          document.body.removeChild(textarea);\r\n          textNode.show();\r\n          textNode.getLayer().batchDraw();\r\n          // onSelect(null); // Optional: Deselect the text after editing if desired\r\n        };\r\n\r\n        textarea.addEventListener('keydown', (e) => {\r\n          // Hide on enter (but allow shift+enter for new line)\r\n          if (e.key === 'Enter' && !e.shiftKey) {\r\n            textarea.blur(); // Trigger blur to save on Enter\r\n          }\r\n          // Escape for cancelling\r\n          if (e.key === 'Escape') {\r\n            removeTextarea(); // Remove without saving on Escape\r\n          }\r\n        });\r\n\r\n        textarea.addEventListener('blur', () => {\r\n          onChange({\r\n            ...shapeProps,\r\n            text: textarea.value,\r\n          });\r\n          removeTextarea();\r\n        });\r\n      }, 0); // Small timeout to allow React to render updates\r\n    } else {\r\n      // For other shapes, just the onSelect() called at the beginning is enough\r\n      // No additional logic here for non-text shapes on double-click\r\n    }\r\n  };\r\n\r\n  // Render the appropriate Konva shape based on type\r\n  const currentKonvaNode = (\r\n    shapeProps.type === 'rect' ? (\r\n      <Rect\r\n        onClick={onSelect}\r\n        onTap={onSelect}\r\n        onDblClick={handleDblClick}\r\n        onDblTap={handleDblClick}\r\n        ref={shapeRef}\r\n        {...shapeProps}\r\n        draggable\r\n        onDragEnd={(e) => {\r\n          onChange({\r\n            ...shapeProps,\r\n            x: e.target.x(),\r\n            y: e.target.y(),\r\n          });\r\n        }}\r\n        onTransformEnd={(e) => {\r\n          // transformer is changing scale of the node\r\n          const node = shapeRef.current;\r\n          const scaleX = node.scaleX();\r\n          const scaleY = node.scaleY();\r\n\r\n          // reset scale to 1 and apply all changes to width, height, rotation\r\n          node.scaleX(1);\r\n          node.scaleY(1);\r\n          onChange({\r\n            ...shapeProps,\r\n            x: node.x(),\r\n            y: node.y(),\r\n            width: Math.max(5, node.width() * scaleX),\r\n            height: Math.max(5, node.height() * scaleY),\r\n            rotation: node.rotation(),\r\n          });\r\n        }}\r\n      />\r\n    ) : shapeProps.type === 'circle' ? (\r\n      <Circle\r\n        onClick={onSelect}\r\n        onTap={onSelect}\r\n        onDblClick={handleDblClick}\r\n        onDblTap={handleDblClick}\r\n        ref={shapeRef}\r\n        {...shapeProps}\r\n        draggable\r\n        onDragEnd={(e) => {\r\n          onChange({\r\n            ...shapeProps,\r\n            x: e.target.x(),\r\n            y: e.target.y(),\r\n          });\r\n        }}\r\n        onTransformEnd={(e) => {\r\n          const node = shapeRef.current;\r\n          const scaleX = node.scaleX(); // Circle scales uniformly\r\n          node.scaleX(1);\r\n          node.scaleY(1);\r\n          onChange({\r\n            ...shapeProps,\r\n            x: node.x(),\r\n            y: node.y(),\r\n            radius: Math.max(5, node.radius() * scaleX),\r\n            rotation: node.rotation(),\r\n          });\r\n        }}\r\n      />\r\n    ) : shapeProps.type === 'text' ? (\r\n      <Text\r\n        onClick={onSelect}\r\n        onTap={onSelect}\r\n        onDblClick={handleDblClick} // Double click to edit text\r\n        onDblTap={handleDblClick}\r\n        ref={shapeRef}\r\n        {...shapeProps}\r\n        draggable\r\n        onDragEnd={(e) => {\r\n          onChange({\r\n            ...shapeProps,\r\n            x: e.target.x(),\r\n            y: e.target.y(),\r\n          });\r\n        }}\r\n        onTransformEnd={(e) => {\r\n          const node = shapeRef.current;\r\n          const scaleX = node.scaleX();\r\n          // Text often scales font based on X scale for simplicity, keep Y for consistency\r\n          // This ensures font size scales with width\r\n          const scaleY = node.scaleY();\r\n          node.scaleX(1);\r\n          node.scaleY(1);\r\n          onChange({\r\n            ...shapeProps,\r\n            x: node.x(),\r\n            y: node.y(),\r\n            width: Math.max(5, node.width() * scaleX),\r\n            height: Math.max(5, node.height() * scaleY), // Keep height scalable too\r\n            fontSize: Math.max(8, node.fontSize() * scaleX), // Scale font size with width\r\n            rotation: node.rotation(),\r\n          });\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {currentKonvaNode}\r\n      {isSelected && currentKonvaNode && ( // Also check currentKonvaNode exists before rendering Transformer\r\n        <Transformer\r\n          ref={trRef}\r\n          boundBoxFunc={(oldBox, newBox) => {\r\n            // Limit minimal size\r\n            if (newBox.width < 5 || newBox.height < 5) {\r\n              return oldBox;\r\n            }\r\n            return newBox;\r\n          }}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nfunction WhiteboardRoom() {\r\n  const { roomName } = useParams();\r\n  const navigate = useNavigate();\r\n  // UPDATED: 'lines' now holds all drawing objects\r\n  const [drawingObjects, setDrawingObjects] = useState([]);\r\n  const [isDrawing, setIsDrawing] = useState(false);\r\n  const stageRef = useRef(null);\r\n  const currentObjectId = useRef(null); // Renamed from currentLineId\r\n\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [newChatMessage, setNewChatMessage] = useState('');\r\n  const chatMessagesEndRef = useRef(null);\r\n\r\n  const [stageDimensions, setStageDimensions] = useState({\r\n    width: window.innerWidth * 0.7,\r\n    height: window.innerHeight * 0.8\r\n  });\r\n  const canvasContainerRef = useRef(null);\r\n\r\n  // UPDATED: Tool properties\r\n  const [tool, setTool] = useState('pen'); // 'pen', 'eraser', 'select', 'rect', 'circle', 'text'\r\n  const [strokeColor, setStrokeColor] = useState('#000000'); // Default black\r\n  const [strokeWidth, setStrokeWidth] = useState(5); // Default width\r\n  const [fillColor, setFillColor] = useState('transparent'); // For shapes\r\n  const [selectedId, selectShape] = useState(null); // For selection tool\r\n\r\n  // --- Socket.IO Event Listeners & Room Joining ---\r\n  useEffect(() => {\r\n    if (!roomName) {\r\n      navigate('/');\r\n      return;\r\n    }\r\n\r\n    socket.emit('joinRoom', roomName);\r\n\r\n    socket.on('connect', () => {\r\n      console.log('Connected to backend Socket.IO:', socket.id);\r\n    });\r\n\r\n    socket.on('disconnect', () => {\r\n      console.log('Disconnected from backend Socket.IO');\r\n      alert('Disconnected from server. Please refresh.');\r\n      navigate('/');\r\n    });\r\n\r\n    // UPDATED: Receive an object with drawingObjects (formerly lines) and messages\r\n    socket.on('whiteboardState', (data) => {\r\n      console.log('Received initial room state:', data);\r\n      setDrawingObjects(data.lines); // 'lines' field in data now contains all objects\r\n      setChatMessages(data.messages);\r\n    });\r\n\r\n    // UPDATED: Listen for generic drawingStarted events\r\n    socket.on('drawingStarted', (newObject) => {\r\n        setDrawingObjects((prevObjects) => [...prevObjects, newObject]);\r\n    });\r\n\r\n    // UPDATED: Listen for drawing events (only for lines)\r\n    socket.on('drawing', (data) => {\r\n        const { objectId, newPoints } = data;\r\n        setDrawingObjects((prevObjects) => {\r\n            return prevObjects.map((obj) => {\r\n                if (obj.id === objectId && obj.type === 'line') {\r\n                    return { ...obj, points: obj.points.concat(newPoints) };\r\n                }\r\n                return obj;\r\n            });\r\n        });\r\n    });\r\n\r\n    // UPDATED: Listen for drawingFinished events\r\n    socket.on('drawingFinished', (data) => {\r\n        const { objectId, finalObjectState } = data;\r\n        setDrawingObjects((prevObjects) => {\r\n            return prevObjects.map((obj) => {\r\n                if (obj.id === objectId) {\r\n                    return finalObjectState;\r\n                }\r\n                return obj;\r\n            });\r\n        });\r\n    });\r\n\r\n    // NEW: Listen for object updates (move, resize, edit text)\r\n    socket.on('objectUpdated', (data) => {\r\n        const { objectId, newAttributes } = data;\r\n        setDrawingObjects((prevObjects) => {\r\n            return prevObjects.map((obj) => {\r\n                if (obj.id === objectId) {\r\n                    return { ...obj, ...newAttributes };\r\n                }\r\n                return obj;\r\n            });\r\n        });\r\n    });\r\n\r\n    // NEW: Listen for whiteboard cleared event\r\n    socket.on('whiteboardCleared', () => {\r\n        setDrawingObjects([]); // Clear all objects locally\r\n        selectShape(null); // Deselect any selected object\r\n        console.log('Whiteboard cleared by another user.');\r\n    });\r\n\r\n\r\n    socket.on('chatMessage', (message) => {\r\n        setChatMessages((prevMessages) => [...prevMessages, message]);\r\n    });\r\n\r\n    socket.on('userJoined', (username) => {\r\n        setChatMessages((prevMessages) => [...prevMessages, {\r\n            username: 'System',\r\n            message: `${username} has joined the room.`,\r\n            timestamp: new Date()\r\n        }]);\r\n    });\r\n\r\n    // NEW: Resize observer to update Konva stage dimensions\r\n    const handleResize = () => {\r\n      if (canvasContainerRef.current) {\r\n        const { clientWidth, clientHeight } = canvasContainerRef.current;\r\n        setStageDimensions({ width: clientWidth, height: clientHeight });\r\n      }\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    // Initial dimensions when component mounts\r\n    handleResize();\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize); // Clean up resize listener\r\n      socket.off('connect');\r\n      socket.off('disconnect');\r\n      socket.off('whiteboardState');\r\n      socket.off('drawingStarted');\r\n      socket.off('drawing');\r\n      socket.off('drawingFinished');\r\n      socket.off('objectUpdated');\r\n      socket.off('whiteboardCleared');\r\n      socket.off('chatMessage');\r\n      socket.off('userJoined');\r\n    };\r\n  }, [roomName, navigate]);\r\n\r\n  useEffect(() => {\r\n    chatMessagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [chatMessages]);\r\n\r\n  // Function to handle changes to drawing objects (for Konva Transformer)\r\n  const handleObjectChange = (updatedObject) => {\r\n    setDrawingObjects((prevObjects) => {\r\n      return prevObjects.map((obj) => {\r\n        if (obj.id === updatedObject.id) {\r\n          return updatedObject;\r\n        }\r\n        return obj;\r\n      });\r\n    });\r\n    // Emit update to backend only for changes (x,y,width,height,rotation,text etc.)\r\n    socket.emit('updateObject', { roomName, objectId: updatedObject.id, newAttributes: updatedObject });\r\n  };\r\n\r\n\r\n  // --- Drawing Logic (UPDATED for various tools) ---\r\n  const handleMouseDown = (e) => {\r\n    // Deselect if clicking on empty space and tool is 'select'\r\n    const clickedOnEmpty = e.target === e.target.getStage();\r\n    if (tool === 'select' && clickedOnEmpty) {\r\n      selectShape(null);\r\n      return; // No drawing for select tool\r\n    }\r\n\r\n    if (e.evt.type === 'touchstart') {\r\n        e.evt.preventDefault();\r\n    }\r\n    setIsDrawing(true);\r\n    const pos = e.target.getStage().getPointerPosition();\r\n    const newObjectId = `${socket.id}-${Date.now()}`;\r\n    currentObjectId.current = newObjectId;\r\n    selectShape(null); // Deselect existing objects when starting a new drawing\r\n\r\n    let newObject;\r\n    switch (tool) {\r\n      case 'pen':\r\n      case 'eraser':\r\n        newObject = {\r\n          id: newObjectId,\r\n          type: 'line', // Always 'line' for pen/eraser\r\n          points: [pos.x, pos.y],\r\n          stroke: tool === 'eraser' ? '#FFFFFF' : strokeColor, // Eraser color is whiteboard background\r\n          strokeWidth: tool === 'eraser' ? strokeWidth + 10 : strokeWidth, // Eraser slightly wider\r\n          tool: tool // Keep tool property for eraser's composite operation (Konva only)\r\n        };\r\n        break;\r\n      case 'rect':\r\n        newObject = {\r\n          id: newObjectId,\r\n          type: 'rect',\r\n          x: pos.x,\r\n          y: pos.y,\r\n          width: 0, height: 0, // Will be updated on mouse move\r\n          stroke: strokeColor,\r\n          strokeWidth: strokeWidth,\r\n          fill: fillColor,\r\n        };\r\n        break;\r\n      case 'circle':\r\n        newObject = {\r\n          id: newObjectId,\r\n          type: 'circle',\r\n          x: pos.x,\r\n          y: pos.y,\r\n          radius: 0, // Will be updated on mouse move\r\n          stroke: strokeColor,\r\n          strokeWidth: strokeWidth,\r\n          fill: fillColor,\r\n        };\r\n        break;\r\n      case 'text': // For text, we'll create a default text box on click\r\n        newObject = {\r\n          id: newObjectId,\r\n          type: 'text',\r\n          x: pos.x,\r\n          y: pos.y,\r\n          text: 'Double click to edit',\r\n          fontSize: 20,\r\n          fontFamily: 'Arial',\r\n          stroke: strokeColor, // Border for text (optional)\r\n          fill: strokeColor, // Text color is fill property for Konva Text\r\n          width: 200, // Default width for wrapping\r\n          height: 30, // Default height, will expand with text\r\n          rotation: 0\r\n        };\r\n        setIsDrawing(false); // Text is not \"drawn\" by dragging, it's placed\r\n        socket.emit('startDrawing', { roomName, object: newObject });\r\n        setDrawingObjects((prevObjects) => [...prevObjects, newObject]);\r\n        selectShape(newObjectId); // Select the new text object for immediate editing/moving\r\n        return; // Exit early for text tool as it's not a drag-and-draw\r\n      case 'select':\r\n        // Selection handled by ColoredRect's onClick\r\n        setIsDrawing(false);\r\n        return;\r\n      default:\r\n        return; // No action for unknown tools\r\n    }\r\n\r\n    setDrawingObjects((prevObjects) => [...prevObjects, newObject]);\r\n    socket.emit('startDrawing', { roomName, object: newObject });\r\n  };\r\n\r\n  const handleMouseMove = (e) => {\r\n    if (!isDrawing) {\r\n      return;\r\n    }\r\n    if (e.evt.type === 'touchmove') {\r\n        e.evt.preventDefault();\r\n    }\r\n    const stage = e.target.getStage();\r\n    const point = stage.getPointerPosition();\r\n    let currentObject = drawingObjects.find(obj => obj.id === currentObjectId.current);\r\n\r\n    if (currentObject) {\r\n      const newObjects = [...drawingObjects];\r\n      const index = newObjects.findIndex(obj => obj.id === currentObject.id);\r\n\r\n      switch (currentObject.type) {\r\n        case 'line':\r\n          currentObject.points = currentObject.points.concat([point.x, point.y]);\r\n          newObjects[index] = currentObject;\r\n          setDrawingObjects(newObjects);\r\n          socket.emit('drawing', { roomName, objectId: currentObjectId.current, newPoints: [point.x, point.y] });\r\n          break;\r\n        case 'rect':\r\n          // Calculate width/height from initial click (x,y) to current pointer (point.x, point.y)\r\n          // Handle drawing from right-to-left or bottom-to-top\r\n          const newX = Math.min(currentObject.x, point.x);\r\n          const newY = Math.min(currentObject.y, point.y);\r\n          const newWidth = Math.abs(point.x - currentObject.x);\r\n          const newHeight = Math.abs(point.y - currentObject.y);\r\n\r\n          currentObject = {\r\n              ...currentObject,\r\n              x: newX,\r\n              y: newY,\r\n              width: newWidth,\r\n              height: newHeight\r\n          };\r\n          newObjects[index] = currentObject;\r\n          setDrawingObjects(newObjects);\r\n          socket.emit('updateObject', { roomName, objectId: currentObjectId.current, newAttributes: {\r\n              x: newX, y: newY, width: newWidth, height: newHeight\r\n          }});\r\n          break;\r\n        case 'circle':\r\n          // Calculate radius based on distance from initial click to current pointer\r\n          currentObject.radius = Math.sqrt(\r\n            Math.pow(point.x - currentObject.x, 2) + Math.pow(point.y - currentObject.y, 2)\r\n          );\r\n          newObjects[index] = currentObject;\r\n          setDrawingObjects(newObjects);\r\n          socket.emit('updateObject', { roomName, objectId: currentObjectId.current, newAttributes: {\r\n              radius: currentObject.radius\r\n          }});\r\n          break;\r\n        default:\r\n          break; // Do nothing for other types during mousemove\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    setIsDrawing(false);\r\n    // Only emit endDrawing if it was an actual drawing tool (not text or select)\r\n    if (tool !== 'select' && tool !== 'text') {\r\n      const finalObject = drawingObjects.find(obj => obj.id === currentObjectId.current);\r\n      if (finalObject) {\r\n          // Ensure final object state reflects the tool used for drawing (e.g., eraser's width)\r\n          socket.emit('endDrawing', { roomName, objectId: currentObjectId.current, finalObjectState: finalObject });\r\n      }\r\n    }\r\n    currentObjectId.current = null; // Clear the current object ID\r\n  };\r\n\r\n  const handleSendChatMessage = () => {\r\n    if (newChatMessage.trim()) {\r\n      socket.emit('chatMessage', { roomName, message: newChatMessage.trim() });\r\n      setNewChatMessage('');\r\n    }\r\n  };\r\n\r\n  const handleChatKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleSendChatMessage();\r\n    }\r\n  };\r\n\r\n  const handleClearWhiteboard = () => {\r\n    if (window.confirm('Are you sure you want to clear the entire whiteboard? This cannot be undone!')) {\r\n      socket.emit('clearWhiteboard', roomName);\r\n    }\r\n  };\r\n\r\n  // Determine cursor based on active tool\r\n  const getCursorStyle = () => {\r\n    switch (tool) {\r\n      case 'pen':\r\n      case 'eraser':\r\n      case 'rect':\r\n      case 'circle':\r\n        return 'crosshair';\r\n      case 'text':\r\n        return 'text';\r\n      case 'select':\r\n        return selectedId ? 'move' : 'default'; // Cursor changes when hovering over selected object\r\n      default:\r\n        return 'default';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"whiteboard-page-container\">\r\n      <div className=\"whiteboard-main-content\">\r\n        <div className=\"header\">\r\n          <h1>Whiteboard Room: <span className=\"room-name\">{roomName}</span></h1>\r\n          <button onClick={() => navigate('/')} className=\"leave-button\">\r\n            Leave Room\r\n          </button>\r\n        </div>\r\n\r\n        {/* Professional Tool Palette */}\r\n        <div className=\"tool-palette\">\r\n          <button\r\n            className={`tool-button ${tool === 'select' ? 'active' : ''}`}\r\n            onClick={() => { setTool('select'); selectShape(null); }}\r\n            title=\"Select & Move\"\r\n          >\r\n            👆 Select\r\n          </button>\r\n          <button\r\n            className={`tool-button ${tool === 'pen' ? 'active' : ''}`}\r\n            onClick={() => setTool('pen')}\r\n            title=\"Pen\"\r\n          >\r\n            ✏️ Pen\r\n          </button>\r\n          <button\r\n            className={`tool-button ${tool === 'eraser' ? 'active' : ''}`}\r\n            onClick={() => setTool('eraser')}\r\n            title=\"Eraser\"\r\n          >\r\n            🧽 Eraser\r\n          </button>\r\n          <div className=\"tool-separator\"></div> {/* Visual separator */}\r\n          <button\r\n            className={`tool-button ${tool === 'rect' ? 'active' : ''}`}\r\n            onClick={() => setTool('rect')}\r\n            title=\"Rectangle\"\r\n          >\r\n            ◻️ Rectangle\r\n          </button>\r\n          <button\r\n            className={`tool-button ${tool === 'circle' ? 'active' : ''}`}\r\n            onClick={() => setTool('circle')}\r\n            title=\"Circle\"\r\n          >\r\n            ⚫ Circle\r\n          </button>\r\n          <button\r\n            className={`tool-button ${tool === 'text' ? 'active' : ''}`}\r\n            onClick={() => setTool('text')}\r\n            title=\"Text\"\r\n          >\r\n            🅰️ Text\r\n          </button>\r\n\r\n          <div className=\"tool-separator\"></div>\r\n\r\n          <input\r\n            type=\"color\"\r\n            className=\"color-picker\"\r\n            value={strokeColor}\r\n            onChange={(e) => {\r\n                setStrokeColor(e.target.value);\r\n                if (tool !== 'eraser') setTool('pen'); // Auto switch to pen if not eraser\r\n            }}\r\n            title=\"Stroke Color\"\r\n          />\r\n          <input\r\n            type=\"color\"\r\n            className=\"color-picker\"\r\n            value={fillColor}\r\n            onChange={(e) => {\r\n                setFillColor(e.target.value);\r\n                // Auto switch to a shape tool if changing fill, but not if current tool is line/eraser\r\n                if (tool === 'pen' || tool === 'eraser') {\r\n                    setTool('rect'); // Default to rect if pen/eraser is active\r\n                }\r\n            }}\r\n            title=\"Fill Color\"\r\n          />\r\n\r\n          <input\r\n            type=\"range\"\r\n            min=\"1\"\r\n            max=\"20\"\r\n            value={strokeWidth}\r\n            onChange={(e) => setStrokeWidth(parseInt(e.target.value, 10))}\r\n            className=\"stroke-width-slider\"\r\n            title={`Stroke Width: ${strokeWidth}px`}\r\n          />\r\n          <span className=\"stroke-width-display\">{strokeWidth}px</span>\r\n\r\n          <div className=\"tool-separator\"></div>\r\n\r\n          <button className=\"tool-button\" onClick={handleClearWhiteboard} title=\"Clear All\">\r\n            🗑️ Clear All\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"whiteboard-canvas-container\" ref={canvasContainerRef}>\r\n          <Stage\r\n            width={stageDimensions.width}\r\n            height={stageDimensions.height}\r\n            onMouseDown={handleMouseDown}\r\n            onMousemove={handleMouseMove}\r\n            onMouseup={handleMouseUp}\r\n            onTouchStart={handleMouseDown}\r\n            onTouchMove={handleMouseMove}\r\n            onTouchEnd={handleMouseUp}\r\n            ref={stageRef}\r\n            style={{\r\n                cursor: getCursorStyle(), // Dynamic cursor based on tool\r\n                backgroundColor: 'white',\r\n                touchAction: 'none'\r\n            }}\r\n          >\r\n            <Layer>\r\n              {drawingObjects.map((obj, i) => {\r\n                // Render different Konva components based on object type\r\n                if (obj.type === 'line') {\r\n                  return (\r\n                    <Line\r\n                      key={obj.id}\r\n                      points={obj.points}\r\n                      stroke={obj.stroke}\r\n                      strokeWidth={obj.strokeWidth}\r\n                      tension={0.5}\r\n                      lineCap=\"round\"\r\n                      lineJoin=\"round\"\r\n                      globalCompositeOperation={\r\n                        obj.tool === 'eraser' ? 'destination-out' : 'source-over'\r\n                      }\r\n                    />\r\n                  );\r\n                } else {\r\n                  return (\r\n                    <ColoredRect\r\n                      key={obj.id}\r\n                      shapeProps={obj}\r\n                      isSelected={obj.id === selectedId}\r\n                      onSelect={() => {\r\n                        selectShape(obj.id);\r\n                        setTool('select'); // Automatically switch to select tool when an object is clicked\r\n                      }}\r\n                      onChange={handleObjectChange}\r\n                    />\r\n                  );\r\n                }\r\n              })}\r\n            </Layer>\r\n          </Stage>\r\n        </div>\r\n        <p className=\"hint-text margin-top-md\">\r\n          Use the tools above to draw and collaborate!\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"chat-sidebar\">\r\n        <h2>Room Chat</h2>\r\n        <div className=\"chat-messages\">\r\n          {chatMessages.map((msg, index) => (\r\n            <div key={index} className=\"chat-message\">\r\n              <span className=\"chat-username\">{msg.username}:</span> {msg.message}\r\n              <span className=\"chat-timestamp\">\r\n                {new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\r\n              </span>\r\n            </div>\r\n          ))}\r\n          <div ref={chatMessagesEndRef} />\r\n        </div>\r\n        <div className=\"chat-input-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Type your message...\"\r\n            value={newChatMessage}\r\n            onChange={(e) => setNewChatMessage(e.target.value)}\r\n            onKeyPress={handleChatKeyPress}\r\n            className=\"chat-input\"\r\n          />\r\n          <button onClick={handleSendChatMessage} className=\"send-button\">\r\n            Send\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WhiteboardRoom;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}