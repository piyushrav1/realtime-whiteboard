{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gamin\\\\OneDrive\\\\Desktop\\\\Project\\\\Whiteboard\\\\live-whiteboard-app\\\\whiteboard-frontend\\\\src\\\\components\\\\WhiteboardRoom.js\",\n  _s = $RefreshSig$();\n// whiteboard-frontend/src/components/WhiteboardRoom.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Stage, Layer, Line } from 'react-konva';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport './WhiteboardRoom.css';\n\n// Make sure YOUR_PC_IP_ADDRESS is replaced with your actual PC's IP.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://192.168.1.102:5000');\nfunction WhiteboardRoom() {\n  _s();\n  const {\n    roomName\n  } = useParams();\n  const navigate = useNavigate();\n  const [lines, setLines] = useState([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const stageRef = useRef(null);\n  const currentLineId = useRef(null);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [newChatMessage, setNewChatMessage] = useState('');\n  const chatMessagesEndRef = useRef(null);\n  const [stageDimensions, setStageDimensions] = useState({\n    width: window.innerWidth * 0.7,\n    height: window.innerHeight * 0.8\n  });\n  const canvasContainerRef = useRef(null);\n\n  // NEW: State for current drawing tool properties\n  const [tool, setTool] = useState('pen'); // 'pen' or 'eraser'\n  const [strokeColor, setStrokeColor] = useState('#000000'); // Default black\n  const [strokeWidth, setStrokeWidth] = useState(5); // Default width\n\n  // --- Socket.IO Event Listeners & Room Joining ---\n  useEffect(() => {\n    if (!roomName) {\n      navigate('/');\n      return;\n    }\n    socket.emit('joinRoom', roomName);\n    socket.on('connect', () => {\n      console.log('Connected to backend Socket.IO:', socket.id);\n    });\n    socket.on('disconnect', () => {\n      console.log('Disconnected from backend Socket.IO');\n      alert('Disconnected from server. Please refresh.');\n      navigate('/');\n    });\n    socket.on('whiteboardState', data => {\n      console.log('Received initial room state:', data);\n      setLines(data.lines);\n      setChatMessages(data.messages);\n    });\n    socket.on('drawingStarted', newLine => {\n      setLines(prevLines => [...prevLines, newLine]);\n    });\n    socket.on('drawing', data => {\n      const {\n        lineId,\n        newPoints\n      } = data;\n      setLines(prevLines => {\n        return prevLines.map(line => {\n          if (line.id === lineId) {\n            return {\n              ...line,\n              points: line.points.concat(newPoints)\n            };\n          }\n          return line;\n        });\n      });\n    });\n    socket.on('drawingFinished', data => {\n      const {\n        lineId,\n        finalLineState\n      } = data;\n      setLines(prevLines => {\n        return prevLines.map(line => {\n          if (line.id === lineId) {\n            return finalLineState;\n          }\n          return line;\n        });\n      });\n    });\n    socket.on('chatMessage', message => {\n      setChatMessages(prevMessages => [...prevMessages, message]);\n    });\n    socket.on('userJoined', username => {\n      setChatMessages(prevMessages => [...prevMessages, {\n        username: 'System',\n        message: `${username} has joined the room.`,\n        timestamp: new Date()\n      }]);\n    });\n    const handleResize = () => {\n      if (canvasContainerRef.current) {\n        const {\n          clientWidth,\n          clientHeight\n        } = canvasContainerRef.current;\n        setStageDimensions({\n          width: clientWidth,\n          height: clientHeight\n        });\n      }\n    };\n    window.addEventListener('resize', handleResize);\n    handleResize();\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      socket.off('connect');\n      socket.off('disconnect');\n      socket.off('whiteboardState');\n      socket.off('drawingStarted');\n      socket.off('drawing');\n      socket.off('drawingFinished');\n      socket.off('chatMessage');\n      socket.off('userJoined');\n    };\n  }, [roomName, navigate]);\n  useEffect(() => {\n    var _chatMessagesEndRef$c;\n    (_chatMessagesEndRef$c = chatMessagesEndRef.current) === null || _chatMessagesEndRef$c === void 0 ? void 0 : _chatMessagesEndRef$c.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [chatMessages]);\n\n  // --- Drawing Logic (updated to use tool, color, width states) ---\n  const handleMouseDown = e => {\n    if (e.evt.type === 'touchstart') {\n      e.evt.preventDefault();\n    }\n    setIsDrawing(true);\n    const pos = e.target.getStage().getPointerPosition();\n    const newLineId = `${socket.id}-${Date.now()}`;\n    currentLineId.current = newLineId;\n    const newLine = {\n      id: newLineId,\n      tool: tool,\n      // Use selected tool\n      points: [pos.x, pos.y],\n      stroke: strokeColor,\n      // Use selected color\n      strokeWidth: tool === 'eraser' ? strokeWidth + 10 : strokeWidth // Eraser slightly wider\n    };\n    setLines(prevLines => [...prevLines, newLine]);\n    socket.emit('startDrawing', {\n      roomName,\n      line: newLine\n    });\n  };\n  const handleMouseMove = e => {\n    if (!isDrawing) {\n      return;\n    }\n    if (e.evt.type === 'touchmove') {\n      e.evt.preventDefault();\n    }\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    let lastLine = lines.find(line => line.id === currentLineId.current);\n    if (lastLine) {\n      lastLine.points = lastLine.points.concat([point.x, point.y]);\n      setLines(prevLines => {\n        return prevLines.map(line => line.id === lastLine.id ? lastLine : line);\n      });\n      socket.emit('drawing', {\n        roomName,\n        lineId: currentLineId.current,\n        newPoints: [point.x, point.y]\n      });\n    }\n  };\n  const handleMouseUp = () => {\n    setIsDrawing(false);\n    const finalLine = lines.find(line => line.id === currentLineId.current);\n    if (finalLine) {\n      // Ensure final line state reflects the tool used for drawing (especially strokeWidth for eraser)\n      socket.emit('endDrawing', {\n        roomName,\n        lineId: currentLineId.current,\n        finalLineState: {\n          ...finalLine,\n          // Spread existing properties\n          strokeWidth: tool === 'eraser' ? strokeWidth + 10 : strokeWidth // Save the adjusted width for eraser\n        }\n      });\n    }\n    currentLineId.current = null;\n  };\n  const handleSendChatMessage = () => {\n    if (newChatMessage.trim()) {\n      socket.emit('chatMessage', {\n        roomName,\n        message: newChatMessage.trim()\n      });\n      setNewChatMessage('');\n    }\n  };\n  const handleChatKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSendChatMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"whiteboard-page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"whiteboard-main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Whiteboard Room: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"room-name\",\n            children: roomName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 32\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => navigate('/'),\n          className: \"leave-button\",\n          children: \"Leave Room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tool-palette\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tool-button ${tool === 'pen' ? 'active' : ''}`,\n          onClick: () => setTool('pen'),\n          title: \"Pen\",\n          children: \"\\u270F\\uFE0F Pen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tool-button ${tool === 'eraser' ? 'active' : ''}`,\n          onClick: () => setTool('eraser'),\n          title: \"Eraser\",\n          children: \"\\uD83E\\uDDFD Eraser\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"color\",\n          className: \"color-picker\",\n          value: strokeColor,\n          onChange: e => {\n            setStrokeColor(e.target.value);\n            setTool('pen'); // Automatically switch to pen when color is changed\n          },\n          title: \"Stroke Color\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"1\",\n          max: \"20\",\n          value: strokeWidth,\n          onChange: e => setStrokeWidth(parseInt(e.target.value, 10)),\n          className: \"stroke-width-slider\",\n          title: `Stroke Width: ${strokeWidth}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stroke-width-display\",\n          children: [strokeWidth, \"px\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"whiteboard-canvas-container\",\n        ref: canvasContainerRef,\n        children: /*#__PURE__*/_jsxDEV(Stage, {\n          width: stageDimensions.width,\n          height: stageDimensions.height,\n          onMouseDown: handleMouseDown,\n          onMousemove: handleMouseMove,\n          onMouseup: handleMouseUp,\n          onTouchStart: handleMouseDown,\n          onTouchMove: handleMouseMove,\n          onTouchEnd: handleMouseUp,\n          ref: stageRef,\n          style: {\n            cursor: 'crosshair',\n            backgroundColor: 'white',\n            touchAction: 'none'\n          },\n          children: /*#__PURE__*/_jsxDEV(Layer, {\n            children: lines.map(line => /*#__PURE__*/_jsxDEV(Line, {\n              points: line.points,\n              stroke: line.stroke,\n              strokeWidth: line.strokeWidth,\n              tension: 0.5,\n              lineCap: \"round\",\n              lineJoin: \"round\",\n              globalCompositeOperation: line.tool === 'eraser' ? 'destination-out' : 'source-over'\n            }, line.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"hint-text margin-top-md\",\n        children: \"Draw here. Open this room in another tab to see real-time collaboration.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Room Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: [chatMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chat-username\",\n            children: [msg.username, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 15\n          }, this), \" \", msg.message, /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chat-timestamp\",\n            children: new Date(msg.timestamp).toLocaleTimeString([], {\n              hour: '2-digit',\n              minute: '2-digit'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: chatMessagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your message...\",\n          value: newChatMessage,\n          onChange: e => setNewChatMessage(e.target.value),\n          onKeyPress: handleChatKeyPress,\n          className: \"chat-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendChatMessage,\n          className: \"send-button\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n}\n_s(WhiteboardRoom, \"BI1q67N9e/jTzVb6KPIIis3o3qk=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = WhiteboardRoom;\nexport default WhiteboardRoom;\nvar _c;\n$RefreshReg$(_c, \"WhiteboardRoom\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Stage","Layer","Line","useParams","useNavigate","io","jsxDEV","_jsxDEV","socket","WhiteboardRoom","_s","roomName","navigate","lines","setLines","isDrawing","setIsDrawing","stageRef","currentLineId","chatMessages","setChatMessages","newChatMessage","setNewChatMessage","chatMessagesEndRef","stageDimensions","setStageDimensions","width","window","innerWidth","height","innerHeight","canvasContainerRef","tool","setTool","strokeColor","setStrokeColor","strokeWidth","setStrokeWidth","emit","on","console","log","id","alert","data","messages","newLine","prevLines","lineId","newPoints","map","line","points","concat","finalLineState","message","prevMessages","username","timestamp","Date","handleResize","current","clientWidth","clientHeight","addEventListener","removeEventListener","off","_chatMessagesEndRef$c","scrollIntoView","behavior","handleMouseDown","e","evt","type","preventDefault","pos","target","getStage","getPointerPosition","newLineId","now","x","y","stroke","handleMouseMove","stage","point","lastLine","find","handleMouseUp","finalLine","handleSendChatMessage","trim","handleChatKeyPress","key","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","value","onChange","min","max","parseInt","ref","onMouseDown","onMousemove","onMouseup","onTouchStart","onTouchMove","onTouchEnd","style","cursor","backgroundColor","touchAction","tension","lineCap","lineJoin","globalCompositeOperation","msg","index","toLocaleTimeString","hour","minute","placeholder","onKeyPress","_c","$RefreshReg$"],"sources":["C:/Users/gamin/OneDrive/Desktop/Project/Whiteboard/live-whiteboard-app/whiteboard-frontend/src/components/WhiteboardRoom.js"],"sourcesContent":["// whiteboard-frontend/src/components/WhiteboardRoom.js\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Stage, Layer, Line } from 'react-konva';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { io } from 'socket.io-client';\r\nimport './WhiteboardRoom.css';\r\n\r\n// Make sure YOUR_PC_IP_ADDRESS is replaced with your actual PC's IP.\r\nconst socket = io('http://192.168.1.102:5000');\r\n\r\nfunction WhiteboardRoom() {\r\n  const { roomName } = useParams();\r\n  const navigate = useNavigate();\r\n  const [lines, setLines] = useState([]);\r\n  const [isDrawing, setIsDrawing] = useState(false);\r\n  const stageRef = useRef(null);\r\n  const currentLineId = useRef(null);\r\n\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [newChatMessage, setNewChatMessage] = useState('');\r\n  const chatMessagesEndRef = useRef(null);\r\n\r\n  const [stageDimensions, setStageDimensions] = useState({\r\n    width: window.innerWidth * 0.7,\r\n    height: window.innerHeight * 0.8\r\n  });\r\n  const canvasContainerRef = useRef(null);\r\n\r\n  // NEW: State for current drawing tool properties\r\n  const [tool, setTool] = useState('pen'); // 'pen' or 'eraser'\r\n  const [strokeColor, setStrokeColor] = useState('#000000'); // Default black\r\n  const [strokeWidth, setStrokeWidth] = useState(5); // Default width\r\n\r\n  // --- Socket.IO Event Listeners & Room Joining ---\r\n  useEffect(() => {\r\n    if (!roomName) {\r\n      navigate('/');\r\n      return;\r\n    }\r\n\r\n    socket.emit('joinRoom', roomName);\r\n\r\n    socket.on('connect', () => {\r\n      console.log('Connected to backend Socket.IO:', socket.id);\r\n    });\r\n\r\n    socket.on('disconnect', () => {\r\n      console.log('Disconnected from backend Socket.IO');\r\n      alert('Disconnected from server. Please refresh.');\r\n      navigate('/');\r\n    });\r\n\r\n    socket.on('whiteboardState', (data) => {\r\n      console.log('Received initial room state:', data);\r\n      setLines(data.lines);\r\n      setChatMessages(data.messages);\r\n    });\r\n\r\n    socket.on('drawingStarted', (newLine) => {\r\n        setLines((prevLines) => [...prevLines, newLine]);\r\n    });\r\n\r\n    socket.on('drawing', (data) => {\r\n        const { lineId, newPoints } = data;\r\n        setLines((prevLines) => {\r\n            return prevLines.map((line) => {\r\n                if (line.id === lineId) {\r\n                    return { ...line, points: line.points.concat(newPoints) };\r\n                }\r\n                return line;\r\n            });\r\n        });\r\n    });\r\n\r\n    socket.on('drawingFinished', (data) => {\r\n        const { lineId, finalLineState } = data;\r\n        setLines((prevLines) => {\r\n            return prevLines.map((line) => {\r\n                if (line.id === lineId) {\r\n                    return finalLineState;\r\n                }\r\n                return line;\r\n            });\r\n        });\r\n    });\r\n\r\n    socket.on('chatMessage', (message) => {\r\n        setChatMessages((prevMessages) => [...prevMessages, message]);\r\n    });\r\n\r\n    socket.on('userJoined', (username) => {\r\n        setChatMessages((prevMessages) => [...prevMessages, {\r\n            username: 'System',\r\n            message: `${username} has joined the room.`,\r\n            timestamp: new Date()\r\n        }]);\r\n    });\r\n\r\n    const handleResize = () => {\r\n      if (canvasContainerRef.current) {\r\n        const { clientWidth, clientHeight } = canvasContainerRef.current;\r\n        setStageDimensions({ width: clientWidth, height: clientHeight });\r\n      }\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    handleResize();\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n      socket.off('connect');\r\n      socket.off('disconnect');\r\n      socket.off('whiteboardState');\r\n      socket.off('drawingStarted');\r\n      socket.off('drawing');\r\n      socket.off('drawingFinished');\r\n      socket.off('chatMessage');\r\n      socket.off('userJoined');\r\n    };\r\n  }, [roomName, navigate]);\r\n\r\n  useEffect(() => {\r\n    chatMessagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [chatMessages]);\r\n\r\n  // --- Drawing Logic (updated to use tool, color, width states) ---\r\n  const handleMouseDown = (e) => {\r\n    if (e.evt.type === 'touchstart') {\r\n        e.evt.preventDefault();\r\n    }\r\n    setIsDrawing(true);\r\n    const pos = e.target.getStage().getPointerPosition();\r\n    const newLineId = `${socket.id}-${Date.now()}`;\r\n    currentLineId.current = newLineId;\r\n\r\n    const newLine = {\r\n      id: newLineId,\r\n      tool: tool,             // Use selected tool\r\n      points: [pos.x, pos.y],\r\n      stroke: strokeColor,    // Use selected color\r\n      strokeWidth: tool === 'eraser' ? strokeWidth + 10 : strokeWidth, // Eraser slightly wider\r\n    };\r\n\r\n    setLines((prevLines) => [...prevLines, newLine]);\r\n    socket.emit('startDrawing', { roomName, line: newLine });\r\n  };\r\n\r\n  const handleMouseMove = (e) => {\r\n    if (!isDrawing) {\r\n      return;\r\n    }\r\n    if (e.evt.type === 'touchmove') {\r\n        e.evt.preventDefault();\r\n    }\r\n    const stage = e.target.getStage();\r\n    const point = stage.getPointerPosition();\r\n    let lastLine = lines.find(line => line.id === currentLineId.current);\r\n    if (lastLine) {\r\n      lastLine.points = lastLine.points.concat([point.x, point.y]);\r\n      setLines((prevLines) => {\r\n          return prevLines.map(line => line.id === lastLine.id ? lastLine : line);\r\n      });\r\n      socket.emit('drawing', { roomName, lineId: currentLineId.current, newPoints: [point.x, point.y] });\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    setIsDrawing(false);\r\n    const finalLine = lines.find(line => line.id === currentLineId.current);\r\n    if (finalLine) {\r\n        // Ensure final line state reflects the tool used for drawing (especially strokeWidth for eraser)\r\n        socket.emit('endDrawing', { roomName, lineId: currentLineId.current, finalLineState: {\r\n            ...finalLine, // Spread existing properties\r\n            strokeWidth: tool === 'eraser' ? strokeWidth + 10 : strokeWidth // Save the adjusted width for eraser\r\n        }});\r\n    }\r\n    currentLineId.current = null;\r\n  };\r\n\r\n  const handleSendChatMessage = () => {\r\n    if (newChatMessage.trim()) {\r\n      socket.emit('chatMessage', { roomName, message: newChatMessage.trim() });\r\n      setNewChatMessage('');\r\n    }\r\n  };\r\n\r\n  const handleChatKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleSendChatMessage();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"whiteboard-page-container\">\r\n      <div className=\"whiteboard-main-content\">\r\n        <div className=\"header\">\r\n          <h1>Whiteboard Room: <span className=\"room-name\">{roomName}</span></h1>\r\n          <button onClick={() => navigate('/')} className=\"leave-button\">\r\n            Leave Room\r\n          </button>\r\n        </div>\r\n\r\n        {/* NEW: Tool Palette */}\r\n        <div className=\"tool-palette\">\r\n          <button\r\n            className={`tool-button ${tool === 'pen' ? 'active' : ''}`}\r\n            onClick={() => setTool('pen')}\r\n            title=\"Pen\"\r\n          >\r\n            ✏️ Pen\r\n          </button>\r\n          <button\r\n            className={`tool-button ${tool === 'eraser' ? 'active' : ''}`}\r\n            onClick={() => setTool('eraser')}\r\n            title=\"Eraser\"\r\n          >\r\n            🧽 Eraser\r\n          </button>\r\n\r\n          <input\r\n            type=\"color\"\r\n            className=\"color-picker\"\r\n            value={strokeColor}\r\n            onChange={(e) => {\r\n                setStrokeColor(e.target.value);\r\n                setTool('pen'); // Automatically switch to pen when color is changed\r\n            }}\r\n            title=\"Stroke Color\"\r\n          />\r\n\r\n          <input\r\n            type=\"range\"\r\n            min=\"1\"\r\n            max=\"20\"\r\n            value={strokeWidth}\r\n            onChange={(e) => setStrokeWidth(parseInt(e.target.value, 10))}\r\n            className=\"stroke-width-slider\"\r\n            title={`Stroke Width: ${strokeWidth}`}\r\n          />\r\n          <span className=\"stroke-width-display\">{strokeWidth}px</span>\r\n        </div>\r\n\r\n        <div className=\"whiteboard-canvas-container\" ref={canvasContainerRef}>\r\n          <Stage\r\n            width={stageDimensions.width}\r\n            height={stageDimensions.height}\r\n            onMouseDown={handleMouseDown}\r\n            onMousemove={handleMouseMove}\r\n            onMouseup={handleMouseUp}\r\n            onTouchStart={handleMouseDown}\r\n            onTouchMove={handleMouseMove}\r\n            onTouchEnd={handleMouseUp}\r\n            ref={stageRef}\r\n            style={{\r\n                cursor: 'crosshair',\r\n                backgroundColor: 'white',\r\n                touchAction: 'none'\r\n            }}\r\n          >\r\n            <Layer>\r\n              {lines.map((line) => (\r\n                <Line\r\n                  key={line.id}\r\n                  points={line.points}\r\n                  stroke={line.stroke}\r\n                  strokeWidth={line.strokeWidth}\r\n                  tension={0.5}\r\n                  lineCap=\"round\"\r\n                  lineJoin=\"round\"\r\n                  globalCompositeOperation={\r\n                    line.tool === 'eraser' ? 'destination-out' : 'source-over'\r\n                  }\r\n                />\r\n              ))}\r\n            </Layer>\r\n          </Stage>\r\n        </div>\r\n        <p className=\"hint-text margin-top-md\">\r\n          Draw here. Open this room in another tab to see real-time collaboration.\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"chat-sidebar\">\r\n        <h2>Room Chat</h2>\r\n        <div className=\"chat-messages\">\r\n          {chatMessages.map((msg, index) => (\r\n            <div key={index} className=\"chat-message\">\r\n              <span className=\"chat-username\">{msg.username}:</span> {msg.message}\r\n              <span className=\"chat-timestamp\">\r\n                {new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\r\n              </span>\r\n            </div>\r\n          ))}\r\n          <div ref={chatMessagesEndRef} />\r\n        </div>\r\n        <div className=\"chat-input-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Type your message...\"\r\n            value={newChatMessage}\r\n            onChange={(e) => setNewChatMessage(e.target.value)}\r\n            onKeyPress={handleChatKeyPress}\r\n            className=\"chat-input\"\r\n          />\r\n          <button onClick={handleSendChatMessage} className=\"send-button\">\r\n            Send\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WhiteboardRoom;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}