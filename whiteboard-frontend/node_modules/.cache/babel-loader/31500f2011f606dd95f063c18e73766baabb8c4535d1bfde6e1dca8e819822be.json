{"ast":null,"code":"'use strict';\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar _a = require('./util'),\n  flatMap = _a.flatMap,\n  guessBrowser = _a.guessBrowser,\n  guessBrowserVersion = _a.guessBrowserVersion;\nvar getSdpFormat = require('./util/sdp').getSdpFormat;\nvar guess = guessBrowser();\nvar guessVersion = guessBrowserVersion();\nvar isChrome = guess === 'chrome';\nvar isFirefox = guess === 'firefox';\nvar isSafari = guess === 'safari';\nvar chromeMajorVersion = isChrome ? guessVersion.major : null;\nvar CHROME_LEGACY_MAX_AUDIO_LEVEL = 32767;\n/**\n * Helper function to find a specific stat from a report.\n * Browsers provide the stats report as a Map,\n * but Citrix provides stats report as an array.\n * @private\n */\nfunction getStatById(report, id) {\n  if (typeof report.get === 'function') {\n    return report.get(id);\n  }\n  return report.find(function (s) {\n    return s.id === id;\n  });\n}\n/**\n * Filter the RTCStatsReport to only include stats related to a specific track.\n * This function is designed for use with Citrix, where getStats(track) is not supported.\n * It includes specific logic to filter the statistics report returned by Citrix and should\n * only be used when getStats(track) fails.\n *\n * @param {RTCStatsReport|Array<RTCStats>} arrayOrMap - Full stats report or array of stats\n * @param {MediaStreamTrack} track - The track to filter by\n * @param {boolean} [isRemote=false] - Whether this is a remote track\n * @returns {RTCStatsReport} Filtered stats\n * @private\n */\nfunction filterStatsByTrack(arrayOrMap, track, isRemote) {\n  var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e, e_6, _f, e_7, _g, e_8, _h, e_9, _j, e_10, _k, e_11, _l;\n  if (isRemote === void 0) {\n    isRemote = false;\n  }\n  // Handle different input types\n  var allStats;\n  if (Array.isArray(arrayOrMap)) {\n    allStats = new Map(arrayOrMap.map(function (stat) {\n      return [stat.id || String(Math.random()), stat];\n    }));\n  } else if (arrayOrMap instanceof Map) {\n    allStats = arrayOrMap;\n  } else if (typeof arrayOrMap === 'object' && arrayOrMap !== null) {\n    // Handle object-style stats (non-standard)\n    var statsMap_1 = new Map();\n    Object.keys(arrayOrMap).forEach(function (key) {\n      statsMap_1.set(key, arrayOrMap[key]);\n    });\n    allStats = statsMap_1;\n  } else {\n    return new Map();\n  }\n  if (!allStats || !track) {\n    return new Map();\n  }\n  var filteredReport = new Map();\n  var trackId = track.id;\n  var trackKind = track.kind;\n  // Step 1: Find the primary track-specific stats\n  var primaryStats = null;\n  var primaryStatsId = null;\n  var ssrc = null;\n  try {\n    // Find the primary stat for this track (inbound-rtp for remote, media-source for local)\n    for (var allStats_1 = __values(allStats), allStats_1_1 = allStats_1.next(); !allStats_1_1.done; allStats_1_1 = allStats_1.next()) {\n      var _m = __read(allStats_1_1.value, 2),\n        id = _m[0],\n        stat = _m[1];\n      // For remote tracks, find matching inbound-rtp with matching trackIdentifier\n      if (isRemote && stat.type === 'inbound-rtp' && stat.trackIdentifier === trackId) {\n        primaryStats = stat;\n        primaryStatsId = id;\n        ssrc = stat.ssrc;\n        break;\n      } else if (!isRemote && stat.type === 'media-source' && stat.trackIdentifier === trackId) {\n        // For local tracks, find matching media-source with matching trackIdentifier\n        primaryStats = stat;\n        primaryStatsId = id;\n        break;\n      } else if (stat.type === 'track' && stat.trackIdentifier === trackId) {\n        // Also check for track stats with matching trackIdentifier\n        if (!primaryStats) {\n          primaryStats = stat;\n          primaryStatsId = id;\n        }\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (allStats_1_1 && !allStats_1_1.done && (_a = allStats_1.return)) _a.call(allStats_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  // If no primary stat was found using the trackId, try a more lenient approach\n  if (!primaryStats) {\n    // For remote tracks, try to find an inbound-rtp of the correct kind\n    if (isRemote) {\n      // Get all inbound-rtp stats of the right kind\n      var candidateInbounds = [];\n      try {\n        for (var allStats_2 = __values(allStats), allStats_2_1 = allStats_2.next(); !allStats_2_1.done; allStats_2_1 = allStats_2.next()) {\n          var _o = __read(allStats_2_1.value, 2),\n            id = _o[0],\n            stat = _o[1];\n          if (stat.type === 'inbound-rtp' && (stat.kind === trackKind || stat.mediaType === trackKind)) {\n            candidateInbounds.push({\n              id: id,\n              stat: stat\n            });\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (allStats_2_1 && !allStats_2_1.done && (_b = allStats_2.return)) _b.call(allStats_2);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n      // If there are multiple candidates, we need to be careful\n      if (candidateInbounds.length === 1) {\n        // Only one candidate, use it\n        primaryStats = candidateInbounds[0].stat;\n        primaryStatsId = candidateInbounds[0].id;\n        ssrc = primaryStats.ssrc;\n      } else if (candidateInbounds.length > 1) {\n        // Multiple candidates - if we have the trackId, try to match by mid\n        // otherwise just take the first one\n        primaryStats = candidateInbounds[0].stat;\n        primaryStatsId = candidateInbounds[0].id;\n        ssrc = primaryStats.ssrc;\n      }\n    } else {\n      try {\n        // For local tracks, try to find a media-source of the correct kind\n        for (var allStats_3 = __values(allStats), allStats_3_1 = allStats_3.next(); !allStats_3_1.done; allStats_3_1 = allStats_3.next()) {\n          var _p = __read(allStats_3_1.value, 2),\n            id = _p[0],\n            stat = _p[1];\n          if (stat.type === 'media-source' && stat.kind === trackKind) {\n            primaryStats = stat;\n            primaryStatsId = id;\n            break;\n          }\n        }\n      } catch (e_3_1) {\n        e_3 = {\n          error: e_3_1\n        };\n      } finally {\n        try {\n          if (allStats_3_1 && !allStats_3_1.done && (_c = allStats_3.return)) _c.call(allStats_3);\n        } finally {\n          if (e_3) throw e_3.error;\n        }\n      }\n    }\n  }\n  // If we still didn't find a primary stat, return an empty report\n  if (!primaryStats) {\n    return filteredReport;\n  }\n  // Step 2: Add the primary stat\n  filteredReport.set(primaryStatsId, primaryStats);\n  // Step 3: Add related stats using direct references\n  var directlyRelatedIds = new Set();\n  // Track different types of related IDs\n  if (isRemote) {\n    // For remote tracks (inbound-rtp is primary)\n    if (primaryStats.codecId) {\n      directlyRelatedIds.add(primaryStats.codecId);\n    }\n    if (primaryStats.transportId) {\n      directlyRelatedIds.add(primaryStats.transportId);\n    }\n    if (primaryStats.remoteId) {\n      directlyRelatedIds.add(primaryStats.remoteId);\n    }\n    // Find remote-outbound-rtp based on ssrc\n    if (ssrc) {\n      try {\n        for (var allStats_4 = __values(allStats), allStats_4_1 = allStats_4.next(); !allStats_4_1.done; allStats_4_1 = allStats_4.next()) {\n          var _q = __read(allStats_4_1.value, 2),\n            id = _q[0],\n            stat = _q[1];\n          if (stat.type === 'remote-outbound-rtp' && stat.ssrc === ssrc) {\n            directlyRelatedIds.add(id);\n          }\n        }\n      } catch (e_4_1) {\n        e_4 = {\n          error: e_4_1\n        };\n      } finally {\n        try {\n          if (allStats_4_1 && !allStats_4_1.done && (_d = allStats_4.return)) _d.call(allStats_4);\n        } finally {\n          if (e_4) throw e_4.error;\n        }\n      }\n    }\n    try {\n      // Add codec, transport, and remote stats\n      for (var directlyRelatedIds_1 = __values(directlyRelatedIds), directlyRelatedIds_1_1 = directlyRelatedIds_1.next(); !directlyRelatedIds_1_1.done; directlyRelatedIds_1_1 = directlyRelatedIds_1.next()) {\n        var relatedId = directlyRelatedIds_1_1.value;\n        if (allStats.has(relatedId)) {\n          filteredReport.set(relatedId, allStats.get(relatedId));\n        }\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (directlyRelatedIds_1_1 && !directlyRelatedIds_1_1.done && (_e = directlyRelatedIds_1.return)) _e.call(directlyRelatedIds_1);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n    try {\n      // Add the track stats if it exists\n      for (var allStats_5 = __values(allStats), allStats_5_1 = allStats_5.next(); !allStats_5_1.done; allStats_5_1 = allStats_5.next()) {\n        var _r = __read(allStats_5_1.value, 2),\n          id = _r[0],\n          stat = _r[1];\n        if (stat.type === 'track' && stat.trackIdentifier === trackId) {\n          filteredReport.set(id, stat);\n        }\n      }\n    } catch (e_6_1) {\n      e_6 = {\n        error: e_6_1\n      };\n    } finally {\n      try {\n        if (allStats_5_1 && !allStats_5_1.done && (_f = allStats_5.return)) _f.call(allStats_5);\n      } finally {\n        if (e_6) throw e_6.error;\n      }\n    }\n  } else {\n    try {\n      // For local tracks (media-source is primary)\n      // Find outbound-rtp that references this media source\n      for (var allStats_6 = __values(allStats), allStats_6_1 = allStats_6.next(); !allStats_6_1.done; allStats_6_1 = allStats_6.next()) {\n        var _s = __read(allStats_6_1.value, 2),\n          id = _s[0],\n          stat = _s[1];\n        if (stat.type === 'outbound-rtp' && stat.mediaSourceId === primaryStatsId) {\n          filteredReport.set(id, stat);\n          // Add codec and transport\n          if (stat.codecId) {\n            directlyRelatedIds.add(stat.codecId);\n          }\n          if (stat.transportId) {\n            directlyRelatedIds.add(stat.transportId);\n          }\n          // Find remote-inbound-rtp that references this outbound-rtp\n          var outboundId = id;\n          try {\n            for (var allStats_7 = (e_8 = void 0, __values(allStats)), allStats_7_1 = allStats_7.next(); !allStats_7_1.done; allStats_7_1 = allStats_7.next()) {\n              var _t = __read(allStats_7_1.value, 2),\n                remoteId = _t[0],\n                remoteStat = _t[1];\n              if (remoteStat.type === 'remote-inbound-rtp' && remoteStat.localId === outboundId) {\n                filteredReport.set(remoteId, remoteStat);\n              }\n            }\n          } catch (e_8_1) {\n            e_8 = {\n              error: e_8_1\n            };\n          } finally {\n            try {\n              if (allStats_7_1 && !allStats_7_1.done && (_h = allStats_7.return)) _h.call(allStats_7);\n            } finally {\n              if (e_8) throw e_8.error;\n            }\n          }\n        }\n      }\n    } catch (e_7_1) {\n      e_7 = {\n        error: e_7_1\n      };\n    } finally {\n      try {\n        if (allStats_6_1 && !allStats_6_1.done && (_g = allStats_6.return)) _g.call(allStats_6);\n      } finally {\n        if (e_7) throw e_7.error;\n      }\n    }\n    try {\n      // Add codec and transport stats\n      for (var directlyRelatedIds_2 = __values(directlyRelatedIds), directlyRelatedIds_2_1 = directlyRelatedIds_2.next(); !directlyRelatedIds_2_1.done; directlyRelatedIds_2_1 = directlyRelatedIds_2.next()) {\n        var relatedId = directlyRelatedIds_2_1.value;\n        if (allStats.has(relatedId)) {\n          filteredReport.set(relatedId, allStats.get(relatedId));\n        }\n      }\n    } catch (e_9_1) {\n      e_9 = {\n        error: e_9_1\n      };\n    } finally {\n      try {\n        if (directlyRelatedIds_2_1 && !directlyRelatedIds_2_1.done && (_j = directlyRelatedIds_2.return)) _j.call(directlyRelatedIds_2);\n      } finally {\n        if (e_9) throw e_9.error;\n      }\n    }\n  }\n  // Step 4: Add candidate pair and certificate info for context\n  // This is useful information that applies to all tracks\n  // but doesn't risk mixing data between tracks\n  var selectedPairId = null;\n  var transportIds = new Set();\n  try {\n    // Find all transport IDs referenced in our filtered stats\n    for (var _u = __values(filteredReport.values()), _v = _u.next(); !_v.done; _v = _u.next()) {\n      var stat = _v.value;\n      if (stat.transportId) {\n        transportIds.add(stat.transportId);\n      }\n    }\n  } catch (e_10_1) {\n    e_10 = {\n      error: e_10_1\n    };\n  } finally {\n    try {\n      if (_v && !_v.done && (_k = _u.return)) _k.call(_u);\n    } finally {\n      if (e_10) throw e_10.error;\n    }\n  }\n  try {\n    // Add the transports\n    for (var transportIds_1 = __values(transportIds), transportIds_1_1 = transportIds_1.next(); !transportIds_1_1.done; transportIds_1_1 = transportIds_1.next()) {\n      var transportId = transportIds_1_1.value;\n      if (allStats.has(transportId)) {\n        var transport = allStats.get(transportId);\n        filteredReport.set(transportId, transport);\n        // Track the selected candidate pair\n        if (transport.selectedCandidatePairId) {\n          selectedPairId = transport.selectedCandidatePairId;\n        }\n        // Add certificate info\n        if (transport.localCertificateId && allStats.has(transport.localCertificateId)) {\n          filteredReport.set(transport.localCertificateId, allStats.get(transport.localCertificateId));\n        }\n        if (transport.remoteCertificateId && allStats.has(transport.remoteCertificateId)) {\n          filteredReport.set(transport.remoteCertificateId, allStats.get(transport.remoteCertificateId));\n        }\n      }\n    }\n  } catch (e_11_1) {\n    e_11 = {\n      error: e_11_1\n    };\n  } finally {\n    try {\n      if (transportIds_1_1 && !transportIds_1_1.done && (_l = transportIds_1.return)) _l.call(transportIds_1);\n    } finally {\n      if (e_11) throw e_11.error;\n    }\n  }\n  // Add only the selected candidate pair, not all candidate pairs\n  if (selectedPairId && allStats.has(selectedPairId)) {\n    var selectedPair = allStats.get(selectedPairId);\n    filteredReport.set(selectedPairId, selectedPair);\n    // Add the local and remote candidates for the selected pair\n    if (selectedPair.localCandidateId && allStats.has(selectedPair.localCandidateId)) {\n      filteredReport.set(selectedPair.localCandidateId, allStats.get(selectedPair.localCandidateId));\n    }\n    if (selectedPair.remoteCandidateId && allStats.has(selectedPair.remoteCandidateId)) {\n      filteredReport.set(selectedPair.remoteCandidateId, allStats.get(selectedPair.remoteCandidateId));\n    }\n  }\n  return filteredReport;\n}\n/**\n * Get the standardized {@link RTCPeerConnection} statistics.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options] - Used for testing\n * @returns {Promise.<StandardizedStatsResponse>}\n */\nfunction getStats(peerConnection, options) {\n  if (!(peerConnection && typeof peerConnection.getStats === 'function')) {\n    return Promise.reject(new Error('Given PeerConnection does not support getStats'));\n  }\n  return _getStats(peerConnection, options);\n}\n/**\n * getStats() implementation.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options] - Used for testing\n * @returns {Promise.<StandardizedStatsResponse>}\n */\nfunction _getStats(peerConnection, options) {\n  var localAudioTracks = getTracks(peerConnection, 'audio', 'local');\n  var localVideoTracks = getTracks(peerConnection, 'video', 'local');\n  var remoteAudioTracks = getTracks(peerConnection, 'audio');\n  var remoteVideoTracks = getTracks(peerConnection, 'video');\n  var statsResponse = {\n    activeIceCandidatePair: null,\n    localAudioTrackStats: [],\n    localVideoTrackStats: [],\n    remoteAudioTrackStats: [],\n    remoteVideoTrackStats: []\n  };\n  var trackStatsPromises = flatMap([[localAudioTracks, 'localAudioTrackStats', false], [localVideoTracks, 'localVideoTrackStats', false], [remoteAudioTracks, 'remoteAudioTrackStats', true], [remoteVideoTracks, 'remoteVideoTrackStats', true]], function (_a) {\n    var _b = __read(_a, 3),\n      tracks = _b[0],\n      statsArrayName = _b[1],\n      isRemote = _b[2];\n    return tracks.map(function (track) {\n      return getTrackStats(peerConnection, track, Object.assign({\n        isRemote: isRemote\n      }, options)).then(function (trackStatsArray) {\n        trackStatsArray.forEach(function (trackStats) {\n          trackStats.trackId = track.id;\n          statsResponse[statsArrayName].push(trackStats);\n        });\n      });\n    });\n  });\n  return Promise.all(trackStatsPromises).then(function () {\n    return getActiveIceCandidatePairStats(peerConnection, options);\n  }).then(function (activeIceCandidatePairStatsReport) {\n    statsResponse.activeIceCandidatePair = activeIceCandidatePairStatsReport;\n    return statsResponse;\n  });\n}\n/**\n * Generate the {@link StandardizedActiveIceCandidatePairStatsReport} for the\n * {@link RTCPeerConnection}.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options]\n * @returns {Promise<StandardizedActiveIceCandidatePairStatsReport>}\n */\nfunction getActiveIceCandidatePairStats(peerConnection, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  if (typeof options.testForChrome !== 'undefined' || isChrome || typeof options.testForSafari !== 'undefined' || isSafari) {\n    return peerConnection.getStats().then(standardizeChromeOrSafariActiveIceCandidatePairStats);\n  }\n  if (typeof options.testForFirefox !== 'undefined' || isFirefox) {\n    return peerConnection.getStats().then(standardizeFirefoxActiveIceCandidatePairStats);\n  }\n  return Promise.reject(new Error('RTCPeerConnection#getStats() not supported'));\n}\n/**\n * Standardize the active RTCIceCandidate pair's statistics in Chrome or Safari.\n * @param {RTCStatsReport} stats\n * @returns {?StandardizedActiveIceCandidatePairStatsReport}\n */\nfunction standardizeChromeOrSafariActiveIceCandidatePairStats(stats) {\n  var activeCandidatePairStats = Array.from(stats.values()).find(function (_a) {\n    var nominated = _a.nominated,\n      type = _a.type;\n    return type === 'candidate-pair' && nominated;\n  });\n  if (!activeCandidatePairStats) {\n    return null;\n  }\n  var activeLocalCandidateStats = getStatById(stats, activeCandidatePairStats.localCandidateId);\n  var activeRemoteCandidateStats = getStatById(stats, activeCandidatePairStats.remoteCandidateId);\n  var standardizedCandidateStatsKeys = [{\n    key: 'candidateType',\n    type: 'string'\n  }, {\n    key: 'ip',\n    type: 'string'\n  }, {\n    key: 'port',\n    type: 'number'\n  }, {\n    key: 'priority',\n    type: 'number'\n  }, {\n    key: 'protocol',\n    type: 'string'\n  }, {\n    key: 'url',\n    type: 'string'\n  }];\n  var standardizedLocalCandidateStatsKeys = standardizedCandidateStatsKeys.concat([{\n    key: 'deleted',\n    type: 'boolean'\n  }, {\n    key: 'relayProtocol',\n    type: 'string'\n  }]);\n  var standatdizedLocalCandidateStatsReport = activeLocalCandidateStats ? standardizedLocalCandidateStatsKeys.reduce(function (report, _a) {\n    var key = _a.key,\n      type = _a.type;\n    report[key] = typeof activeLocalCandidateStats[key] === type ? activeLocalCandidateStats[key] : key === 'deleted' ? false : null;\n    return report;\n  }, {}) : null;\n  var standardizedRemoteCandidateStatsReport = activeRemoteCandidateStats ? standardizedCandidateStatsKeys.reduce(function (report, _a) {\n    var key = _a.key,\n      type = _a.type;\n    report[key] = typeof activeRemoteCandidateStats[key] === type ? activeRemoteCandidateStats[key] : null;\n    return report;\n  }, {}) : null;\n  return [{\n    key: 'availableIncomingBitrate',\n    type: 'number'\n  }, {\n    key: 'availableOutgoingBitrate',\n    type: 'number'\n  }, {\n    key: 'bytesReceived',\n    type: 'number'\n  }, {\n    key: 'bytesSent',\n    type: 'number'\n  }, {\n    key: 'consentRequestsSent',\n    type: 'number'\n  }, {\n    key: 'currentRoundTripTime',\n    type: 'number'\n  }, {\n    key: 'lastPacketReceivedTimestamp',\n    type: 'number'\n  }, {\n    key: 'lastPacketSentTimestamp',\n    type: 'number'\n  }, {\n    key: 'nominated',\n    type: 'boolean'\n  }, {\n    key: 'priority',\n    type: 'number'\n  }, {\n    key: 'readable',\n    type: 'boolean'\n  }, {\n    key: 'requestsReceived',\n    type: 'number'\n  }, {\n    key: 'requestsSent',\n    type: 'number'\n  }, {\n    key: 'responsesReceived',\n    type: 'number'\n  }, {\n    key: 'responsesSent',\n    type: 'number'\n  }, {\n    key: 'retransmissionsReceived',\n    type: 'number'\n  }, {\n    key: 'retransmissionsSent',\n    type: 'number'\n  }, {\n    key: 'state',\n    type: 'string',\n    fixup: function (state) {\n      return state === 'inprogress' ? 'in-progress' : state;\n    }\n  }, {\n    key: 'totalRoundTripTime',\n    type: 'number'\n  }, {\n    key: 'transportId',\n    type: 'string'\n  }, {\n    key: 'writable',\n    type: 'boolean'\n  }].reduce(function (report, _a) {\n    var key = _a.key,\n      type = _a.type,\n      fixup = _a.fixup;\n    report[key] = typeof activeCandidatePairStats[key] === type ? fixup ? fixup(activeCandidatePairStats[key]) : activeCandidatePairStats[key] : null;\n    return report;\n  }, {\n    localCandidate: standatdizedLocalCandidateStatsReport,\n    remoteCandidate: standardizedRemoteCandidateStatsReport\n  });\n}\n/**\n * Standardize the active RTCIceCandidate pair's statistics in Firefox.\n * @param {RTCStatsReport} stats\n * @returns {?StandardizedActiveIceCandidatePairStatsReport}\n */\nfunction standardizeFirefoxActiveIceCandidatePairStats(stats) {\n  var activeCandidatePairStats = Array.from(stats.values()).find(function (_a) {\n    var nominated = _a.nominated,\n      type = _a.type;\n    return type === 'candidate-pair' && nominated;\n  });\n  if (!activeCandidatePairStats) {\n    return null;\n  }\n  var activeLocalCandidateStats = getStatById(stats, activeCandidatePairStats.localCandidateId);\n  var activeRemoteCandidateStats = getStatById(stats, activeCandidatePairStats.remoteCandidateId);\n  var standardizedCandidateStatsKeys = [{\n    key: 'candidateType',\n    type: 'string'\n  }, {\n    key: 'ip',\n    ffKeys: ['address', 'ipAddress'],\n    type: 'string'\n  }, {\n    key: 'port',\n    ffKeys: ['portNumber'],\n    type: 'number'\n  }, {\n    key: 'priority',\n    type: 'number'\n  }, {\n    key: 'protocol',\n    ffKeys: ['transport'],\n    type: 'string'\n  }, {\n    key: 'url',\n    type: 'string'\n  }];\n  var standardizedLocalCandidateStatsKeys = standardizedCandidateStatsKeys.concat([{\n    key: 'deleted',\n    type: 'boolean'\n  }, {\n    key: 'relayProtocol',\n    type: 'string'\n  }]);\n  var candidateTypes = {\n    host: 'host',\n    peerreflexive: 'prflx',\n    relayed: 'relay',\n    serverreflexive: 'srflx'\n  };\n  var standatdizedLocalCandidateStatsReport = activeLocalCandidateStats ? standardizedLocalCandidateStatsKeys.reduce(function (report, _a) {\n    var ffKeys = _a.ffKeys,\n      key = _a.key,\n      type = _a.type;\n    var localStatKey = ffKeys && ffKeys.find(function (key) {\n      return key in activeLocalCandidateStats;\n    }) || key;\n    report[key] = typeof activeLocalCandidateStats[localStatKey] === type ? localStatKey === 'candidateType' ? candidateTypes[activeLocalCandidateStats[localStatKey]] || activeLocalCandidateStats[localStatKey] : activeLocalCandidateStats[localStatKey] : localStatKey === 'deleted' ? false : null;\n    return report;\n  }, {}) : null;\n  var standardizedRemoteCandidateStatsReport = activeRemoteCandidateStats ? standardizedCandidateStatsKeys.reduce(function (report, _a) {\n    var ffKeys = _a.ffKeys,\n      key = _a.key,\n      type = _a.type;\n    var remoteStatKey = ffKeys && ffKeys.find(function (key) {\n      return key in activeRemoteCandidateStats;\n    }) || key;\n    report[key] = typeof activeRemoteCandidateStats[remoteStatKey] === type ? remoteStatKey === 'candidateType' ? candidateTypes[activeRemoteCandidateStats[remoteStatKey]] || activeRemoteCandidateStats[remoteStatKey] : activeRemoteCandidateStats[remoteStatKey] : null;\n    return report;\n  }, {}) : null;\n  return [{\n    key: 'availableIncomingBitrate',\n    type: 'number'\n  }, {\n    key: 'availableOutgoingBitrate',\n    type: 'number'\n  }, {\n    key: 'bytesReceived',\n    type: 'number'\n  }, {\n    key: 'bytesSent',\n    type: 'number'\n  }, {\n    key: 'consentRequestsSent',\n    type: 'number'\n  }, {\n    key: 'currentRoundTripTime',\n    type: 'number'\n  }, {\n    key: 'lastPacketReceivedTimestamp',\n    type: 'number'\n  }, {\n    key: 'lastPacketSentTimestamp',\n    type: 'number'\n  }, {\n    key: 'nominated',\n    type: 'boolean'\n  }, {\n    key: 'priority',\n    type: 'number'\n  }, {\n    key: 'readable',\n    type: 'boolean'\n  }, {\n    key: 'requestsReceived',\n    type: 'number'\n  }, {\n    key: 'requestsSent',\n    type: 'number'\n  }, {\n    key: 'responsesReceived',\n    type: 'number'\n  }, {\n    key: 'responsesSent',\n    type: 'number'\n  }, {\n    key: 'retransmissionsReceived',\n    type: 'number'\n  }, {\n    key: 'retransmissionsSent',\n    type: 'number'\n  }, {\n    key: 'state',\n    type: 'string'\n  }, {\n    key: 'totalRoundTripTime',\n    type: 'number'\n  }, {\n    key: 'transportId',\n    type: 'string'\n  }, {\n    key: 'writable',\n    type: 'boolean'\n  }].reduce(function (report, _a) {\n    var key = _a.key,\n      type = _a.type;\n    report[key] = typeof activeCandidatePairStats[key] === type ? activeCandidatePairStats[key] : null;\n    return report;\n  }, {\n    localCandidate: standatdizedLocalCandidateStatsReport,\n    remoteCandidate: standardizedRemoteCandidateStatsReport\n  });\n}\n/**\n * Get local/remote audio/video MediaStreamTracks.\n * @param {RTCPeerConnection} peerConnection - The RTCPeerConnection\n * @param {string} kind - 'audio' or 'video'\n * @param {string} [localOrRemote] - 'local' or 'remote'\n * @returns {Array<MediaStreamTrack>}\n */\nfunction getTracks(peerConnection, kind, localOrRemote) {\n  var getSendersOrReceivers = localOrRemote === 'local' ? 'getSenders' : 'getReceivers';\n  if (peerConnection[getSendersOrReceivers]) {\n    return peerConnection[getSendersOrReceivers]().map(function (_a) {\n      var track = _a.track;\n      return track;\n    }).filter(function (track) {\n      return track && track.kind === kind;\n    });\n  }\n  var getStreams = localOrRemote === 'local' ? 'getLocalStreams' : 'getRemoteStreams';\n  var getTracks = kind === 'audio' ? 'getAudioTracks' : 'getVideoTracks';\n  return flatMap(peerConnection[getStreams](), function (stream) {\n    return stream[getTracks]();\n  });\n}\n/**\n * Determine if a track is remote by examining the PeerConnection's receivers.\n * This function is designed for use with Citrix, where getStats(track) is not supported.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @returns {boolean} True if the track is a remote track\n * @private\n */\nfunction isRemoteTrack(peerConnection, track) {\n  var e_12, _a, e_13, _b, e_14, _c;\n  if (!peerConnection || !track) {\n    return false;\n  }\n  // Check if the track belongs to any receiver (remote)\n  if (peerConnection.getReceivers) {\n    var receivers = peerConnection.getReceivers();\n    try {\n      for (var receivers_1 = __values(receivers), receivers_1_1 = receivers_1.next(); !receivers_1_1.done; receivers_1_1 = receivers_1.next()) {\n        var receiver = receivers_1_1.value;\n        if (receiver.track && receiver.track.id === track.id) {\n          return true;\n        }\n      }\n    } catch (e_12_1) {\n      e_12 = {\n        error: e_12_1\n      };\n    } finally {\n      try {\n        if (receivers_1_1 && !receivers_1_1.done && (_a = receivers_1.return)) _a.call(receivers_1);\n      } finally {\n        if (e_12) throw e_12.error;\n      }\n    }\n  }\n  // Check remote streams if getReceivers is not available\n  if (peerConnection.getRemoteStreams) {\n    var remoteStreams = peerConnection.getRemoteStreams();\n    try {\n      for (var remoteStreams_1 = __values(remoteStreams), remoteStreams_1_1 = remoteStreams_1.next(); !remoteStreams_1_1.done; remoteStreams_1_1 = remoteStreams_1.next()) {\n        var stream = remoteStreams_1_1.value;\n        var tracks = stream.getTracks();\n        try {\n          for (var tracks_1 = (e_14 = void 0, __values(tracks)), tracks_1_1 = tracks_1.next(); !tracks_1_1.done; tracks_1_1 = tracks_1.next()) {\n            var remoteTrack = tracks_1_1.value;\n            if (remoteTrack.id === track.id) {\n              return true;\n            }\n          }\n        } catch (e_14_1) {\n          e_14 = {\n            error: e_14_1\n          };\n        } finally {\n          try {\n            if (tracks_1_1 && !tracks_1_1.done && (_c = tracks_1.return)) _c.call(tracks_1);\n          } finally {\n            if (e_14) throw e_14.error;\n          }\n        }\n      }\n    } catch (e_13_1) {\n      e_13 = {\n        error: e_13_1\n      };\n    } finally {\n      try {\n        if (remoteStreams_1_1 && !remoteStreams_1_1.done && (_b = remoteStreams_1.return)) _b.call(remoteStreams_1);\n      } finally {\n        if (e_13) throw e_13.error;\n      }\n    }\n  }\n  // The track is not in any remote source, so it's likely local\n  return false;\n}\n/**\n * Get the standardized statistics for a particular MediaStreamTrack.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @param {object} [options] - Used for testing\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\nfunction getTrackStats(peerConnection, track, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  if (typeof options.testForChrome !== 'undefined' || isChrome) {\n    return chromeOrSafariGetTrackStats(peerConnection, track, options);\n  }\n  if (typeof options.testForFirefox !== 'undefined' || isFirefox) {\n    return firefoxGetTrackStats(peerConnection, track, options);\n  }\n  if (typeof options.testForSafari !== 'undefined' || isSafari) {\n    if (typeof options.testForSafari !== 'undefined' || getSdpFormat() === 'unified') {\n      return chromeOrSafariGetTrackStats(peerConnection, track, options);\n    }\n    // NOTE(syerrapragada): getStats() is not supported on\n    // Safari versions where plan-b is the SDP format\n    // due to this bug: https://bugs.webkit.org/show_bug.cgi?id=192601\n    return Promise.reject(new Error(['getStats() is not supported on this version of Safari', 'due to this bug: https://bugs.webkit.org/show_bug.cgi?id=192601'].join(' ')));\n  }\n  return Promise.reject(new Error('RTCPeerConnection#getStats() not supported'));\n}\n/**\n * Get the standardized statistics for a particular MediaStreamTrack in Chrome or Safari.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @param {object} options - Used for testing\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\nfunction chromeOrSafariGetTrackStats(peerConnection, track, options) {\n  var log = options.log;\n  if (chromeMajorVersion && chromeMajorVersion < 67) {\n    return new Promise(function (resolve, reject) {\n      peerConnection.getStats(function (response) {\n        resolve([standardizeChromeLegacyStats(response, track)]);\n      }, null, reject);\n    });\n  }\n  return peerConnection.getStats(track).then(function (response) {\n    log.info('getStats by track successful');\n    return standardizeChromeOrSafariStats(response, options);\n  }).catch(function () {\n    // NOTE(lrivas): Citrix doesn't support track-specific getStats,\n    // so this workaround tries getting all stats and filtering by track.\n    log.warn('getStats by track failed. Getting default stats');\n    return peerConnection.getStats().then(function (stats) {\n      log.info('getStats by default successful');\n      var isRemote = isRemoteTrack(peerConnection, track);\n      log.info(\"Starting filtering stats for \" + (isRemote ? 'remote' : 'local') + \" track\");\n      var filteredStats = filterStatsByTrack(stats, track, isRemote);\n      log.info(\"Completed filtering stats for \" + (isRemote ? 'remote' : 'local') + \" track\");\n      return standardizeChromeOrSafariStats(filteredStats, options);\n    });\n  });\n}\n/**\n * Get the standardized statistics for a particular MediaStreamTrack in Firefox.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @param {object} options\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\nfunction firefoxGetTrackStats(peerConnection, track, options) {\n  return peerConnection.getStats(track).then(function (response) {\n    return [standardizeFirefoxStats(response, options)];\n  });\n}\n/**\n * Standardize the MediaStreamTrack's legacy statistics in Chrome.\n * @param {RTCStatsResponse} response\n * @param {MediaStreamTrack} track\n * @returns {StandardizedTrackStatsReport}\n */\nfunction standardizeChromeLegacyStats(response, track) {\n  var ssrcReport = response.result().find(function (report) {\n    return report.type === 'ssrc' && report.stat('googTrackId') === track.id;\n  });\n  var standardizedStats = {};\n  if (ssrcReport) {\n    standardizedStats.timestamp = Math.round(Number(ssrcReport.timestamp));\n    standardizedStats = ssrcReport.names().reduce(function (stats, name) {\n      switch (name) {\n        case 'googCodecName':\n          stats.codecName = ssrcReport.stat(name);\n          break;\n        case 'googRtt':\n          stats.roundTripTime = Number(ssrcReport.stat(name));\n          break;\n        case 'googJitterReceived':\n          stats.jitter = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameWidthInput':\n          stats.frameWidthInput = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameHeightInput':\n          stats.frameHeightInput = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameWidthSent':\n          stats.frameWidthSent = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameHeightSent':\n          stats.frameHeightSent = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameWidthReceived':\n          stats.frameWidthReceived = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameHeightReceived':\n          stats.frameHeightReceived = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameRateInput':\n          stats.frameRateInput = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameRateSent':\n          stats.frameRateSent = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameRateReceived':\n          stats.frameRateReceived = Number(ssrcReport.stat(name));\n          break;\n        case 'ssrc':\n          stats[name] = ssrcReport.stat(name);\n          break;\n        case 'bytesReceived':\n        case 'bytesSent':\n        case 'packetsLost':\n        case 'packetsReceived':\n        case 'packetsSent':\n        case 'audioInputLevel':\n        case 'audioOutputLevel':\n          stats[name] = Number(ssrcReport.stat(name));\n          break;\n      }\n      return stats;\n    }, standardizedStats);\n  }\n  return standardizedStats;\n}\n/**\n * Standardize the MediaStreamTrack's statistics in Chrome or Safari.\n * @param {RTCStatsReport} response\n * @param {object} options - Used for testing\n * @returns {Array<StandardizedTrackStatsReport>}\n */\nfunction standardizeChromeOrSafariStats(response, _a) {\n  var _b = _a.simulateExceptionWhileStandardizingStats,\n    simulateExceptionWhileStandardizingStats = _b === void 0 ? false : _b;\n  if (simulateExceptionWhileStandardizingStats) {\n    throw new Error('Error while gathering stats');\n  }\n  var inbound = null;\n  // NOTE(mpatwardhan): We should expect more than one \"outbound-rtp\" stats for a\n  // VP8 simulcast MediaStreamTrack.\n  var outbound = [];\n  var remoteInbound = null;\n  var remoteOutbound = null;\n  var track = null;\n  var codec = null;\n  var localMedia = null;\n  response.forEach(function (stat) {\n    var type = stat.type;\n    switch (type) {\n      case 'inbound-rtp':\n        inbound = stat;\n        break;\n      case 'outbound-rtp':\n        outbound.push(stat);\n        break;\n      case 'media-source':\n        localMedia = stat;\n        break;\n      case 'track':\n        track = stat;\n        break;\n      case 'codec':\n        codec = stat;\n        break;\n      case 'remote-inbound-rtp':\n        remoteInbound = stat;\n        break;\n      case 'remote-outbound-rtp':\n        remoteOutbound = stat;\n        break;\n    }\n  });\n  var isRemote = track ? track.remoteSource : !localMedia;\n  var mainSources = isRemote ? [inbound] : outbound;\n  var stats = [];\n  var remoteSource = isRemote ? remoteOutbound : remoteInbound; // remote rtp stats\n  mainSources.forEach(function (source) {\n    var standardizedStats = {};\n    var statSources = [source, localMedia, track, codec, remoteSource && remoteSource.ssrc === source.ssrc ? remoteSource : null // remote rtp stats\n    ];\n    function getStatValue(name) {\n      var sourceFound = statSources.find(function (statSource) {\n        return statSource && typeof statSource[name] !== 'undefined';\n      }) || null;\n      return sourceFound ? sourceFound[name] : null;\n    }\n    var ssrc = getStatValue('ssrc');\n    if (typeof ssrc === 'number') {\n      standardizedStats.ssrc = String(ssrc);\n    }\n    var timestamp = getStatValue('timestamp');\n    standardizedStats.timestamp = Math.round(timestamp);\n    var mimeType = getStatValue('mimeType');\n    if (typeof mimeType === 'string') {\n      mimeType = mimeType.split('/');\n      standardizedStats.codecName = mimeType[mimeType.length - 1];\n    }\n    var roundTripTime = getStatValue('roundTripTime');\n    if (typeof roundTripTime === 'number') {\n      standardizedStats.roundTripTime = Math.round(roundTripTime * 1000);\n    }\n    var jitter = getStatValue('jitter');\n    if (typeof jitter === 'number') {\n      standardizedStats.jitter = Math.round(jitter * 1000);\n    }\n    var frameWidth = getStatValue('frameWidth');\n    if (typeof frameWidth === 'number') {\n      if (isRemote) {\n        standardizedStats.frameWidthReceived = frameWidth;\n      } else {\n        standardizedStats.frameWidthSent = frameWidth;\n        standardizedStats.frameWidthInput = track ? track.frameWidth : localMedia.width;\n      }\n    }\n    var frameHeight = getStatValue('frameHeight');\n    if (typeof frameHeight === 'number') {\n      if (isRemote) {\n        standardizedStats.frameHeightReceived = frameHeight;\n      } else {\n        standardizedStats.frameHeightSent = frameHeight;\n        standardizedStats.frameHeightInput = track ? track.frameHeight : localMedia.height;\n      }\n    }\n    var framesPerSecond = getStatValue('framesPerSecond');\n    if (typeof framesPerSecond === 'number') {\n      standardizedStats[isRemote ? 'frameRateReceived' : 'frameRateSent'] = framesPerSecond;\n    }\n    var bytesReceived = getStatValue('bytesReceived');\n    if (typeof bytesReceived === 'number') {\n      standardizedStats.bytesReceived = bytesReceived;\n    }\n    var bytesSent = getStatValue('bytesSent');\n    if (typeof bytesSent === 'number') {\n      standardizedStats.bytesSent = bytesSent;\n    }\n    var packetsLost = getStatValue('packetsLost');\n    if (typeof packetsLost === 'number') {\n      standardizedStats.packetsLost = packetsLost;\n    }\n    var packetsReceived = getStatValue('packetsReceived');\n    if (typeof packetsReceived === 'number') {\n      standardizedStats.packetsReceived = packetsReceived;\n    }\n    var packetsSent = getStatValue('packetsSent');\n    if (typeof packetsSent === 'number') {\n      standardizedStats.packetsSent = packetsSent;\n    }\n    var audioLevel = getStatValue('audioLevel');\n    if (typeof audioLevel === 'number') {\n      audioLevel = Math.round(audioLevel * CHROME_LEGACY_MAX_AUDIO_LEVEL);\n      if (isRemote) {\n        standardizedStats.audioOutputLevel = audioLevel;\n      } else {\n        standardizedStats.audioInputLevel = audioLevel;\n      }\n    }\n    var totalPacketSendDalay = getStatValue('totalPacketSendDelay');\n    if (typeof totalPacketSendDalay === 'number') {\n      standardizedStats.totalPacketSendDelay = totalPacketSendDalay;\n    }\n    var totalEncodeTime = getStatValue('totalEncodeTime');\n    if (typeof totalEncodeTime === 'number') {\n      standardizedStats.totalEncodeTime = totalEncodeTime;\n    }\n    var framesEncoded = getStatValue('framesEncoded');\n    if (typeof framesEncoded === 'number') {\n      standardizedStats.framesEncoded = framesEncoded;\n    }\n    var estimatedPlayoutTimestamp = getStatValue('estimatedPlayoutTimestamp');\n    if (typeof estimatedPlayoutTimestamp === 'number') {\n      standardizedStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n    }\n    var totalDecodeTime = getStatValue('totalDecodeTime');\n    if (typeof totalDecodeTime === 'number') {\n      standardizedStats.totalDecodeTime = totalDecodeTime;\n    }\n    var framesDecoded = getStatValue('framesDecoded');\n    if (typeof framesDecoded === 'number') {\n      standardizedStats.framesDecoded = framesDecoded;\n    }\n    var jitterBufferDelay = getStatValue('jitterBufferDelay');\n    if (typeof jitterBufferDelay === 'number') {\n      standardizedStats.jitterBufferDelay = jitterBufferDelay;\n    }\n    var jitterBufferEmittedCount = getStatValue('jitterBufferEmittedCount');\n    if (typeof jitterBufferEmittedCount === 'number') {\n      standardizedStats.jitterBufferEmittedCount = jitterBufferEmittedCount;\n    }\n    stats.push(standardizedStats);\n  });\n  return stats;\n}\n/**\n * Standardize the MediaStreamTrack's statistics in Firefox.\n * @param {RTCStatsReport} response\n * @param {object} options - Used for testing\n * @returns {StandardizedTrackStatsReport}\n */\nfunction standardizeFirefoxStats(response, _a) {\n  if (response === void 0) {\n    response = new Map();\n  }\n  var isRemote = _a.isRemote,\n    _b = _a.simulateExceptionWhileStandardizingStats,\n    simulateExceptionWhileStandardizingStats = _b === void 0 ? false : _b;\n  if (simulateExceptionWhileStandardizingStats) {\n    throw new Error('Error while gathering stats');\n  }\n  // NOTE(mroberts): If getStats is called on a closed RTCPeerConnection,\n  // Firefox returns undefined instead of an RTCStatsReport. We workaround this\n  // here. See the following bug for more details:\n  //\n  //   https://bugzilla.mozilla.org/show_bug.cgi?id=1377225\n  //\n  var inbound = null;\n  var outbound = null;\n  // NOTE(mmalavalli): Starting from Firefox 63, RTC{Inbound, Outbound}RTPStreamStats.isRemote\n  // will be deprecated, followed by its removal in Firefox 66. Also, trying to\n  // access members of the remote RTC{Inbound, Outbound}RTPStreamStats without\n  // using RTCStatsReport.get(remoteId) will trigger console warnings. So, we\n  // no longer depend on \"isRemote\", and we call RTCStatsReport.get(remoteId)\n  // to access the remote RTC{Inbound, Outbound}RTPStreamStats.\n  //\n  // Source: https://blog.mozilla.org/webrtc/getstats-isremote-65/\n  //\n  response.forEach(function (stat) {\n    var isRemote = stat.isRemote,\n      remoteId = stat.remoteId,\n      type = stat.type;\n    if (isRemote) {\n      return;\n    }\n    switch (type) {\n      case 'inbound-rtp':\n        inbound = stat;\n        outbound = getStatById(response, remoteId);\n        break;\n      case 'outbound-rtp':\n        outbound = stat;\n        inbound = getStatById(response, remoteId);\n        break;\n    }\n  });\n  var first = isRemote ? inbound : outbound;\n  var second = isRemote ? outbound : inbound;\n  function getStatValue(name) {\n    if (first && typeof first[name] !== 'undefined') {\n      return first[name];\n    }\n    if (second && typeof second[name] !== 'undefined') {\n      return second[name];\n    }\n    return null;\n  }\n  var standardizedStats = {};\n  var timestamp = getStatValue('timestamp');\n  standardizedStats.timestamp = Math.round(timestamp);\n  var ssrc = getStatValue('ssrc');\n  if (typeof ssrc === 'number') {\n    standardizedStats.ssrc = String(ssrc);\n  }\n  var bytesSent = getStatValue('bytesSent');\n  if (typeof bytesSent === 'number') {\n    standardizedStats.bytesSent = bytesSent;\n  }\n  var packetsLost = getStatValue('packetsLost');\n  if (typeof packetsLost === 'number') {\n    standardizedStats.packetsLost = packetsLost;\n  }\n  var packetsSent = getStatValue('packetsSent');\n  if (typeof packetsSent === 'number') {\n    standardizedStats.packetsSent = packetsSent;\n  }\n  var roundTripTime = getStatValue('roundTripTime');\n  if (typeof roundTripTime === 'number') {\n    // roundTripTime is double - measured in seconds.\n    // https://www.w3.org/TR/webrtc-stats/#dom-rtcremoteinboundrtpstreamstats-roundtriptime\n    // cover it to milliseconds (and make it integer)\n    standardizedStats.roundTripTime = Math.round(roundTripTime * 1000);\n  }\n  var jitter = getStatValue('jitter');\n  if (typeof jitter === 'number') {\n    standardizedStats.jitter = Math.round(jitter * 1000);\n  }\n  var frameRateSent = getStatValue('framerateMean');\n  if (typeof frameRateSent === 'number') {\n    standardizedStats.frameRateSent = Math.round(frameRateSent);\n  }\n  var bytesReceived = getStatValue('bytesReceived');\n  if (typeof bytesReceived === 'number') {\n    standardizedStats.bytesReceived = bytesReceived;\n  }\n  var packetsReceived = getStatValue('packetsReceived');\n  if (typeof packetsReceived === 'number') {\n    standardizedStats.packetsReceived = packetsReceived;\n  }\n  var frameRateReceived = getStatValue('framerateMean');\n  if (typeof frameRateReceived === 'number') {\n    standardizedStats.frameRateReceived = Math.round(frameRateReceived);\n  }\n  var totalPacketSendDalay = getStatValue('totalPacketSendDelay');\n  if (typeof totalPacketSendDalay === 'number') {\n    standardizedStats.totalPacketSendDelay = totalPacketSendDalay;\n  }\n  var totalEncodeTime = getStatValue('totalEncodeTime');\n  if (typeof totalEncodeTime === 'number') {\n    standardizedStats.totalEncodeTime = totalEncodeTime;\n  }\n  var framesEncoded = getStatValue('framesEncoded');\n  if (typeof framesEncoded === 'number') {\n    standardizedStats.framesEncoded = framesEncoded;\n  }\n  var estimatedPlayoutTimestamp = getStatValue('estimatedPlayoutTimestamp');\n  if (typeof estimatedPlayoutTimestamp === 'number') {\n    standardizedStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n  }\n  var totalDecodeTime = getStatValue('totalDecodeTime');\n  if (typeof totalDecodeTime === 'number') {\n    standardizedStats.totalDecodeTime = totalDecodeTime;\n  }\n  var framesDecoded = getStatValue('framesDecoded');\n  if (typeof framesDecoded === 'number') {\n    standardizedStats.framesDecoded = framesDecoded;\n  }\n  var jitterBufferDelay = getStatValue('jitterBufferDelay');\n  if (typeof jitterBufferDelay === 'number') {\n    standardizedStats.jitterBufferDelay = jitterBufferDelay;\n  }\n  var jitterBufferEmittedCount = getStatValue('jitterBufferEmittedCount');\n  if (typeof jitterBufferEmittedCount === 'number') {\n    standardizedStats.jitterBufferEmittedCount = jitterBufferEmittedCount;\n  }\n  return standardizedStats;\n}\n/**\n * Standardized RTCIceCandidate statistics.\n * @typedef {object} StandardizedIceCandidateStatsReport\n * @property {'host'|'prflx'|'relay'|'srflx'} candidateType\n * @property {string} ip\n * @property {number} port\n * @property {number} priority\n * @property {'tcp'|'udp'} protocol\n * @property {string} url\n */\n/**\n * Standardized local RTCIceCandidate statistics.\n * @typedef {StandardizedIceCandidateStatsReport} StandardizedLocalIceCandidateStatsReport\n * @property {boolean} [deleted=false]\n * @property {'tcp'|'tls'|'udp'} relayProtocol\n */\n/**\n * Standardized active RTCIceCandidate pair statistics.\n * @typedef {object} StandardizedActiveIceCandidatePairStatsReport\n * @property {number} availableIncomingBitrate\n * @property {number} availableOutgoingBitrate\n * @property {number} bytesReceived\n * @property {number} bytesSent\n * @property {number} consentRequestsSent\n * @property {number} currentRoundTripTime\n * @property {number} lastPacketReceivedTimestamp\n * @property {number} lastPacketSentTimestamp\n * @property {StandardizedLocalIceCandidateStatsReport} localCandidate\n * @property {boolean} nominated\n * @property {number} priority\n * @property {boolean} readable\n * @property {StandardizedIceCandidateStatsReport} remoteCandidate\n * @property {number} requestsReceived\n * @property {number} requestsSent\n * @property {number} responsesReceived\n * @property {number} responsesSent\n * @property {number} retransmissionsReceived\n * @property {number} retransmissionsSent\n * @property {'frozen'|'waiting'|'in-progress'|'failed'|'succeeded'} state\n * @property {number} totalRoundTripTime\n * @property {string} transportId\n * @property {boolean} writable\n */\n/**\n * Standardized {@link RTCPeerConnection} statistics.\n * @typedef {Object} StandardizedStatsResponse\n * @property {StandardizedActiveIceCandidatePairStatsReport} activeIceCandidatePair - Stats for active ICE candidate pair\n * @property Array<StandardizedTrackStatsReport> localAudioTrackStats - Stats for local audio MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> localVideoTrackStats - Stats for local video MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> remoteAudioTrackStats - Stats for remote audio MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> remoteVideoTrackStats - Stats for remote video MediaStreamTracks\n */\n/**\n * Standardized MediaStreamTrack statistics.\n * @typedef {Object} StandardizedTrackStatsReport\n * @property {string} trackId - MediaStreamTrack ID\n * @property {string} ssrc - SSRC of the MediaStreamTrack\n * @property {number} timestamp - The Unix timestamp in milliseconds\n * @property {string} [codecName] - Name of the codec used to encode the MediaStreamTrack's media\n * @property {number} [roundTripTime] - Round trip time in milliseconds\n * @property {number} [jitter] - Jitter in milliseconds\n * @property {number} [frameWidthInput] - Width in pixels of the local video MediaStreamTrack's captured frame\n * @property {number} [frameHeightInput] - Height in pixels of the local video MediaStreamTrack's captured frame\n * @property {number} [frameWidthSent] - Width in pixels of the local video MediaStreamTrack's encoded frame\n * @property {number} [frameHeightSent] - Height in pixels of the local video MediaStreamTrack's encoded frame\n * @property {number} [frameWidthReceived] - Width in pixels of the remote video MediaStreamTrack's received frame\n * @property {number} [frameHeightReceived] - Height in pixels of the remote video MediaStreamTrack's received frame\n * @property {number} [frameRateInput] - Captured frames per second of the local video MediaStreamTrack\n * @property {number} [frameRateSent] - Frames per second of the local video MediaStreamTrack's encoded video\n * @property {number} [frameRateReceived] - Frames per second of the remote video MediaStreamTrack's received video\n * @property {number} [bytesReceived] - Number of bytes of the remote MediaStreamTrack's media received\n * @property {number} [bytesSent] - Number of bytes of the local MediaStreamTrack's media sent\n * @property {number} [packetsLost] - Number of packets of the MediaStreamTrack's media lost\n * @property {number} [packetsReceived] - Number of packets of the remote MediaStreamTrack's media received\n * @property {number} [packetsSent] - Number of packets of the local MediaStreamTrack's media sent\n * @property {number} [totalPacketSendDelay] - The total number of seconds that the local MediaStreamTrack's packets\n *  have spent buffered locally before being sent over the network\n * @property {number} [totalEncodeTime] - The total number of seconds spent on encoding the local MediaStreamTrack's frames\n * @property {number} [framesEncoded] - The total number of frames of the local MediaStreamTrack that have been encoded sor far\n * @property {number} [estimatedPlayoutTimestamp] - The estimated playout time of the remote MediaStreamTrack\n * @property {number} [totalDecodeTime] - The total number of seconds spent on decoding the remote MediaStreamTrack's frames\n * @property {number} [framesDecoded] - The total number of frames of the remote MediaStreamTrack that have been decoded sor far\n * @property {number} [jitterBufferDelay] - The sum of the time, in seconds, each audio sample or a video frame of the remote\n *   MediaStreamTrack takes from the time the first packet is received by the jitter buffer to the time it exits the jitter buffer\n * @property {number} [jitterBufferEmittedCount] - The total number of audio samples or video frames that have come out of the jitter buffer\n * @property {AudioLevel} [audioInputLevel] - The {@link AudioLevel} of the local audio MediaStreamTrack\n * @property {AudioLevel} [audioOutputLevel] - The {@link AudioLevel} of the remote video MediaStreamTrack\n */\nmodule.exports = getStats;","map":{"version":3,"names":["_a","require","flatMap","guessBrowser","guessBrowserVersion","getSdpFormat","guess","guessVersion","isChrome","isFirefox","isSafari","chromeMajorVersion","major","CHROME_LEGACY_MAX_AUDIO_LEVEL","getStatById","report","id","get","find","s","filterStatsByTrack","arrayOrMap","track","isRemote","allStats","Array","isArray","Map","map","stat","String","Math","random","statsMap_1","Object","keys","forEach","key","set","filteredReport","trackId","trackKind","kind","primaryStats","primaryStatsId","ssrc","allStats_1","__values","allStats_1_1","next","done","_m","__read","value","type","trackIdentifier","candidateInbounds","allStats_2","allStats_2_1","_o","mediaType","push","length","allStats_3","allStats_3_1","_p","directlyRelatedIds","Set","codecId","add","transportId","remoteId","allStats_4","allStats_4_1","_q","directlyRelatedIds_1","directlyRelatedIds_1_1","relatedId","has","allStats_5","allStats_5_1","_r","allStats_6","allStats_6_1","_s","mediaSourceId","outboundId","allStats_7","e_8","allStats_7_1","_t","remoteStat","localId","directlyRelatedIds_2","directlyRelatedIds_2_1","selectedPairId","transportIds","_u","values","_v","transportIds_1","transportIds_1_1","transport","selectedCandidatePairId","localCertificateId","remoteCertificateId","selectedPair","localCandidateId","remoteCandidateId","getStats","peerConnection","options","Promise","reject","Error","_getStats","localAudioTracks","getTracks","localVideoTracks","remoteAudioTracks","remoteVideoTracks","statsResponse","activeIceCandidatePair","localAudioTrackStats","localVideoTrackStats","remoteAudioTrackStats","remoteVideoTrackStats","trackStatsPromises","_b","tracks","statsArrayName","getTrackStats","assign","then","trackStatsArray","trackStats","all","getActiveIceCandidatePairStats","activeIceCandidatePairStatsReport","testForChrome","testForSafari","standardizeChromeOrSafariActiveIceCandidatePairStats","testForFirefox","standardizeFirefoxActiveIceCandidatePairStats","stats","activeCandidatePairStats","from","nominated","activeLocalCandidateStats","activeRemoteCandidateStats","standardizedCandidateStatsKeys","standardizedLocalCandidateStatsKeys","concat","standatdizedLocalCandidateStatsReport","reduce","standardizedRemoteCandidateStatsReport","fixup","state","localCandidate","remoteCandidate","ffKeys","candidateTypes","host","peerreflexive","relayed","serverreflexive","localStatKey","remoteStatKey","localOrRemote","getSendersOrReceivers","filter","getStreams","stream","isRemoteTrack","getReceivers","receivers","receivers_1","receivers_1_1","receiver","getRemoteStreams","remoteStreams","remoteStreams_1","remoteStreams_1_1","tracks_1","e_14","tracks_1_1","remoteTrack","chromeOrSafariGetTrackStats","firefoxGetTrackStats","join","log","resolve","response","standardizeChromeLegacyStats","info","standardizeChromeOrSafariStats","catch","warn","filteredStats","standardizeFirefoxStats","ssrcReport","result","standardizedStats","timestamp","round","Number","names","name","codecName","roundTripTime","jitter","frameWidthInput","frameHeightInput","frameWidthSent","frameHeightSent","frameWidthReceived","frameHeightReceived","frameRateInput","frameRateSent","frameRateReceived","simulateExceptionWhileStandardizingStats","inbound","outbound","remoteInbound","remoteOutbound","codec","localMedia","remoteSource","mainSources","source","statSources","getStatValue","sourceFound","statSource","mimeType","split","frameWidth","width","frameHeight","height","framesPerSecond","bytesReceived","bytesSent","packetsLost","packetsReceived","packetsSent","audioLevel","audioOutputLevel","audioInputLevel","totalPacketSendDalay","totalPacketSendDelay","totalEncodeTime","framesEncoded","estimatedPlayoutTimestamp","totalDecodeTime","framesDecoded","jitterBufferDelay","jitterBufferEmittedCount","first","second","module","exports"],"sources":["C:\\Users\\gamin\\OneDrive\\Desktop\\Project\\Whiteboard\\live-whiteboard-app\\whiteboard-frontend\\node_modules\\twilio-video\\lib\\webrtc\\getstats.js"],"sourcesContent":["'use strict';\n\nconst { flatMap, guessBrowser, guessBrowserVersion } = require('./util');\nconst { getSdpFormat } = require('./util/sdp');\n\nconst guess = guessBrowser();\nconst guessVersion = guessBrowserVersion();\nconst isChrome = guess === 'chrome';\nconst isFirefox = guess === 'firefox';\nconst isSafari = guess === 'safari';\n\nconst chromeMajorVersion = isChrome ? guessVersion.major : null;\n\n\nconst CHROME_LEGACY_MAX_AUDIO_LEVEL = 32767;\n\n/**\n * Helper function to find a specific stat from a report.\n * Browsers provide the stats report as a Map,\n * but Citrix provides stats report as an array.\n * @private\n */\nfunction getStatById(report, id) {\n  if (typeof report.get === 'function') {\n    return report.get(id);\n  }\n  return report.find(s => s.id === id);\n}\n\n/**\n * Filter the RTCStatsReport to only include stats related to a specific track.\n * This function is designed for use with Citrix, where getStats(track) is not supported.\n * It includes specific logic to filter the statistics report returned by Citrix and should\n * only be used when getStats(track) fails.\n *\n * @param {RTCStatsReport|Array<RTCStats>} arrayOrMap - Full stats report or array of stats\n * @param {MediaStreamTrack} track - The track to filter by\n * @param {boolean} [isRemote=false] - Whether this is a remote track\n * @returns {RTCStatsReport} Filtered stats\n * @private\n */\nfunction filterStatsByTrack(arrayOrMap, track, isRemote = false) {\n  // Handle different input types\n  let allStats;\n  if (Array.isArray(arrayOrMap)) {\n    allStats = new Map(arrayOrMap.map(stat => [stat.id || String(Math.random()), stat]));\n  } else if (arrayOrMap instanceof Map) {\n    allStats = arrayOrMap;\n  } else if (typeof arrayOrMap === 'object' && arrayOrMap !== null) {\n    // Handle object-style stats (non-standard)\n    const statsMap = new Map();\n    Object.keys(arrayOrMap).forEach(key => {\n      statsMap.set(key, arrayOrMap[key]);\n    });\n    allStats = statsMap;\n  } else {\n    return new Map();\n  }\n\n  if (!allStats || !track) {\n    return new Map();\n  }\n\n  const filteredReport = new Map();\n  const trackId = track.id;\n  const trackKind = track.kind;\n\n  // Step 1: Find the primary track-specific stats\n  let primaryStats = null;\n  let primaryStatsId = null;\n  let ssrc = null;\n\n  // Find the primary stat for this track (inbound-rtp for remote, media-source for local)\n  for (const [id, stat] of allStats) {\n    // For remote tracks, find matching inbound-rtp with matching trackIdentifier\n    if (isRemote && stat.type === 'inbound-rtp' && stat.trackIdentifier === trackId) {\n      primaryStats = stat;\n      primaryStatsId = id;\n      ssrc = stat.ssrc;\n      break;\n    } else if (!isRemote && stat.type === 'media-source' && stat.trackIdentifier === trackId) {\n      // For local tracks, find matching media-source with matching trackIdentifier\n      primaryStats = stat;\n      primaryStatsId = id;\n      break;\n    } else if (stat.type === 'track' && stat.trackIdentifier === trackId) {\n      // Also check for track stats with matching trackIdentifier\n      if (!primaryStats) {\n        primaryStats = stat;\n        primaryStatsId = id;\n      }\n    }\n  }\n\n  // If no primary stat was found using the trackId, try a more lenient approach\n  if (!primaryStats) {\n    // For remote tracks, try to find an inbound-rtp of the correct kind\n    if (isRemote) {\n      // Get all inbound-rtp stats of the right kind\n      const candidateInbounds = [];\n      for (const [id, stat] of allStats) {\n        if (stat.type === 'inbound-rtp' && (stat.kind === trackKind || stat.mediaType === trackKind)) {\n          candidateInbounds.push({ id, stat });\n        }\n      }\n\n      // If there are multiple candidates, we need to be careful\n      if (candidateInbounds.length === 1) {\n        // Only one candidate, use it\n        primaryStats = candidateInbounds[0].stat;\n        primaryStatsId = candidateInbounds[0].id;\n        ssrc = primaryStats.ssrc;\n      } else if (candidateInbounds.length > 1) {\n        // Multiple candidates - if we have the trackId, try to match by mid\n        // otherwise just take the first one\n        primaryStats = candidateInbounds[0].stat;\n        primaryStatsId = candidateInbounds[0].id;\n        ssrc = primaryStats.ssrc;\n      }\n    } else {\n      // For local tracks, try to find a media-source of the correct kind\n      for (const [id, stat] of allStats) {\n        if (stat.type === 'media-source' && stat.kind === trackKind) {\n          primaryStats = stat;\n          primaryStatsId = id;\n          break;\n        }\n      }\n    }\n  }\n\n  // If we still didn't find a primary stat, return an empty report\n  if (!primaryStats) {\n    return filteredReport;\n  }\n\n  // Step 2: Add the primary stat\n  filteredReport.set(primaryStatsId, primaryStats);\n\n  // Step 3: Add related stats using direct references\n  const directlyRelatedIds = new Set();\n\n  // Track different types of related IDs\n  if (isRemote) {\n    // For remote tracks (inbound-rtp is primary)\n    if (primaryStats.codecId) { directlyRelatedIds.add(primaryStats.codecId); }\n    if (primaryStats.transportId) { directlyRelatedIds.add(primaryStats.transportId); }\n    if (primaryStats.remoteId) { directlyRelatedIds.add(primaryStats.remoteId); }\n\n    // Find remote-outbound-rtp based on ssrc\n    if (ssrc) {\n      for (const [id, stat] of allStats) {\n        if (stat.type === 'remote-outbound-rtp' && stat.ssrc === ssrc) {\n          directlyRelatedIds.add(id);\n        }\n      }\n    }\n\n    // Add codec, transport, and remote stats\n    for (const relatedId of directlyRelatedIds) {\n      if (allStats.has(relatedId)) {\n        filteredReport.set(relatedId, allStats.get(relatedId));\n      }\n    }\n\n    // Add the track stats if it exists\n    for (const [id, stat] of allStats) {\n      if (stat.type === 'track' && stat.trackIdentifier === trackId) {\n        filteredReport.set(id, stat);\n      }\n    }\n  } else {\n    // For local tracks (media-source is primary)\n\n    // Find outbound-rtp that references this media source\n    for (const [id, stat] of allStats) {\n      if (stat.type === 'outbound-rtp' && stat.mediaSourceId === primaryStatsId) {\n        filteredReport.set(id, stat);\n\n        // Add codec and transport\n        if (stat.codecId) { directlyRelatedIds.add(stat.codecId); }\n        if (stat.transportId) { directlyRelatedIds.add(stat.transportId); }\n\n        // Find remote-inbound-rtp that references this outbound-rtp\n        const outboundId = id;\n        for (const [remoteId, remoteStat] of allStats) {\n          if (remoteStat.type === 'remote-inbound-rtp' && remoteStat.localId === outboundId) {\n            filteredReport.set(remoteId, remoteStat);\n          }\n        }\n      }\n    }\n\n    // Add codec and transport stats\n    for (const relatedId of directlyRelatedIds) {\n      if (allStats.has(relatedId)) {\n        filteredReport.set(relatedId, allStats.get(relatedId));\n      }\n    }\n  }\n\n  // Step 4: Add candidate pair and certificate info for context\n  // This is useful information that applies to all tracks\n  // but doesn't risk mixing data between tracks\n  let selectedPairId = null;\n  const transportIds = new Set();\n\n  // Find all transport IDs referenced in our filtered stats\n  for (const stat of filteredReport.values()) {\n    if (stat.transportId) {\n      transportIds.add(stat.transportId);\n    }\n  }\n\n  // Add the transports\n  for (const transportId of transportIds) {\n    if (allStats.has(transportId)) {\n      const transport = allStats.get(transportId);\n      filteredReport.set(transportId, transport);\n\n      // Track the selected candidate pair\n      if (transport.selectedCandidatePairId) {\n        selectedPairId = transport.selectedCandidatePairId;\n      }\n\n      // Add certificate info\n      if (transport.localCertificateId && allStats.has(transport.localCertificateId)) {\n        filteredReport.set(transport.localCertificateId, allStats.get(transport.localCertificateId));\n      }\n      if (transport.remoteCertificateId && allStats.has(transport.remoteCertificateId)) {\n        filteredReport.set(transport.remoteCertificateId, allStats.get(transport.remoteCertificateId));\n      }\n    }\n  }\n\n  // Add only the selected candidate pair, not all candidate pairs\n  if (selectedPairId && allStats.has(selectedPairId)) {\n    const selectedPair = allStats.get(selectedPairId);\n    filteredReport.set(selectedPairId, selectedPair);\n\n    // Add the local and remote candidates for the selected pair\n    if (selectedPair.localCandidateId && allStats.has(selectedPair.localCandidateId)) {\n      filteredReport.set(selectedPair.localCandidateId, allStats.get(selectedPair.localCandidateId));\n    }\n    if (selectedPair.remoteCandidateId && allStats.has(selectedPair.remoteCandidateId)) {\n      filteredReport.set(selectedPair.remoteCandidateId, allStats.get(selectedPair.remoteCandidateId));\n    }\n  }\n\n  return filteredReport;\n}\n\n/**\n * Get the standardized {@link RTCPeerConnection} statistics.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options] - Used for testing\n * @returns {Promise.<StandardizedStatsResponse>}\n */\nfunction getStats(peerConnection, options) {\n  if (!(peerConnection && typeof peerConnection.getStats === 'function')) {\n    return Promise.reject(new Error('Given PeerConnection does not support getStats'));\n  }\n  return _getStats(peerConnection, options);\n}\n\n/**\n * getStats() implementation.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options] - Used for testing\n * @returns {Promise.<StandardizedStatsResponse>}\n */\nfunction _getStats(peerConnection, options) {\n  const localAudioTracks = getTracks(peerConnection, 'audio', 'local');\n  const localVideoTracks = getTracks(peerConnection, 'video', 'local');\n  const remoteAudioTracks = getTracks(peerConnection, 'audio');\n  const remoteVideoTracks = getTracks(peerConnection, 'video');\n\n  const statsResponse = {\n    activeIceCandidatePair: null,\n    localAudioTrackStats: [],\n    localVideoTrackStats: [],\n    remoteAudioTrackStats: [],\n    remoteVideoTrackStats: []\n  };\n\n  const trackStatsPromises = flatMap([\n    [localAudioTracks, 'localAudioTrackStats', false],\n    [localVideoTracks, 'localVideoTrackStats', false],\n    [remoteAudioTracks, 'remoteAudioTrackStats', true],\n    [remoteVideoTracks, 'remoteVideoTrackStats', true]\n  ], ([tracks, statsArrayName, isRemote]) => {\n    return tracks.map(track => {\n      return getTrackStats(peerConnection, track, Object.assign({ isRemote }, options)).then(trackStatsArray => {\n        trackStatsArray.forEach(trackStats => {\n          trackStats.trackId = track.id;\n          statsResponse[statsArrayName].push(trackStats);\n        });\n      });\n    });\n  });\n\n  return Promise.all(trackStatsPromises).then(() => {\n    return getActiveIceCandidatePairStats(peerConnection, options);\n  }).then(activeIceCandidatePairStatsReport => {\n    statsResponse.activeIceCandidatePair = activeIceCandidatePairStatsReport;\n    return statsResponse;\n  });\n}\n\n/**\n * Generate the {@link StandardizedActiveIceCandidatePairStatsReport} for the\n * {@link RTCPeerConnection}.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options]\n * @returns {Promise<StandardizedActiveIceCandidatePairStatsReport>}\n */\nfunction getActiveIceCandidatePairStats(peerConnection, options = {}) {\n  if (typeof options.testForChrome !== 'undefined' || isChrome\n    || typeof options.testForSafari  !== 'undefined' || isSafari) {\n    return peerConnection.getStats().then(\n      standardizeChromeOrSafariActiveIceCandidatePairStats);\n  }\n  if (typeof options.testForFirefox !== 'undefined' || isFirefox) {\n    return peerConnection.getStats().then(standardizeFirefoxActiveIceCandidatePairStats);\n  }\n  return Promise.reject(new Error('RTCPeerConnection#getStats() not supported'));\n}\n\n/**\n * Standardize the active RTCIceCandidate pair's statistics in Chrome or Safari.\n * @param {RTCStatsReport} stats\n * @returns {?StandardizedActiveIceCandidatePairStatsReport}\n */\nfunction standardizeChromeOrSafariActiveIceCandidatePairStats(stats) {\n  const activeCandidatePairStats = Array.from(stats.values()).find(\n    ({ nominated, type }) => type === 'candidate-pair' && nominated\n  );\n\n  if (!activeCandidatePairStats) {\n    return null;\n  }\n\n  const activeLocalCandidateStats = getStatById(stats, activeCandidatePairStats.localCandidateId);\n  const activeRemoteCandidateStats = getStatById(stats, activeCandidatePairStats.remoteCandidateId);\n\n  const standardizedCandidateStatsKeys = [\n    { key: 'candidateType', type: 'string' },\n    { key: 'ip', type: 'string' },\n    { key: 'port', type: 'number' },\n    { key: 'priority', type: 'number' },\n    { key: 'protocol', type: 'string' },\n    { key: 'url', type: 'string' }\n  ];\n\n  const standardizedLocalCandidateStatsKeys = standardizedCandidateStatsKeys.concat([\n    { key: 'deleted', type: 'boolean' },\n    { key: 'relayProtocol', type: 'string' }\n  ]);\n\n  const standatdizedLocalCandidateStatsReport = activeLocalCandidateStats\n    ? standardizedLocalCandidateStatsKeys.reduce((report, { key, type }) => {\n      report[key] = typeof activeLocalCandidateStats[key] === type\n        ? activeLocalCandidateStats[key]\n        : key === 'deleted' ? false : null;\n      return report;\n    }, {})\n    : null;\n\n  const standardizedRemoteCandidateStatsReport = activeRemoteCandidateStats\n    ? standardizedCandidateStatsKeys.reduce((report, { key, type }) => {\n      report[key] = typeof activeRemoteCandidateStats[key] === type\n        ? activeRemoteCandidateStats[key]\n        : null;\n      return report;\n    }, {})\n    : null;\n\n  return [\n    { key: 'availableIncomingBitrate', type: 'number' },\n    { key: 'availableOutgoingBitrate', type: 'number' },\n    { key: 'bytesReceived', type: 'number' },\n    { key: 'bytesSent', type: 'number' },\n    { key: 'consentRequestsSent', type: 'number' },\n    { key: 'currentRoundTripTime', type: 'number' },\n    { key: 'lastPacketReceivedTimestamp', type: 'number' },\n    { key: 'lastPacketSentTimestamp', type: 'number' },\n    { key: 'nominated', type: 'boolean' },\n    { key: 'priority', type: 'number' },\n    { key: 'readable', type: 'boolean' },\n    { key: 'requestsReceived', type: 'number' },\n    { key: 'requestsSent', type: 'number' },\n    { key: 'responsesReceived', type: 'number' },\n    { key: 'responsesSent', type: 'number' },\n    { key: 'retransmissionsReceived', type: 'number' },\n    { key: 'retransmissionsSent', type: 'number' },\n    { key: 'state', type: 'string', fixup: state => { return state === 'inprogress' ? 'in-progress' : state; } },\n    { key: 'totalRoundTripTime', type: 'number' },\n    { key: 'transportId', type: 'string' },\n    { key: 'writable', type: 'boolean' }\n  ].reduce((report, { key, type, fixup }) => {\n    report[key] = typeof activeCandidatePairStats[key] === type\n      ? (fixup ? fixup(activeCandidatePairStats[key]) : activeCandidatePairStats[key])\n      : null;\n    return report;\n  }, {\n    localCandidate: standatdizedLocalCandidateStatsReport,\n    remoteCandidate: standardizedRemoteCandidateStatsReport\n  });\n}\n\n/**\n * Standardize the active RTCIceCandidate pair's statistics in Firefox.\n * @param {RTCStatsReport} stats\n * @returns {?StandardizedActiveIceCandidatePairStatsReport}\n */\nfunction standardizeFirefoxActiveIceCandidatePairStats(stats) {\n  const activeCandidatePairStats = Array.from(stats.values()).find(\n    ({ nominated, type }) => type === 'candidate-pair' && nominated\n  );\n\n  if (!activeCandidatePairStats) {\n    return null;\n  }\n\n  const activeLocalCandidateStats = getStatById(stats, activeCandidatePairStats.localCandidateId);\n  const activeRemoteCandidateStats = getStatById(stats, activeCandidatePairStats.remoteCandidateId);\n\n  const standardizedCandidateStatsKeys = [\n    { key: 'candidateType', type: 'string' },\n    { key: 'ip', ffKeys: ['address', 'ipAddress'], type: 'string' },\n    { key: 'port', ffKeys: ['portNumber'], type: 'number' },\n    { key: 'priority', type: 'number' },\n    { key: 'protocol', ffKeys: ['transport'], type: 'string' },\n    { key: 'url', type: 'string' }\n  ];\n\n  const standardizedLocalCandidateStatsKeys = standardizedCandidateStatsKeys.concat([\n    { key: 'deleted', type: 'boolean' },\n    { key: 'relayProtocol', type: 'string' }\n  ]);\n\n  const candidateTypes = {\n    host: 'host',\n    peerreflexive: 'prflx',\n    relayed: 'relay',\n    serverreflexive: 'srflx'\n  };\n\n  const standatdizedLocalCandidateStatsReport = activeLocalCandidateStats\n    ? standardizedLocalCandidateStatsKeys.reduce((report, { ffKeys, key, type }) => {\n      const localStatKey = ffKeys && ffKeys.find(key => key in activeLocalCandidateStats) || key;\n      report[key] = typeof activeLocalCandidateStats[localStatKey] === type\n        ? localStatKey === 'candidateType'\n          ? candidateTypes[activeLocalCandidateStats[localStatKey]] || activeLocalCandidateStats[localStatKey]\n          : activeLocalCandidateStats[localStatKey]\n        : localStatKey === 'deleted' ? false : null;\n      return report;\n    }, {})\n    : null;\n\n  const standardizedRemoteCandidateStatsReport = activeRemoteCandidateStats\n    ? standardizedCandidateStatsKeys.reduce((report, { ffKeys, key, type }) => {\n      const remoteStatKey = ffKeys && ffKeys.find(key => key in activeRemoteCandidateStats) || key;\n      report[key] = typeof activeRemoteCandidateStats[remoteStatKey] === type\n        ? remoteStatKey === 'candidateType'\n          ? candidateTypes[activeRemoteCandidateStats[remoteStatKey]] || activeRemoteCandidateStats[remoteStatKey]\n          : activeRemoteCandidateStats[remoteStatKey]\n        : null;\n      return report;\n    }, {})\n    : null;\n\n  return [\n    { key: 'availableIncomingBitrate', type: 'number' },\n    { key: 'availableOutgoingBitrate', type: 'number' },\n    { key: 'bytesReceived', type: 'number' },\n    { key: 'bytesSent', type: 'number' },\n    { key: 'consentRequestsSent', type: 'number' },\n    { key: 'currentRoundTripTime', type: 'number' },\n    { key: 'lastPacketReceivedTimestamp', type: 'number' },\n    { key: 'lastPacketSentTimestamp', type: 'number' },\n    { key: 'nominated', type: 'boolean' },\n    { key: 'priority', type: 'number' },\n    { key: 'readable', type: 'boolean' },\n    { key: 'requestsReceived', type: 'number' },\n    { key: 'requestsSent', type: 'number' },\n    { key: 'responsesReceived', type: 'number' },\n    { key: 'responsesSent', type: 'number' },\n    { key: 'retransmissionsReceived', type: 'number' },\n    { key: 'retransmissionsSent', type: 'number' },\n    { key: 'state', type: 'string' },\n    { key: 'totalRoundTripTime', type: 'number' },\n    { key: 'transportId', type: 'string' },\n    { key: 'writable', type: 'boolean' }\n  ].reduce((report, { key, type }) => {\n    report[key] = typeof activeCandidatePairStats[key] === type\n      ? activeCandidatePairStats[key]\n      : null;\n    return report;\n  }, {\n    localCandidate: standatdizedLocalCandidateStatsReport,\n    remoteCandidate: standardizedRemoteCandidateStatsReport\n  });\n}\n\n/**\n * Get local/remote audio/video MediaStreamTracks.\n * @param {RTCPeerConnection} peerConnection - The RTCPeerConnection\n * @param {string} kind - 'audio' or 'video'\n * @param {string} [localOrRemote] - 'local' or 'remote'\n * @returns {Array<MediaStreamTrack>}\n */\nfunction getTracks(peerConnection, kind, localOrRemote) {\n  const getSendersOrReceivers = localOrRemote === 'local' ? 'getSenders' : 'getReceivers';\n  if (peerConnection[getSendersOrReceivers]) {\n    return peerConnection[getSendersOrReceivers]()\n      .map(({ track }) => track)\n      .filter(track => track && track.kind === kind);\n  }\n  const getStreams = localOrRemote === 'local' ? 'getLocalStreams' : 'getRemoteStreams';\n  const getTracks = kind === 'audio' ? 'getAudioTracks' : 'getVideoTracks';\n  return flatMap(peerConnection[getStreams](), stream => stream[getTracks]());\n}\n\n/**\n * Determine if a track is remote by examining the PeerConnection's receivers.\n * This function is designed for use with Citrix, where getStats(track) is not supported.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @returns {boolean} True if the track is a remote track\n * @private\n */\nfunction isRemoteTrack(peerConnection, track) {\n  if (!peerConnection || !track) {\n    return false;\n  }\n\n  // Check if the track belongs to any receiver (remote)\n  if (peerConnection.getReceivers) {\n    const receivers = peerConnection.getReceivers();\n    for (const receiver of receivers) {\n      if (receiver.track && receiver.track.id === track.id) {\n        return true;\n      }\n    }\n  }\n\n  // Check remote streams if getReceivers is not available\n  if (peerConnection.getRemoteStreams) {\n    const remoteStreams = peerConnection.getRemoteStreams();\n    for (const stream of remoteStreams) {\n      const tracks = stream.getTracks();\n      for (const remoteTrack of tracks) {\n        if (remoteTrack.id === track.id) {\n          return true;\n        }\n      }\n    }\n  }\n\n  // The track is not in any remote source, so it's likely local\n  return false;\n}\n\n/**\n * Get the standardized statistics for a particular MediaStreamTrack.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @param {object} [options] - Used for testing\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\nfunction getTrackStats(peerConnection, track, options = {}) {\n  if (typeof options.testForChrome !== 'undefined' || isChrome) {\n    return chromeOrSafariGetTrackStats(peerConnection, track, options);\n  }\n  if (typeof options.testForFirefox  !== 'undefined' || isFirefox) {\n    return firefoxGetTrackStats(peerConnection, track, options);\n  }\n  if (typeof options.testForSafari  !== 'undefined' || isSafari) {\n    if (typeof options.testForSafari  !== 'undefined' || getSdpFormat() === 'unified') {\n      return chromeOrSafariGetTrackStats(peerConnection, track, options);\n    }\n    // NOTE(syerrapragada): getStats() is not supported on\n    // Safari versions where plan-b is the SDP format\n    // due to this bug: https://bugs.webkit.org/show_bug.cgi?id=192601\n    return Promise.reject(new Error([\n      'getStats() is not supported on this version of Safari',\n      'due to this bug: https://bugs.webkit.org/show_bug.cgi?id=192601'\n    ].join(' ')));\n  }\n  return Promise.reject(new Error('RTCPeerConnection#getStats() not supported'));\n}\n\n\n/**\n * Get the standardized statistics for a particular MediaStreamTrack in Chrome or Safari.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @param {object} options - Used for testing\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\nfunction chromeOrSafariGetTrackStats(peerConnection, track, options) {\n  const log = options.log;\n  if (chromeMajorVersion && chromeMajorVersion < 67) {\n    return new Promise((resolve, reject) => {\n      peerConnection.getStats(response => {\n        resolve([standardizeChromeLegacyStats(response, track)]);\n      }, null, reject);\n    });\n  }\n\n  return peerConnection.getStats(track)\n    .then(response => {\n      log.info('getStats by track successful');\n      return standardizeChromeOrSafariStats(response, options);\n    })\n    .catch(() => {\n      // NOTE(lrivas): Citrix doesn't support track-specific getStats,\n      // so this workaround tries getting all stats and filtering by track.\n      log.warn('getStats by track failed. Getting default stats');\n      return peerConnection.getStats()\n        .then(stats => {\n          log.info('getStats by default successful');\n          const isRemote = isRemoteTrack(peerConnection, track);\n          log.info(`Starting filtering stats for ${isRemote ? 'remote' : 'local'} track`);\n          const filteredStats = filterStatsByTrack(stats, track, isRemote);\n          log.info(`Completed filtering stats for ${isRemote ? 'remote' : 'local'} track`);\n          return standardizeChromeOrSafariStats(filteredStats, options);\n        });\n    });\n}\n\n/**\n * Get the standardized statistics for a particular MediaStreamTrack in Firefox.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @param {object} options\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\nfunction firefoxGetTrackStats(peerConnection, track, options) {\n  return peerConnection.getStats(track).then(response => {\n    return [standardizeFirefoxStats(response, options)];\n  });\n}\n/**\n * Standardize the MediaStreamTrack's legacy statistics in Chrome.\n * @param {RTCStatsResponse} response\n * @param {MediaStreamTrack} track\n * @returns {StandardizedTrackStatsReport}\n */\nfunction standardizeChromeLegacyStats(response, track) {\n  const ssrcReport = response.result().find(report => {\n    return report.type === 'ssrc' && report.stat('googTrackId') === track.id;\n  });\n\n  let standardizedStats = {};\n\n  if (ssrcReport) {\n    standardizedStats.timestamp = Math.round(Number(ssrcReport.timestamp));\n    standardizedStats = ssrcReport.names().reduce((stats, name) => {\n      switch (name) {\n        case 'googCodecName':\n          stats.codecName = ssrcReport.stat(name);\n          break;\n        case 'googRtt':\n          stats.roundTripTime = Number(ssrcReport.stat(name));\n          break;\n        case 'googJitterReceived':\n          stats.jitter = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameWidthInput':\n          stats.frameWidthInput = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameHeightInput':\n          stats.frameHeightInput = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameWidthSent':\n          stats.frameWidthSent = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameHeightSent':\n          stats.frameHeightSent = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameWidthReceived':\n          stats.frameWidthReceived = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameHeightReceived':\n          stats.frameHeightReceived = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameRateInput':\n          stats.frameRateInput = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameRateSent':\n          stats.frameRateSent = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameRateReceived':\n          stats.frameRateReceived = Number(ssrcReport.stat(name));\n          break;\n        case 'ssrc':\n          stats[name] = ssrcReport.stat(name);\n          break;\n        case 'bytesReceived':\n        case 'bytesSent':\n        case 'packetsLost':\n        case 'packetsReceived':\n        case 'packetsSent':\n        case 'audioInputLevel':\n        case 'audioOutputLevel':\n          stats[name] = Number(ssrcReport.stat(name));\n          break;\n      }\n\n      return stats;\n    }, standardizedStats);\n  }\n\n  return standardizedStats;\n}\n\n/**\n * Standardize the MediaStreamTrack's statistics in Chrome or Safari.\n * @param {RTCStatsReport} response\n * @param {object} options - Used for testing\n * @returns {Array<StandardizedTrackStatsReport>}\n */\nfunction standardizeChromeOrSafariStats(response, { simulateExceptionWhileStandardizingStats = false }) {\n  if (simulateExceptionWhileStandardizingStats) {\n    throw new Error('Error while gathering stats');\n  }\n  let inbound = null;\n\n  // NOTE(mpatwardhan): We should expect more than one \"outbound-rtp\" stats for a\n  // VP8 simulcast MediaStreamTrack.\n  const outbound = [];\n\n  let remoteInbound = null;\n  let remoteOutbound = null;\n  let track = null;\n  let codec = null;\n  let localMedia = null;\n\n  response.forEach(stat => {\n    const { type } = stat;\n    switch (type) {\n      case 'inbound-rtp':\n        inbound = stat;\n        break;\n      case 'outbound-rtp':\n        outbound.push(stat);\n        break;\n      case 'media-source':\n        localMedia = stat;\n        break;\n      case 'track':\n        track = stat;\n        break;\n      case 'codec':\n        codec = stat;\n        break;\n      case 'remote-inbound-rtp':\n        remoteInbound = stat;\n        break;\n      case 'remote-outbound-rtp':\n        remoteOutbound = stat;\n        break;\n    }\n  });\n\n  const isRemote = track ? track.remoteSource : !localMedia;\n  const mainSources = isRemote ? [inbound] : outbound;\n  const stats = [];\n  const remoteSource = isRemote ? remoteOutbound : remoteInbound; // remote rtp stats\n\n  mainSources.forEach(source => {\n    const standardizedStats = {};\n    const statSources = [\n      source, // local rtp stats\n      localMedia,\n      track,\n      codec,\n      remoteSource && remoteSource.ssrc === source.ssrc ? remoteSource : null, // remote rtp stats\n    ];\n\n    function getStatValue(name) {\n      const sourceFound = statSources.find(statSource => {\n        return statSource && typeof statSource[name] !== 'undefined';\n      }) || null;\n\n      return sourceFound ? sourceFound[name] : null;\n    }\n\n    const ssrc = getStatValue('ssrc');\n    if (typeof ssrc === 'number') {\n      standardizedStats.ssrc = String(ssrc);\n    }\n\n    const timestamp = getStatValue('timestamp');\n    standardizedStats.timestamp = Math.round(timestamp);\n\n    let mimeType = getStatValue('mimeType');\n    if (typeof mimeType === 'string') {\n      mimeType = mimeType.split('/');\n      standardizedStats.codecName = mimeType[mimeType.length - 1];\n    }\n\n    const roundTripTime = getStatValue('roundTripTime');\n    if (typeof roundTripTime === 'number') {\n      standardizedStats.roundTripTime = Math.round(roundTripTime * 1000);\n    }\n\n    const jitter = getStatValue('jitter');\n    if (typeof jitter === 'number') {\n      standardizedStats.jitter = Math.round(jitter * 1000);\n    }\n\n    const frameWidth = getStatValue('frameWidth');\n    if (typeof frameWidth === 'number') {\n      if (isRemote) {\n        standardizedStats.frameWidthReceived = frameWidth;\n      } else {\n        standardizedStats.frameWidthSent = frameWidth;\n        standardizedStats.frameWidthInput = track ? track.frameWidth : localMedia.width;\n      }\n    }\n\n    const frameHeight = getStatValue('frameHeight');\n    if (typeof frameHeight === 'number') {\n      if (isRemote) {\n        standardizedStats.frameHeightReceived = frameHeight;\n      } else {\n        standardizedStats.frameHeightSent = frameHeight;\n        standardizedStats.frameHeightInput = track ? track.frameHeight : localMedia.height;\n      }\n    }\n\n    const framesPerSecond = getStatValue('framesPerSecond');\n    if (typeof framesPerSecond === 'number') {\n      standardizedStats[isRemote ? 'frameRateReceived' : 'frameRateSent'] = framesPerSecond;\n    }\n\n    const bytesReceived = getStatValue('bytesReceived');\n    if (typeof bytesReceived === 'number') {\n      standardizedStats.bytesReceived = bytesReceived;\n    }\n\n    const bytesSent = getStatValue('bytesSent');\n    if (typeof bytesSent === 'number') {\n      standardizedStats.bytesSent = bytesSent;\n    }\n\n    const packetsLost = getStatValue('packetsLost');\n    if (typeof packetsLost === 'number') {\n      standardizedStats.packetsLost = packetsLost;\n    }\n\n    const packetsReceived = getStatValue('packetsReceived');\n    if (typeof packetsReceived === 'number') {\n      standardizedStats.packetsReceived = packetsReceived;\n    }\n\n    const packetsSent = getStatValue('packetsSent');\n    if (typeof packetsSent === 'number') {\n      standardizedStats.packetsSent = packetsSent;\n    }\n\n    let audioLevel = getStatValue('audioLevel');\n    if (typeof audioLevel === 'number') {\n      audioLevel = Math.round(audioLevel * CHROME_LEGACY_MAX_AUDIO_LEVEL);\n      if (isRemote) {\n        standardizedStats.audioOutputLevel = audioLevel;\n      } else {\n        standardizedStats.audioInputLevel = audioLevel;\n      }\n    }\n\n    const totalPacketSendDalay = getStatValue('totalPacketSendDelay');\n    if (typeof totalPacketSendDalay === 'number') {\n      standardizedStats.totalPacketSendDelay = totalPacketSendDalay;\n    }\n\n    const totalEncodeTime = getStatValue('totalEncodeTime');\n    if (typeof totalEncodeTime === 'number') {\n      standardizedStats.totalEncodeTime = totalEncodeTime;\n    }\n\n    const framesEncoded = getStatValue('framesEncoded');\n    if (typeof framesEncoded === 'number') {\n      standardizedStats.framesEncoded = framesEncoded;\n    }\n\n    const estimatedPlayoutTimestamp = getStatValue('estimatedPlayoutTimestamp');\n    if (typeof estimatedPlayoutTimestamp === 'number') {\n      standardizedStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n    }\n\n    const totalDecodeTime = getStatValue('totalDecodeTime');\n    if (typeof totalDecodeTime === 'number') {\n      standardizedStats.totalDecodeTime = totalDecodeTime;\n    }\n\n    const framesDecoded = getStatValue('framesDecoded');\n    if (typeof framesDecoded === 'number') {\n      standardizedStats.framesDecoded = framesDecoded;\n    }\n\n    const jitterBufferDelay = getStatValue('jitterBufferDelay');\n    if (typeof jitterBufferDelay === 'number') {\n      standardizedStats.jitterBufferDelay = jitterBufferDelay;\n    }\n\n    const jitterBufferEmittedCount = getStatValue('jitterBufferEmittedCount');\n    if (typeof jitterBufferEmittedCount === 'number') {\n      standardizedStats.jitterBufferEmittedCount = jitterBufferEmittedCount;\n    }\n\n    stats.push(standardizedStats);\n  });\n\n  return stats;\n}\n\n/**\n * Standardize the MediaStreamTrack's statistics in Firefox.\n * @param {RTCStatsReport} response\n * @param {object} options - Used for testing\n * @returns {StandardizedTrackStatsReport}\n */\nfunction standardizeFirefoxStats(response = new Map(), { isRemote, simulateExceptionWhileStandardizingStats = false }) {\n  if (simulateExceptionWhileStandardizingStats) {\n    throw new Error('Error while gathering stats');\n  }\n  // NOTE(mroberts): If getStats is called on a closed RTCPeerConnection,\n  // Firefox returns undefined instead of an RTCStatsReport. We workaround this\n  // here. See the following bug for more details:\n  //\n  //   https://bugzilla.mozilla.org/show_bug.cgi?id=1377225\n  //\n\n  let inbound = null;\n  let outbound = null;\n\n  // NOTE(mmalavalli): Starting from Firefox 63, RTC{Inbound, Outbound}RTPStreamStats.isRemote\n  // will be deprecated, followed by its removal in Firefox 66. Also, trying to\n  // access members of the remote RTC{Inbound, Outbound}RTPStreamStats without\n  // using RTCStatsReport.get(remoteId) will trigger console warnings. So, we\n  // no longer depend on \"isRemote\", and we call RTCStatsReport.get(remoteId)\n  // to access the remote RTC{Inbound, Outbound}RTPStreamStats.\n  //\n  // Source: https://blog.mozilla.org/webrtc/getstats-isremote-65/\n  //\n  response.forEach(stat => {\n    const { isRemote, remoteId, type } = stat;\n    if (isRemote) {\n      return;\n    }\n    switch (type) {\n      case 'inbound-rtp':\n        inbound = stat;\n        outbound = getStatById(response, remoteId);\n        break;\n      case 'outbound-rtp':\n        outbound = stat;\n        inbound = getStatById(response, remoteId);\n        break;\n    }\n  });\n\n  const first = isRemote ? inbound : outbound;\n  const second = isRemote ? outbound : inbound;\n\n  function getStatValue(name) {\n    if (first && typeof first[name] !== 'undefined') {\n      return first[name];\n    }\n    if (second && typeof second[name] !== 'undefined') {\n      return second[name];\n    }\n    return null;\n  }\n\n  const standardizedStats = {};\n  const timestamp = getStatValue('timestamp');\n  standardizedStats.timestamp = Math.round(timestamp);\n\n  const ssrc = getStatValue('ssrc');\n  if (typeof ssrc === 'number') {\n    standardizedStats.ssrc = String(ssrc);\n  }\n\n  const bytesSent = getStatValue('bytesSent');\n  if (typeof bytesSent === 'number') {\n    standardizedStats.bytesSent = bytesSent;\n  }\n\n  const packetsLost = getStatValue('packetsLost');\n  if (typeof packetsLost === 'number') {\n    standardizedStats.packetsLost = packetsLost;\n  }\n\n  const packetsSent = getStatValue('packetsSent');\n  if (typeof packetsSent === 'number') {\n    standardizedStats.packetsSent = packetsSent;\n  }\n\n  const roundTripTime = getStatValue('roundTripTime');\n  if (typeof roundTripTime === 'number') {\n    // roundTripTime is double - measured in seconds.\n    // https://www.w3.org/TR/webrtc-stats/#dom-rtcremoteinboundrtpstreamstats-roundtriptime\n    // cover it to milliseconds (and make it integer)\n    standardizedStats.roundTripTime = Math.round(roundTripTime * 1000);\n  }\n\n  const jitter = getStatValue('jitter');\n  if (typeof jitter === 'number') {\n    standardizedStats.jitter = Math.round(jitter * 1000);\n  }\n\n  const frameRateSent = getStatValue('framerateMean');\n  if (typeof frameRateSent === 'number') {\n    standardizedStats.frameRateSent = Math.round(frameRateSent);\n  }\n\n  const bytesReceived = getStatValue('bytesReceived');\n  if (typeof bytesReceived === 'number') {\n    standardizedStats.bytesReceived = bytesReceived;\n  }\n\n  const packetsReceived = getStatValue('packetsReceived');\n  if (typeof packetsReceived === 'number') {\n    standardizedStats.packetsReceived = packetsReceived;\n  }\n\n  const frameRateReceived = getStatValue('framerateMean');\n  if (typeof frameRateReceived === 'number') {\n    standardizedStats.frameRateReceived = Math.round(frameRateReceived);\n  }\n\n  const totalPacketSendDalay = getStatValue('totalPacketSendDelay');\n  if (typeof totalPacketSendDalay === 'number') {\n    standardizedStats.totalPacketSendDelay = totalPacketSendDalay;\n  }\n\n  const totalEncodeTime = getStatValue('totalEncodeTime');\n  if (typeof totalEncodeTime === 'number') {\n    standardizedStats.totalEncodeTime = totalEncodeTime;\n  }\n\n  const framesEncoded = getStatValue('framesEncoded');\n  if (typeof framesEncoded === 'number') {\n    standardizedStats.framesEncoded = framesEncoded;\n  }\n\n  const estimatedPlayoutTimestamp = getStatValue('estimatedPlayoutTimestamp');\n  if (typeof estimatedPlayoutTimestamp === 'number') {\n    standardizedStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n  }\n\n  const totalDecodeTime = getStatValue('totalDecodeTime');\n  if (typeof totalDecodeTime === 'number') {\n    standardizedStats.totalDecodeTime = totalDecodeTime;\n  }\n\n  const framesDecoded = getStatValue('framesDecoded');\n  if (typeof framesDecoded === 'number') {\n    standardizedStats.framesDecoded = framesDecoded;\n  }\n\n  const jitterBufferDelay = getStatValue('jitterBufferDelay');\n  if (typeof jitterBufferDelay === 'number') {\n    standardizedStats.jitterBufferDelay = jitterBufferDelay;\n  }\n\n  const jitterBufferEmittedCount = getStatValue('jitterBufferEmittedCount');\n  if (typeof jitterBufferEmittedCount === 'number') {\n    standardizedStats.jitterBufferEmittedCount = jitterBufferEmittedCount;\n  }\n\n  return standardizedStats;\n}\n\n/**\n * Standardized RTCIceCandidate statistics.\n * @typedef {object} StandardizedIceCandidateStatsReport\n * @property {'host'|'prflx'|'relay'|'srflx'} candidateType\n * @property {string} ip\n * @property {number} port\n * @property {number} priority\n * @property {'tcp'|'udp'} protocol\n * @property {string} url\n */\n\n/**\n * Standardized local RTCIceCandidate statistics.\n * @typedef {StandardizedIceCandidateStatsReport} StandardizedLocalIceCandidateStatsReport\n * @property {boolean} [deleted=false]\n * @property {'tcp'|'tls'|'udp'} relayProtocol\n */\n\n/**\n * Standardized active RTCIceCandidate pair statistics.\n * @typedef {object} StandardizedActiveIceCandidatePairStatsReport\n * @property {number} availableIncomingBitrate\n * @property {number} availableOutgoingBitrate\n * @property {number} bytesReceived\n * @property {number} bytesSent\n * @property {number} consentRequestsSent\n * @property {number} currentRoundTripTime\n * @property {number} lastPacketReceivedTimestamp\n * @property {number} lastPacketSentTimestamp\n * @property {StandardizedLocalIceCandidateStatsReport} localCandidate\n * @property {boolean} nominated\n * @property {number} priority\n * @property {boolean} readable\n * @property {StandardizedIceCandidateStatsReport} remoteCandidate\n * @property {number} requestsReceived\n * @property {number} requestsSent\n * @property {number} responsesReceived\n * @property {number} responsesSent\n * @property {number} retransmissionsReceived\n * @property {number} retransmissionsSent\n * @property {'frozen'|'waiting'|'in-progress'|'failed'|'succeeded'} state\n * @property {number} totalRoundTripTime\n * @property {string} transportId\n * @property {boolean} writable\n */\n\n/**\n * Standardized {@link RTCPeerConnection} statistics.\n * @typedef {Object} StandardizedStatsResponse\n * @property {StandardizedActiveIceCandidatePairStatsReport} activeIceCandidatePair - Stats for active ICE candidate pair\n * @property Array<StandardizedTrackStatsReport> localAudioTrackStats - Stats for local audio MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> localVideoTrackStats - Stats for local video MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> remoteAudioTrackStats - Stats for remote audio MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> remoteVideoTrackStats - Stats for remote video MediaStreamTracks\n */\n\n/**\n * Standardized MediaStreamTrack statistics.\n * @typedef {Object} StandardizedTrackStatsReport\n * @property {string} trackId - MediaStreamTrack ID\n * @property {string} ssrc - SSRC of the MediaStreamTrack\n * @property {number} timestamp - The Unix timestamp in milliseconds\n * @property {string} [codecName] - Name of the codec used to encode the MediaStreamTrack's media\n * @property {number} [roundTripTime] - Round trip time in milliseconds\n * @property {number} [jitter] - Jitter in milliseconds\n * @property {number} [frameWidthInput] - Width in pixels of the local video MediaStreamTrack's captured frame\n * @property {number} [frameHeightInput] - Height in pixels of the local video MediaStreamTrack's captured frame\n * @property {number} [frameWidthSent] - Width in pixels of the local video MediaStreamTrack's encoded frame\n * @property {number} [frameHeightSent] - Height in pixels of the local video MediaStreamTrack's encoded frame\n * @property {number} [frameWidthReceived] - Width in pixels of the remote video MediaStreamTrack's received frame\n * @property {number} [frameHeightReceived] - Height in pixels of the remote video MediaStreamTrack's received frame\n * @property {number} [frameRateInput] - Captured frames per second of the local video MediaStreamTrack\n * @property {number} [frameRateSent] - Frames per second of the local video MediaStreamTrack's encoded video\n * @property {number} [frameRateReceived] - Frames per second of the remote video MediaStreamTrack's received video\n * @property {number} [bytesReceived] - Number of bytes of the remote MediaStreamTrack's media received\n * @property {number} [bytesSent] - Number of bytes of the local MediaStreamTrack's media sent\n * @property {number} [packetsLost] - Number of packets of the MediaStreamTrack's media lost\n * @property {number} [packetsReceived] - Number of packets of the remote MediaStreamTrack's media received\n * @property {number} [packetsSent] - Number of packets of the local MediaStreamTrack's media sent\n * @property {number} [totalPacketSendDelay] - The total number of seconds that the local MediaStreamTrack's packets\n *  have spent buffered locally before being sent over the network\n * @property {number} [totalEncodeTime] - The total number of seconds spent on encoding the local MediaStreamTrack's frames\n * @property {number} [framesEncoded] - The total number of frames of the local MediaStreamTrack that have been encoded sor far\n * @property {number} [estimatedPlayoutTimestamp] - The estimated playout time of the remote MediaStreamTrack\n * @property {number} [totalDecodeTime] - The total number of seconds spent on decoding the remote MediaStreamTrack's frames\n * @property {number} [framesDecoded] - The total number of frames of the remote MediaStreamTrack that have been decoded sor far\n * @property {number} [jitterBufferDelay] - The sum of the time, in seconds, each audio sample or a video frame of the remote\n *   MediaStreamTrack takes from the time the first packet is received by the jitter buffer to the time it exits the jitter buffer\n * @property {number} [jitterBufferEmittedCount] - The total number of audio samples or video frames that have come out of the jitter buffer\n * @property {AudioLevel} [audioInputLevel] - The {@link AudioLevel} of the local audio MediaStreamTrack\n * @property {AudioLevel} [audioOutputLevel] - The {@link AudioLevel} of the remote video MediaStreamTrack\n */\n\nmodule.exports = getStats;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}