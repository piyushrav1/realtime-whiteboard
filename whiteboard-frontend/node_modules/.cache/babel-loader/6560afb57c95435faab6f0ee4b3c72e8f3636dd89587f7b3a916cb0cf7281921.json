{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gamin\\\\OneDrive\\\\Desktop\\\\Project\\\\Whiteboard\\\\live-whiteboard-app\\\\whiteboard-frontend\\\\src\\\\components\\\\WhiteboardRoom.js\",\n  _s = $RefreshSig$();\n// whiteboard-frontend/src/components/WhiteboardRoom.js\nconst socket = io('http://192.168.1.102:5000'); // <-- Replace YOUR_PC_IP_ADDRESS\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Stage, Layer, Line } from 'react-konva';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport './WhiteboardRoom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WhiteboardRoom() {\n  _s();\n  const {\n    roomName\n  } = useParams();\n  const navigate = useNavigate();\n  const [lines, setLines] = useState([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const stageRef = useRef(null);\n  const currentLineId = useRef(null); // To store the ID of the line currently being drawn\n\n  // --- Socket.IO Event Listeners & Room Joining ---\n  useEffect(() => {\n    if (!roomName) {\n      navigate('/');\n      return;\n    }\n    socket.emit('joinRoom', roomName);\n    socket.on('connect', () => {\n      console.log('Connected to backend Socket.IO:', socket.id);\n    });\n    socket.on('disconnect', () => {\n      console.log('Disconnected from backend Socket.IO');\n      alert('Disconnected from server. Please refresh.');\n      navigate('/');\n    });\n    socket.on('whiteboardState', initialLines => {\n      console.log('Received initial whiteboard state:', initialLines);\n      setLines(initialLines);\n    });\n\n    // Listen for 'drawingStarted' events from other users\n    socket.on('drawingStarted', newLine => {\n      console.log('Drawing started by another user:', newLine);\n      setLines(prevLines => [...prevLines, newLine]);\n    });\n\n    // Listen for 'drawing' events (new points) from other users\n    socket.on('drawing', data => {\n      const {\n        lineId,\n        newPoints\n      } = data;\n      setLines(prevLines => {\n        return prevLines.map(line => {\n          if (line.id === lineId) {\n            // Create a new line object to ensure immutability\n            return {\n              ...line,\n              points: line.points.concat(newPoints)\n            };\n          }\n          return line;\n        });\n      });\n    });\n\n    // Listen for 'drawingFinished' events from other users\n    socket.on('drawingFinished', data => {\n      const {\n        lineId,\n        finalLineState\n      } = data;\n      setLines(prevLines => {\n        return prevLines.map(line => {\n          if (line.id === lineId) {\n            // Update with the final state sent by the server for consistency\n            return finalLineState;\n          }\n          return line;\n        });\n      });\n      console.log('Drawing finished by another user:', lineId);\n    });\n    socket.on('userJoined', userId => {\n      console.log(`User ${userId} joined the room.`);\n    });\n    return () => {\n      socket.off('connect');\n      socket.off('disconnect');\n      socket.off('whiteboardState');\n      socket.off('drawingStarted');\n      socket.off('drawing');\n      socket.off('drawingFinished');\n      socket.off('userJoined');\n    };\n  }, [roomName, navigate]);\n\n  // --- Drawing Logic ---\n  const handleMouseDown = e => {\n    setIsDrawing(true);\n    const pos = e.target.getStage().getPointerPosition();\n    const newLineId = `${socket.id}-${Date.now()}`; // Generate a unique ID for this line\n    currentLineId.current = newLineId; // Store it for mouseMove\n\n    const newLine = {\n      id: newLineId,\n      tool: 'pen',\n      // You can make this dynamic later\n      points: [pos.x, pos.y],\n      stroke: 'black',\n      // Dynamic later\n      strokeWidth: 5 // Dynamic later\n    };\n    setLines(prevLines => [...prevLines, newLine]);\n    socket.emit('startDrawing', {\n      roomName,\n      line: newLine\n    }); // Emit start event\n  };\n  const handleMouseMove = e => {\n    if (!isDrawing) {\n      return;\n    }\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    let lastLine = lines[lines.length - 1]; // Get the line being currently drawn\n\n    // Ensure it's the line *this* user started drawing and matches currentLineId\n    if (lastLine && lastLine.id === currentLineId.current) {\n      // Add the new point to the last line's points array\n      lastLine.points = lastLine.points.concat([point.x, point.y]);\n      const newLines = [...lines];\n      newLines.splice(lines.length - 1, 1, lastLine); // Replace the last line with the updated one\n      setLines(newLines);\n\n      // Emit only the new points and the lineId to the backend\n      socket.emit('drawing', {\n        roomName,\n        lineId: currentLineId.current,\n        newPoints: [point.x, point.y]\n      });\n    }\n  };\n  const handleMouseUp = () => {\n    setIsDrawing(false);\n    // When drawing stops, send the final state of the line to ensure consistency\n    const finalLine = lines.find(line => line.id === currentLineId.current);\n    if (finalLine) {\n      socket.emit('endDrawing', {\n        roomName,\n        lineId: currentLineId.current,\n        finalLineState: finalLine\n      });\n    }\n    currentLineId.current = null; // Clear the current line ID\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"whiteboard-room-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Whiteboard Room: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"room-name\",\n          children: roomName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate('/'),\n        className: \"leave-button\",\n        children: \"Leave Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stage, {\n      width: window.innerWidth * 0.9,\n      height: window.innerHeight * 0.8,\n      onMouseDown: handleMouseDown,\n      onMousemove: handleMouseMove,\n      onMouseup: handleMouseUp,\n      onTouchStart: handleMouseDown,\n      onTouchMove: handleMouseMove,\n      onTouchEnd: handleMouseUp,\n      ref: stageRef,\n      style: {\n        border: '1px solid #ccc',\n        cursor: 'crosshair',\n        backgroundColor: 'white'\n      },\n      children: /*#__PURE__*/_jsxDEV(Layer, {\n        children: lines.map(line =>\n        /*#__PURE__*/\n        // No need for 'i' if using unique 'line.id'\n        _jsxDEV(Line, {\n          points: line.points,\n          stroke: line.stroke,\n          strokeWidth: line.strokeWidth,\n          tension: 0.5,\n          lineCap: \"round\",\n          lineJoin: \"round\",\n          globalCompositeOperation: line.tool === 'eraser' ? 'destination-out' : 'source-over'\n        }, line.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"hint-text\",\n      children: \"Draw here. Open this room in another tab to see real-time collaboration.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}\n_s(WhiteboardRoom, \"lPqzbLPt/TLzTnM86h7e8nn28mY=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = WhiteboardRoom;\nexport default WhiteboardRoom;\nvar _c;\n$RefreshReg$(_c, \"WhiteboardRoom\");","map":{"version":3,"names":["socket","io","React","useState","useEffect","useRef","Stage","Layer","Line","useParams","useNavigate","jsxDEV","_jsxDEV","WhiteboardRoom","_s","roomName","navigate","lines","setLines","isDrawing","setIsDrawing","stageRef","currentLineId","emit","on","console","log","id","alert","initialLines","newLine","prevLines","data","lineId","newPoints","map","line","points","concat","finalLineState","userId","off","handleMouseDown","e","pos","target","getStage","getPointerPosition","newLineId","Date","now","current","tool","x","y","stroke","strokeWidth","handleMouseMove","stage","point","lastLine","length","newLines","splice","handleMouseUp","finalLine","find","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","width","window","innerWidth","height","innerHeight","onMouseDown","onMousemove","onMouseup","onTouchStart","onTouchMove","onTouchEnd","ref","style","border","cursor","backgroundColor","tension","lineCap","lineJoin","globalCompositeOperation","_c","$RefreshReg$"],"sources":["C:/Users/gamin/OneDrive/Desktop/Project/Whiteboard/live-whiteboard-app/whiteboard-frontend/src/components/WhiteboardRoom.js"],"sourcesContent":["// whiteboard-frontend/src/components/WhiteboardRoom.js\r\nconst socket = io('http://192.168.1.102:5000'); // <-- Replace YOUR_PC_IP_ADDRESS\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Stage, Layer, Line } from 'react-konva';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { io } from 'socket.io-client';\r\nimport './WhiteboardRoom.css';\r\n\r\n\r\nfunction WhiteboardRoom() {\r\n  const { roomName } = useParams();\r\n  const navigate = useNavigate();\r\n  const [lines, setLines] = useState([]);\r\n  const [isDrawing, setIsDrawing] = useState(false);\r\n  const stageRef = useRef(null);\r\n  const currentLineId = useRef(null); // To store the ID of the line currently being drawn\r\n\r\n  // --- Socket.IO Event Listeners & Room Joining ---\r\n  useEffect(() => {\r\n    if (!roomName) {\r\n      navigate('/');\r\n      return;\r\n    }\r\n\r\n    socket.emit('joinRoom', roomName);\r\n\r\n    socket.on('connect', () => {\r\n      console.log('Connected to backend Socket.IO:', socket.id);\r\n    });\r\n\r\n    socket.on('disconnect', () => {\r\n      console.log('Disconnected from backend Socket.IO');\r\n      alert('Disconnected from server. Please refresh.');\r\n      navigate('/');\r\n    });\r\n\r\n    socket.on('whiteboardState', (initialLines) => {\r\n      console.log('Received initial whiteboard state:', initialLines);\r\n      setLines(initialLines);\r\n    });\r\n\r\n    // Listen for 'drawingStarted' events from other users\r\n    socket.on('drawingStarted', (newLine) => {\r\n        console.log('Drawing started by another user:', newLine);\r\n        setLines((prevLines) => [...prevLines, newLine]);\r\n    });\r\n\r\n    // Listen for 'drawing' events (new points) from other users\r\n    socket.on('drawing', (data) => {\r\n        const { lineId, newPoints } = data;\r\n        setLines((prevLines) => {\r\n            return prevLines.map((line) => {\r\n                if (line.id === lineId) {\r\n                    // Create a new line object to ensure immutability\r\n                    return { ...line, points: line.points.concat(newPoints) };\r\n                }\r\n                return line;\r\n            });\r\n        });\r\n    });\r\n\r\n    // Listen for 'drawingFinished' events from other users\r\n    socket.on('drawingFinished', (data) => {\r\n        const { lineId, finalLineState } = data;\r\n        setLines((prevLines) => {\r\n            return prevLines.map((line) => {\r\n                if (line.id === lineId) {\r\n                    // Update with the final state sent by the server for consistency\r\n                    return finalLineState;\r\n                }\r\n                return line;\r\n            });\r\n        });\r\n        console.log('Drawing finished by another user:', lineId);\r\n    });\r\n\r\n\r\n    socket.on('userJoined', (userId) => {\r\n        console.log(`User ${userId} joined the room.`);\r\n    });\r\n\r\n    return () => {\r\n      socket.off('connect');\r\n      socket.off('disconnect');\r\n      socket.off('whiteboardState');\r\n      socket.off('drawingStarted');\r\n      socket.off('drawing');\r\n      socket.off('drawingFinished');\r\n      socket.off('userJoined');\r\n    };\r\n  }, [roomName, navigate]);\r\n\r\n  // --- Drawing Logic ---\r\n  const handleMouseDown = (e) => {\r\n    setIsDrawing(true);\r\n    const pos = e.target.getStage().getPointerPosition();\r\n    const newLineId = `${socket.id}-${Date.now()}`; // Generate a unique ID for this line\r\n    currentLineId.current = newLineId; // Store it for mouseMove\r\n\r\n    const newLine = {\r\n      id: newLineId,\r\n      tool: 'pen', // You can make this dynamic later\r\n      points: [pos.x, pos.y],\r\n      stroke: 'black', // Dynamic later\r\n      strokeWidth: 5,   // Dynamic later\r\n    };\r\n\r\n    setLines((prevLines) => [...prevLines, newLine]);\r\n    socket.emit('startDrawing', { roomName, line: newLine }); // Emit start event\r\n  };\r\n\r\n  const handleMouseMove = (e) => {\r\n    if (!isDrawing) {\r\n      return;\r\n    }\r\n\r\n    const stage = e.target.getStage();\r\n    const point = stage.getPointerPosition();\r\n    let lastLine = lines[lines.length - 1]; // Get the line being currently drawn\r\n\r\n    // Ensure it's the line *this* user started drawing and matches currentLineId\r\n    if (lastLine && lastLine.id === currentLineId.current) {\r\n      // Add the new point to the last line's points array\r\n      lastLine.points = lastLine.points.concat([point.x, point.y]);\r\n      const newLines = [...lines];\r\n      newLines.splice(lines.length - 1, 1, lastLine); // Replace the last line with the updated one\r\n      setLines(newLines);\r\n\r\n      // Emit only the new points and the lineId to the backend\r\n      socket.emit('drawing', { roomName, lineId: currentLineId.current, newPoints: [point.x, point.y] });\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    setIsDrawing(false);\r\n    // When drawing stops, send the final state of the line to ensure consistency\r\n    const finalLine = lines.find(line => line.id === currentLineId.current);\r\n    if (finalLine) {\r\n        socket.emit('endDrawing', { roomName, lineId: currentLineId.current, finalLineState: finalLine });\r\n    }\r\n    currentLineId.current = null; // Clear the current line ID\r\n  };\r\n\r\n  return (\r\n    <div className=\"whiteboard-room-container\">\r\n      <div className=\"header\">\r\n        <h1>Whiteboard Room: <span className=\"room-name\">{roomName}</span></h1>\r\n        <button onClick={() => navigate('/')} className=\"leave-button\">\r\n          Leave Room\r\n        </button>\r\n      </div>\r\n      <Stage\r\n        width={window.innerWidth * 0.9}\r\n        height={window.innerHeight * 0.8}\r\n        onMouseDown={handleMouseDown}\r\n        onMousemove={handleMouseMove}\r\n        onMouseup={handleMouseUp}\r\n        onTouchStart={handleMouseDown}\r\n        onTouchMove={handleMouseMove}\r\n        onTouchEnd={handleMouseUp}\r\n        ref={stageRef}\r\n        style={{ border: '1px solid #ccc', cursor: 'crosshair', backgroundColor: 'white' }}\r\n      >\r\n        <Layer>\r\n          {lines.map((line) => ( // No need for 'i' if using unique 'line.id'\r\n            <Line\r\n              key={line.id}\r\n              points={line.points}\r\n              stroke={line.stroke}\r\n              strokeWidth={line.strokeWidth}\r\n              tension={0.5}\r\n              lineCap=\"round\"\r\n              lineJoin=\"round\"\r\n              globalCompositeOperation={\r\n                line.tool === 'eraser' ? 'destination-out' : 'source-over'\r\n              }\r\n            />\r\n          ))}\r\n        </Layer>\r\n      </Stage>\r\n      <p className=\"hint-text\">\r\n        Draw here. Open this room in another tab to see real-time collaboration.\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WhiteboardRoom;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}